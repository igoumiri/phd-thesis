%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: robust2.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Imène Goumiri
%%CreationDate: 17/01/13
%%BoundingBox: 0 0 239 196
%%HiResBoundingBox: 0 0 238.1113 195.6533
%%CropBox: 0 0 238.1113 195.6533
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 108 8%%BeginData: 14584 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD2DFFA8A87DFD0AFFA87DA8FD0FFFA8FFA87DA87DA87D7DA8FD05%FFA8FD52FF275252A87D7D7DA8527D52FF52A8527D7DA852FD067DFFA8FF%FFA827FF7DFD04527D277DFF7D7DA87D527D7DA8FD4EFFA87D7DFD055227%275252FF7D7D5252272752277DFD0427A8A87DFFA827A87D5252527D527D%FFFF2752277D2752277DFD4FFFA8FF52FFA87DA8FFA8FFA8FFA8A8A8FFA8%A8527DFFFFA8FFA8FD05FFA8FFA8FFFD05A8FFA852A8FFA8FFA8FFA8FDFC%FFFD2EFF7DFD7EFFA8A87DA8A8FFA8A8A87F7ECFFD05A8FFA8A8A8FFFD07%A8FFA8A8A8FFFD07A8FFA8A8A8FFFD07A8FFA8A8A8FFA1FD06A8FFA8A8A8%FFFD07A8FFA8A8A8FFA8A8A8FF83A8A8FFA8FFA8A97EA8A8FFA8FFA8FFA8%FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8A8FD09FFA8A85FAEFD04FFA97F7F%FD2EFFCAC3FD17FFA8FFFFAE83FFA8FFA8FFFFA9A8FFFFFFA8FFFFFFA8FF%A8FFA8FFFFFFA8FFFFFFA8FFFFFFA8FD0AFFA8FF898983FD04FFCB7F7FA9%FD2BFFCAC3FD0CFFA8FD07FFA8A8A8FFA8FFCBFFA85252A8A8527DFFFFA8%A8FFA8A8FFFF7D7DA8FFFFA8277DFFFFFF7D7DFFA8FD0BFFA97FA9A38459%84A8FFFFFFA97F7FFD2BFFC3FD15FFA8FFFD05A9FF27A87D52277DFF7D27%7DFD0452A87DFD09527D5227A8FFA8FD0AFFA8A9A9A97FA97E5F357E7FA3%7F7F4F797FA9FD27FFCAC3FD0BFFA8FD07FFA8A8A9FFA9FFA9FFA852A8A8%27527DFF52527D52527D52A87D7D527D527D527D52527D7D27A8A8FD14FF%83AEAEFFFFFF7E7F2A79557F7FA9A9FD21FFCAC3FD14FFA8FD25FFA8FD0A%FFA8AEA8AE83AE84AE84AE5F111139113910844F252525F925547F7FA9A9%FD1DFFC3FD0BFFA8FD0FFFA85252FFFF7D7DFD17FFA8FD0BFFA883AEAEAE%84AEAEAE84AF84171017103A838A0707072A4EFFFFFFA37F7FA9A9FD1AFF%C4CAFD13FFA8FFA8FD04AEFF277D7D52277DFFFF27A8FD14FFA8FD0AFFA8%FD0BFF831110175FAEFFA903080759358989AEA8FFA3A37F7F7EFD17FFC3%CAFD0AFFA8FD07FFA8FFAEFFA8FFA8FFA852A87D275252FFA8527DFD13FF%A8FD0EFFCACAFD08FF3A17AEFF8389AE7925CBFFA95A848AAE83AEAEFFA9%A97F7FA9FD14FFCACAFD13FFA8FD25FFA8FD0AFFA8FFFFBCFCCAFD07FFAF%83FFFFFFA88A595ACFFFFFFF7FA3A9FFAEAE838983FFA9A97FA9A9FD11FF%CAC4FD0AFFA8FD07FFA8FD07FFA87D52FD0DFFA8FD04FFA87DFD07FFA8FD%0BFFCAC3C3FCB0FCC3FD0EFF8A8983FFFFFFA9A97FA9FFFFFFAE838AAEAF%A9A37FFD11FFC3FD13FFA8FFFD05CAFF27FD057D52FFFD067D525252A8A8%7D27A8A852A8FD05FFA8FD0AFFA8FFBCFD04FCBCCAFD0EFFAE5F8AA8FFFF%FF7F7F7EFFFFFFA8AE838983A97F7FA8FD0DFFCFC3A8A9A9A9A8A9A9A9A2%A9A8FFA9FD05FFCFFFCAFFCAFFCAFFA852A87D5252277DFF52277D525227%5252527DA85252A8FF27A8FD04FFA8FD0CFFCAB5FCB6B5BCBDCAC3CAFD0E%FFAE8983FD04FFA97FA9FD05FFAE898984A37FCBFD06FFA9A97FA97FA99B%A37FA97FA9A3A97FA97FA97FA97FA37FA9A9A9A8FD07FFA8FD07FF52FD13%FFA8FFA8FD0AFFA8FFC3CAFD06FFC3C3C3CAFD0DFFAE5F89A8FFFFFF7F7F%7FFD05FFA88983AF7F7FA9A97F7F7EA97FA9A9FFFFC3CAFD09FFCFFFFFFF%A9A9A3A97F7F547F7EA9A8FFA8FFA8AE83FFA8FFA8A97EFFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FD0BFFA8AFFD0AFFCAC3C3C3FD0DFFAE8A%83AEFFFFFFA979A9FD05FFAE5F8454554FFD09FFC3FD15FFA9A9A3A37FA9%A9FFAE8AFD04FFA9A9FD14FFA8FD0AFFA8FD0DFFCACAC3C3C4FD0DFF8383%83FFFFFF7E7F7FFFFFA97F7F7E83838479A9FD04FFA8AE84A183895F8A83%835F8A838A83AEA8AEA8FD0BFFA8A97F7F35A9A9FFFFFF7FFD13FFA8A8FD%1BFFCACAC3CAFD0DFFAE5FAEFFFFFF7F557FA3FD05FF838A5A7E838A838A%83AEA1CFAFFFAFFFAEFFAFFFAEAEA8AE83AE838A83AEAEFD0AFF8A7EA37F%A9A9A3FD14FFA8FD0AFFA8FD13FFC3C3C4FD0DFF83895F7F7FA97F7FA9FF%FFFFA8835E3A347E7EFD04FFCACAFD09FFA8FD05FFAEAFA88A83835FAEA8%FD05FF83AEFFFFA97F557FA3FD12FFA8FD1FFFCAC3C3CBFD0CFF7F5A5F8A%CFFFCB7F5A5F83AEAEFFFFAE83A37FFFFFFFC3FD17FFA8AE838A83AEAFAE%84FD04FFA9A9A97FA3A9FD0FFFA8FD0AFFA8FD16FFCABCC3CAFD08FFA954%A9FFFF8483838983845A7FA9FD04FFAE5F7E79FFFFC3CAFD09FFA8FD0FFF%AEAE83895E5FA8FFFFFF7EFFFFFFA9A97F7F7ECBFD0AFFA8FD24FFCAC3C3%FD06FF7F7FFD05FF835F5E8AFFFFA97F7FFD05FF89847FFFC3FD1EFFAF5F%AE838A8485FD06FFA9A97FA37FFD09FFA8FD0AFFA8FD1AFFCABCCAFFFFA9%7FA9FD04FF8A5FAEFFFF848983FFFFA9557FA9FFA9FF83837FA1CFFD09FF%A8FD13FFAE8AFFFFAE84358983AEAEFD05FFA9A97F7F7FA9A9FFFFFFA8FD%0BFFA8A8FD1BFFC3C3A27FA9FFFFFFAE8983FD05FFA95A35607EA9795555%A97FA9595F71A3FD1EFF83FD04FFA3AEAE838983AEFD06FFCBA97F7F7FA9%FFFFA8FD0AFFA8FD1DFF7895C3FFFFFF8383AEFFA9A97E7F7FA9A9FF8483%83FFFFA37EFFFFFFA77630557E7FA9FD05FFA8FD13FFA88AFD04FF7FFFFF%FFAFAE838383AEA8FD06FFA97E7F7EA8FD27FF7F7FFFCAC3FF83AEFFFF7F%7F7FFD07FF835F3A8A8984598A8ACFA0657FCBA9A37FA9CBFD17FF83FFFF%FFA9A9FD08FF848A83AEAEFD06FFA9A8FD0AFFA8FD1BFFA37FFFFFFFCA75%A7A97F7EA9FD04FF8383838A83AEA8FF5F5E83FF5A5A7CA75F3A2FAFFFFF%A37F7FFFCFFD13FFA88AFFFFFFA9A3FD0BFFA8835F8A84FD04FFA8FD25FF%A97FFD04FF65A8959CA9FFFFFF848983AEAEFD07FFAF8983FFA99CA2FFAE%5E3584AEFFFFA97FA3FD14FF83FFFFFF7FFD0FFFA8AE838983AEA8FD0AFF%A8FD19FFA97FA9FFFFFF5E7F7FAFC3C3A88A5F8AAEFD0CFFAE5EAEC37F7F%FFAE5F548A5F83CFFF7E7FA8FD11FFA8AEFFFFFF7FA9FD11FFAEAE83A8FD%24FF7FA9FFFFFF5F5BA3FFFFFF7D9A83FD11FF83A0CFCB79FFAE84A3FF84%89AEFFCB7F7FFD10FF8AAEFFFFFF7FFD15FFA8FFFFA8FD07FFA8FD18FFA9%7FFFFFFF595AA9FFFFAE5E8ACAC3CAFD0DFFCAC3C3BD9AA0A0C495C37C7E%A9FFAF8A5FFFFFA37FFD0FFF83FFFFFF7FA9FD14FFA8FFFF277DFD07FFA8%A8FD17FF79FFFFFF8360FFFFFF8A5FFD04FFC3C3FD0AFFCAC3CACAFFC3FF%FF8A89FF789C9A9CFD04FF5FAEFFA979FD0DFFA88AFFFFA97FFD16FFA8A8%527DFD07FFA8FD17FF79A9FFFF7E35CFFFFF8383FD06FFC3C3FD07FFCAC3%C3FFFFFFCAC3FFFFFF8A5FFF7F7E75BDCAFFCAFF5F8AFFA979FD0CFF83A8%FFFF7F7EFD15FFA8A8FF7DA8FD1EFFA97FFFFFA935AEFFFF8983FD08FFC3%C3FD06FFC3CAFD04FFCAC3FD04FFAE5FFF7F607EBDCAFFFFFF5FAEFFA97F%FD0BFF5FFFFFCB7FFD17FFA8A8527DFD07FFA8FD16FF7FA9FFA95A83FFFF%8384FD0AFFC3C3FD04FFC3CAFD05FFC3FD07FF5EFF545979C3A8FFFFFF5F%AEFF7F7FFD09FF5FAEFFFF55FD18FFA8FF52A8FD1EFF7FFFFF7F5FFFFF8A%83FD0CFFC3C3FFFFCACAFD05FFCAC3FD08FF5FFF597FA2C3FD04FF5FFFFF%7FA9FD07FF838AFFFF79A9FD18FFA87D527DFD07FFA8FD15FF7FA9FF7F7E%89FFAE5FFD0EFFC3C3FFBCFD06FFC3C4FD08FFAF5FAE2FA9C3CAFD04FF5E%FFA97FFD06FFA85FFFFF7FA3FD18FFA8FF7D52A8FD1DFFA3A9FF7FAEA8FF%5FFD10FFC3BCFD07FFC3FD0AFFAE838454CAC3FD04FFAE83FF7FA9FD05FF%83AFFFA97FFD1AFFA8FFFFA8FD07FFA8FD15FF7FFF78FF83FF5FAEFD11FF%BCCAFD05FFC3CAFD0BFF838330A2C3FD05FF89A8FF54FD04FF83A8FFA97F%FD1AFFA8FFFF52A8FD07FFA8A8FD13FFA9A9A9A3FFAEAE89FD12FFC3BDCA%FFFFFFCAC3FD0DFF89357FC9FD05FFAE89FFA97FFFFFAE83FFFF7FFD1CFF%A8A87D7D7DFD06FFA8FD14FFA97E7FA9AE838AA8FD12FFCACAC3CAFFFFC3%CAFD0DFF833A2AC3FD06FF5FAEFF7FA9FF5FFFFF7FA9FD1BFFA8A8FF7DFD%1DFFA9A37FFFAE8A83FD13FFC3FFCAC3FFFFC3FFCACAC3CAC3CACAFD07FF%3A4EC3FD07FF83FFA9A383FFFFA9A3FD1DFFA8A8F852FD07FFA8FD14FFA9%54A9FFAE5EAEFD13FFCAC3FFC3C4C3CAC3C3CACACAFFC3BCC3FD06FF5F4C%C4FD07FF89AEFF598AFFA978FD1EFFA8FF52A8FD1CFFA979FFFFAE5EAFFD%14FFC3FFFFC3BCBCBCCACAC3BCB0B5B5B6B6C3CAFFFFFF839A7FFD07FFA8%8AFF5F7FFF7FFD1FFFA8A8527DFD07FFA8FD14FFA955FFFFAE5EFD15FFC3%C3FFCAFCBCFFCABDB6B5C3C3BCB5FD04BCCACAA059A9FD08FF5F89837F7E%A3FD1EFFA8FFFF27A8FD06FF7DA8FD14FFA97FFFFFA889FD16FFC3BDC3BC%C3C3C3FFBCA8A8FFCABDBCFFFFC4B5BC99597FFD08FFAE5EFFA979FD20FF%A87D5252FD05FFA8A87DFFA8FFA8FFA8FFA8FFFFFFA8FFFFFFA8FFFFFFCF%A979FFCBAE5FFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFA8FFA8FFFFFFAFCAB5%C39AC3B6C3A8C37DA8AFFFBCBCAFFFC3B6B09A527FCFFFFFFFA8FFFFFF83%5FFFA94EFFFFFFA8FFA8FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFA8%FFA8FFFFFFA8FFA827527DFD05FFA8A8FD14FF7F7FFFFF8489FD15FFCABD%FFCAB0BCFFCAC4B6BCCACABCBDBCC3B6BCC4FF765FA3FD08FF8A5FAF7FA3%7FFD1FFFA8FF7D27A8FD06FFA8FD14FFA954FFFFAE34FD15FFBDFFFFCAB6%BCBCCAC3BCFCB0B0B5B0BCBCCAFFFFFF8370A9FD07FFAE83FF34A9FF7FA9%FD1DFFA8A8FF277DFD1CFFA979A9FFAE5FAEFD13FFCACAFFCAC3CACAC3C3%CACAFFCACABCCAFD06FF5F70A2FD07FF83FFFF8484FFA97FFD1EFFA8A852%7DFD07FFA8FD14FFA978A3FFAE5F8AFD13FFC4CAFFBCFFCAC3FFCAC3C3C3%CAC3CAFD06FFAE3A29C4FD06FFA883FFA97E89AEFF7FA9FD1DFFA8FF52A8%FD1CFFA9A97FFFAE8A83FD13FFC3FFBDFFFFFFC3FD0EFFAE3A4EC3FD06FF%8AA8FF7FFFAE89FFFF55FD1DFFA8A8277DFD07FFA8FD15FF7FA97FFF83AE%5FFD12FFC3BCCAFFFFFFCABDFD0DFF5E5954C9CBFD05FF5FFFA97FFFFF5F%8AFFA954FD1BFFA8FFA852A8FD1DFFA3FF7FFF8AAF8AAEFD11FFBCCAFD05%FFC3CAFD0BFF838A30A3C3FD05FF83AEFF7FA9FFFFFF5FFFFFA97FFD1BFF%A8527D7DFD07FFA8FD15FF7FFFA3A989AEA883FD10FFC3BCCAFD05FFCAC3%FD0AFF84895F54A2C3FD04FFA883FFA97FFD05FF5FFFFFA37FFD19FFA8FD%0BFFA8A8FD14FFA9A9FF79AF83FF838AFD0EFFC3CAFFC3FD06FFC3CBFD08%FFAE89AE597FCACAFD04FF83CFFF7FFD06FFAE83FFFF7FA9FD19FFA8FD0A%FFA8FD15FFA97FFFFF5583AEFF5FAEFD0CFFC3C3FFFFC3CAFD05FFCAC3FD%07FFAE5FA88454A3BCFD04FF8384FF54A9FD07FF8983FFFF7FA9FD17FFA8%A8FD21FF7FFFFFCB548AFFFF5FAFFD0AFFC3C3FD04FFBCFD06FFC3CAFD06%FF89AEA935A3BDFD04FF8A83FF7FA9FD09FF83AEFFFF7FFD18FFA8FD0AFF%A8FD16FFA97FFFFFA92FCFFFFF5FAEFD08FFC3C3FD05FFCABCFD05FFC3CA%FD04FFA85FAEA3357E95CAAFFFFF835FFFA97FFD0AFFA883FFFFA37FFD17%FFA8FD22FF7FA9FFFF8559FFFFFF5FAEFD06FFC3C3FD08FFBCCAFD04FFC3%FFFFFFAE89CFA95A7C95FD04FF8A83FFA97FFD0CFF83AFFFFF7FA9FD16FF%A8FD0AFFA8FD17FFA87FFFFFFF8359FFFFFF5F83A8FFFFFFBDC4FD0AFFC3%C3C3FFFFC3CAFF8389FFA371A071CBFFFFA85F83FFA979A9FD0CFFAE83FF%FFFF79FD15FFA8FD24FF7FA9FFFFFF5F5AFFFFFF8489AEFFBDCAFD0DFFCA%C3CABDC37CA7C39B9BA67EA9FFFFAE83AEFFA97FFD0FFF8AFFFFFF7FA9FD%15FFA8FD0AFFA8FD19FF55FFFFFFCF5954A9FFFFAF8375A7FD11FFA799CF%A278A9AE59A3FFAE5F8ACFFF7F7FFD10FF83AEFFFFA97FFD14FFCBFD0BFF%A8A8FD19FF7FFFFFFFCF5F7EA3FFCABDCF898984FD0DFFAE898ACA7F7FFF%FF5F7F848A83FFFFA97FA9FD11FFAEA8FFFFFF7FFD13FFAEAEA8FD0AFFA8%FD1AFFA97FFFFFFFA8657E9B94FFFFFFA8835F8A84FD09FF5F89CFFF71A3%FFFF3A59598AAEFFA97F78FD13FFA88AFFFFFF7FA9FD0FFF84835F8A83A8%FD26FFA97FFFFFFFA8A0A1FF7FA9A9FFFFFFAEAE838A83AEAEFFFFAE5EAE%FF8554A1A7893A5A84FFFFFF7F7FA9FD15FF83FFFFFFA9A9FD0BFFAF848A%83AEAEFFFFFFA8FD0AFFA8FD1CFF7F7FFFC3C3A889AEFFA37F7FA9A9FFFF%FFAEAE848A5E5E3A895959598AA7A15E7EA3FF7F7F7FA9FFFFA8FD13FFA8%8AFFFFFFCB7FFD08FFAE838983AEA8FD05FFA9A8FD28FF7F71C3FFFFFF8A%83FFFFFFA37F7FA9A9FFFFFF838ACFFF7F7FFD04FF765B55A37FA9FD1AFF%83FFFFFFA9A9FD04FFAEAE838A83AEFD06FFA9A97F7FA8FD0AFFA8FD1CFF%CAC2A255FD04FFAE5EAEFD04FFA9A95A592F7F7F7F4E557F7F7F7E587179%FFA9FD07FFA8FD13FFA884FD04FF7FFFA88A5F8983AFAFFD05FFA9A9787F%7FFFA8FD26FFCAC3C3FFFFCB79FD05FF838AAEFFFFFF8989AEFFA97F7FCB%A9FFFFAE5F7F9BFD1FFF83FFFFFFA860838AA8FD07FFA9A97F7FA9FD05FF%A8FD0AFFA8FD19FFC3C3CAFD05FF797FFD04FFA88A5E5E5FFFFFCB7E7FA9%FD04FF89597FA9C3CAFD09FFA8FD13FFAE5F838983845AFD07FFA9A97F7F%A3FD07FFA8FD0BFFA8A8FD16FFC3C3CAFD08FFA37FA9FFFFFF83895F89A8%A97FCBFD04FFA8897E7FA9FFC3FD1BFFAEAE83895EAEAEFFFFA3FD04FFA9%A37FA3A9FD0BFFA8FD0AFFA8FD15FFC3C3C3FD0BFFCB7F54835FAEFFFF7E%59598984FFFFFF83837E7FA9FFFFC3CAFD09FFA8FD0BFFA8AF84835F8383%AF83AEFD04FF7FFF7E7F7F7FA8FD0DFFA8A8FD1EFFCAC3CAFD0DFFAE8384%5AA9A9A97FA9FFFFAEAE83895E5F5AA9FD04FFC3FD11FFAEFFAE8A83AE83%AEAEFD04FFAEAEFFFFFF7F797FA9A9FD11FFA8FD0AFFA8FD11FFC3C3C3FD%0DFF848983AEFFFF7F4F4EA9FD04FFAE895E7E5983838A83AEAEC3A8AFA8%FFAEFFAEFFAEAFA8AFA8AE838A83835FAEA8AFAEFD07FF5FA97F7F7FA97F%FD14FFA8FD15FFC3C3FFFFCAC3C3CAFD0DFFAE5F8AAEFFFFA979A9FFFF7F%7FA3A95F89847FA3FFFFFFAEFFAEAE7CA7838A83AE838A838A838383AEAE%AFAEFD0BFFA9A97F597EFFFFFFA9A9FD14FFA8FD0AFFA8FD09FFC3FCFCC3%C3C3CAFD0DFF838383FFFFFFA27F7FFD05FFA85F5F5A5579A9FD08FFC4CA%FFFFFFAEFD05FFCBFD09FFA9FFA9A97E7F7F7FA9AF83FD04FFA97EFD13FF%A8FD14FFC3B0FCB0BCFD0DFFAEAE83AEFFFFFFA97FA9A9FD05FF83AEA8A9%7FA9A9A37FA97FA9A9FFFFFFC3FD0FFFA9FFA9A97FA97FA3A3FD05FFAE8A%FD04FFA9A9FD14FFA8FD0AFFA8FD05FFCACABCFD04FCB5FD0BFFAF838384%FFFFFF7F7F7FFD05FFA8895F847F7FA3FD05FFA9A97F7F7FA37F9B7EA97F%A97FA9A3A97FA97EA37FA37F7F7FFD04A9FD08FFAEA8FD04FFA9A9FD13FF%A8FD0BFFAFAFFFCACAC3C3C3CAC3C3BCBCB0CAFD08FFAE895FAFFFFFFFA9%7FA3A9FFFFFFAE8A838A84A37FA9FD0EFFC3CBFD0BA9FFA9FD0FFF5FFD05%FF7FFD15FFA8FD0AFFA8C3BDCACAFD09FFCAFD06FFAE5F89A8FFFFFF7F7F%7EFFFFFFA88A5F89A8A97F7FA9FD0FFFCAC3FD0AFFA8FD11FFA883FD05FF%7FA9FD13FFA8A8FD0AFFCACAFD11FF848983FD04FFA97FA9FFFFAE8A83AE%AEFFA9A37FFD13FFC3FD1CFFAE83FD05FF7FFD15FFA8FD0AFFA8FD10FF8A%5F8AAEFFFFFF7F7F5AAE89895FAEA8FFA3A37FA3A9FD13FFCACAFD0AFFA8%FD11FF83AFFD04FFA9A3FD15FFA8FD19FF848984FFFFFFAE8435605FAEAE%AFAECB7FA37FA9A9FD16FFCACAFD1BFFAE8AFD05FFA9A9FD15FFA8FD0AFF%A884838A84AEA8AFA8FFA8AE83893A5E83AE835F2F5983AECFFFA9A97F7F%7FA9A9FD19FFC3CAFD0AFFA8FD10FF8A83FD05FF7FFD15FFA8FD0CFF84AE%A8AE838A83895F5F3A3B84A8A8AFA8A97FA9FFFFA3A97F7FA3FD1EFFC4CA%FD1BFF5FFD06FFA3FD16FFA8FD0AFFA8FFFFFFAE3A113911171184254F25%2B252555FD047FA9A9FD21FFC3FD0BFFA8FD0FFFA883FD05FFA97FFD15FF%A8FD0BFFA9A8A9A9CB591111111060A979F925252555FFCBFD25FFCACAFD%1BFF8AAEFD05FF7FFD17FFA8FD0AFFA87F7FA97E591111105EA9A97F4F03%254EFD28FFC3CAFD0BFFA8FD0EFFAE5FFD05FFA97FA9FD15FFA8A8FD0DFF%8989AEFF3939AFA97FA9FF5525FD29FFC3FD1BFF83FD06FFA97FFD17FFA8%FD08FFA8A883835FFD04FFAF5A7F7FFFFFFFA9A9FD28FFC3C4AFFD0BFFA8%FD0BFFA8FFA883FD06FF7FA9FD17FFA8FD07FFA8A87DA883CBA8FFA8A978%A3A8CFA8A9A8CFA8FFA8A8A8FFFD07A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8%A8A8FFA8A8A8FFA8A8A8FFA8A8A8C3A8A8A8FFA8A8A8FFA8A8A8FFA8A8A8%FFA8A8A8FFA8A8A8FFA8A8A88384CBA8FFA8A8A87FA8A8A8FFA8A8A8FFA8%A8A8FFA8A8A8FFA8A8A8FFFD05A8FD06FFA8FFA87DA8FFFFFFA8FFFFFFCF%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF%FFA8FFFFFFA8FFA8FFA8FFFFFFA8FFFFFFAFFFA8FD05FFA8FFFFFFA8FFA8%FFA8FFFFFFA8FD05FFA8FD05FFA8FD05FFA8FFA8FFFFFFA8FFFFFFA8FFFF%FFA8FFFFFFA8FFFFFFA8FD0BFFA8A8FD0AFFA8FD0AFFA8A8FD0AFF7DFD0B%FF7DFD0BFFA8FD0AFF7DA8FD09FFA8A8FD0AFF7DA8FD0AFF7DFD0BFF7DFD%08FFA8A852A8FD08FFA8A87DA8FD08FFA87D52FD09FFA87D7DFD07FFA8A8%7D7DA8FD07FFA8A87DA8FD0AFF7DA8FD0AFF7DFD0AFFA87DFD09FFA87DA8%FD09FF7D7DFD0BFFA8FD0AFFA8FD0BFFA8FD0AFFA8FD0BFFA8FD0BFFA8FD%15FFA8A8FD0AFFA8FD0BFFA8FD0BFFA8FD3DFF7D7DA8FFFFFFA8FFFF7DFD%76FF525252A87D7D7DFF7D52A8FD047DFD71FF5252522752F87DFF7D2752%27522752FD71FFA8FD09FFA8FFA8FDB5FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="Ôªø" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2013-01-17T00:10:22-05:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:ModifyDate>2013-01-17T00:10:22-05:00</xmp:ModifyDate>
         <xmp:MetadataDate>2013-01-17T00:10:22-05:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>212</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA1AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq86/MrQPO2p6xBN5cmvbeGOyeO8CXrWtpOJLiMcFEc8csdzEnKVJVQAgemz0amKpL/ys&#xA;L80h5ftdcWDSbjSp9QNmdUt4WaD6v9dtrKO6Cm+VvSm9SeZGVmoqpUUYsFV6a7/zkJLqGmyt5Wso&#xA;l5GG+Z5kWOOKRLZpHVI9RkWRhJ6wQsnIKv7PNhiqY3dn+Yd95Z8pHWrK+uNXtb9z5jh0a9TTzJbr&#xA;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&#xA;dirsVdirsVf/2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Mac OS X 10.8.2 Quartz PDFContext</pdf:Producer>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>85.000152</stDim:w>
            <stDim:h>69.909945</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>CMUSerif-Italic</stFnt:fontName>
                  <stFnt:fontFamily>CMU Serif</stFnt:fontFamily>
                  <stFnt:fontFace>Italic</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 0.7.0 </stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>cmunti.otf</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>CMUSerif-Roman</stFnt:fontName>
                  <stFnt:fontFamily>CMU Serif</stFnt:fontFamily>
                  <stFnt:fontFace>Roman</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 0.7.0 </stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>cmunrm.otf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Groupe de nuances par d√©faut</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:B0F72130252068119109FFF4BB8BEFCF</stRef:instanceID>
            <stRef:documentID>xmp.did:B0F72130252068119109FFF4BB8BEFCF</stRef:documentID>
            <stRef:originalDocumentID>xmp.did:B0F72130252068119109FFF4BB8BEFCF</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:DocumentID>xmp.did:B1F72130252068119109FFF4BB8BEFCF</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:B1F72130252068119109FFF4BB8BEFCF</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:B0F72130252068119109FFF4BB8BEFCF</xmpMM:OriginalDocumentID>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:B0F72130252068119109FFF4BB8BEFCF</stEvt:instanceID>
                  <stEvt:when>2013-01-17T00:10:12-05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:B1F72130252068119109FFF4BB8BEFCF</stEvt:instanceID>
                  <stEvt:when>2013-01-17T00:10:22-05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -195.653 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 195.653 li
238.111 195.653 li
238.111 0 li
cp
clp
[1 0 0 1 0 0 ]ct
20.1963 180.374 mo
236.508 180.374 li
236.508 13.4883 li
20.1963 13.4883 li
20.1963 180.374 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
ef
.178151 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
20.1963 180.374 mo
20.1963 13.4883 li
236.508 13.4883 li
236.508 180.374 li
20.1963 180.374 li
@
20.1963 180.374 mo
236.508 180.374 li
.399902 .399902 .399902 rgb
@
20.1963 13.4883 mo
236.508 13.4883 li
@
20.1963 180.374 mo
20.1963 13.4883 li
@
236.508 180.374 mo
236.508 13.4883 li
@
20.1963 180.374 mo
236.508 180.374 li
@
20.1963 180.374 mo
20.1963 13.4883 li
@
20.1963 180.374 mo
20.1963 178.206 li
@
20.1963 13.4883 mo
20.1963 15.627 li
@
%ADOBeginSubsetFont: CMUSerif-Roman Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /CMUSerif-Roman def/FontInfo 7 dict dup begin/Notice (Converted by Andrey V. Panov from TeX fonts. Some glyphs are copied from Blue Sky fonts released by AMS.) def/Weight (Medium) def/ItalicAngle 0 def/FSType 0 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 54 /six putdup 127 /minus putdef/FontBBox {-1135 -387 1495 1094} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 -0 430 447 664 666 678 716] def/OtherBlues [-206 -195 -162 -162] def/BlueScale 0.0260525 def/StdHW [31] def/StdVW [70] def/StemSnapH [0 22 26 31] def/StemSnapV [25 28 30 40 70 75 84 89 103] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/six <1C60D8A8C9B7A73D3B2B97FE394CF5175EFEC06CD8F59A375CA613F970C72D12637DB933999AAEB83DC7E92BB4FB4948F80C402718B31D85CFA390A54B1E07DB2420D75C9DE934A54757B55B203FD333D7C65A975395C4F052DC5729E9E50A1D887AF83BABCC0E06714B892E09D558A20A3F54BF41714D2F2FD5D8422C053A228841EDF641008DC416412F35774B36AD88B714299A7AE430D30DC113AE01FA4A9DA87563818085EB87E6761858733DA29287AF8CFDC3D0859ADF1E6BB149A5E5F2C44FDD013FD984A7F150B9C5B5A8B9> |-/minus <1C60D8A8C9B6FF86F56CC7C227EB77C70B9853F03387A73945FFB543663AEA9137B84F961E95466B7A25F79E73876D20CFE31728C6EA98DF6E04CECB784E> |-/.notdef <1C60D8A8C9B6ED05B71B281B14BACC0E0F6998C26A83E375A07AB156E33D3C0D0AE7841ED3C58AA89F8452D8B14DFBBDB595110D4073E8E9BBB4C7CAABD777414D8BA1B96490CC4DB8D55EDD27856AB7DC35AC4EEB66EA52ACF8B5> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/KFYYYG+CMUSerif-Roman /CMUSerif-Roman findfont ct_VMDictPut/KFYYYG+CMUSerif-Roman*1 [54{/.notdef}rp /six 72{/.notdef}rp /minus 128{/.notdef}rp]KFYYYG+CMUSerif-Roman nfKFYYYG+CMUSerif-Roman*1 [6.41276 0 0 -6.41408 0 0 ]msf15.0293 187.113 mo(\177)sh18.646 187.113 mo(6)sh41.8096 180.374 mo
41.8096 178.206 li
@
41.8096 13.4883 mo
41.8096 15.627 li
@
%ADOBeginSubsetFont: CMUSerif-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.systemdict beginKFYYYG+CMUSerif-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/five <1C60D8A8C9B7A73D3B2B97F19D54A2E00E7DDA8E720642298FF59F6D0510372F339D4407D70E4CE30327FAC09E858DA5EA5BFBC5716648BC5436840BBE29BD7F94EBBA03040A0DC970649964D7635443B27223526CEE9A0535A57DD8913D4ABDEF6432D9D023CC5B88E7126716C194309C44C19F42624093F7AFCB3E069EFC1118A68155F24350D3E690B1E5FEF7CD118E0E4A3E0EDD4BE6B2F9AE44D98CB60CAAEB36B4C3D72E7EF0A8F7E8D43B02ADBFAEAB20F0E20C32D08C3CA57AEC75CA3A772590769D2F5DF9FBCC3E5D914E868CA2B8A817CA1C78CAE5F76D045B350DDF515A564C6DE4D15FBA44EF2ED49DC147CBE184CA90ADD077C9A3353C6F8A9A> |-systemdict /gcheck known {setglobal} if end {end} ifendKFYYYG+CMUSerif-Roman /Encoding getdup 53 /five putpop%ADOEndSubsetFont
/KFYYYG+CMUSerif-Roman*1 [53{/.notdef}rp /five /six 72{/.notdef}rp /minus 128{/.notdef}rp]KFYYYG+CMUSerif-Roman nfKFYYYG+CMUSerif-Roman*1 [6.41276 0 0 -6.41408 0 0 ]msf36.6431 187.113 mo(\177)sh40.2598 187.113 mo(5)sh63.4526 180.374 mo
63.4526 178.206 li
@
63.4526 13.4883 mo
63.4526 15.627 li
@
%ADOBeginSubsetFont: CMUSerif-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.systemdict beginKFYYYG+CMUSerif-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/four <1C60D8A8C9B7A73DC579B9C1587087D4682EFE1C3ED24866E476A1755C0901018A73B9CF7D7B10C5E7058A4B6EBDDC91E094454F98D6E8CDDFB88E4F15B1A898A151489F1F1210617D0807C084D35507D0A1B33B3687BB920BA9BF08D1B6B0FBE2F7A00B81CE1C030A> |-systemdict /gcheck known {setglobal} if end {end} ifendKFYYYG+CMUSerif-Roman /Encoding getdup 52 /four putpop%ADOEndSubsetFont
/KFYYYG+CMUSerif-Roman*1 [52{/.notdef}rp /four /five /six 72{/.notdef}rp /minus 128{/.notdef}rp]KFYYYG+CMUSerif-Roman nfKFYYYG+CMUSerif-Roman*1 [6.41276 0 0 -6.41408 0 0 ]msf58.2861 187.113 mo(\177)sh61.9028 187.113 mo(4)sh85.0659 180.374 mo
85.0659 178.206 li
@
85.0659 13.4883 mo
85.0659 15.627 li
@
%ADOBeginSubsetFont: CMUSerif-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.systemdict beginKFYYYG+CMUSerif-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/three <1C60D8A8C9B7A73D3B2B97DB2FC2C7B13A612567A054895D71138EDAB49B7495E75D20473F8EF340CEF35F934E1098A167E15D8C24735F28E36D27FEBD8A104DE3BE78CBC53FC20A556C570B63826F0E91C2BB4F9ED75D90DA91E20B7982BD860D1B1D354312A6CF5D83BE838BDAB572145541BBF2F1DC05F42D933EE7A3059D3EBB8EAFCB51DE44FDAE1E62C725AE42D201681F410142F2911AF9E61D02DC883CA4F9D9EF89744DA62914B46246E5437FBA1F0F86E52D2F8B44C8E3B5B30464C7865906681C9EA649ABC54963F194017A0EF0898EDB5A516A2D6554DD2A22815E5837918C549F> |-systemdict /gcheck known {setglobal} if end {end} ifendKFYYYG+CMUSerif-Roman /Encoding getdup 51 /three putpop%ADOEndSubsetFont
/KFYYYG+CMUSerif-Roman*1 [51{/.notdef}rp /three /four /five /six 72{/.notdef}rp /minus 128{/.notdef}rp]KFYYYG+CMUSerif-Roman nfKFYYYG+CMUSerif-Roman*1 [6.41276 0 0 -6.41408 0 0 ]msf79.8994 187.113 mo(\177)sh83.5166 187.113 mo(3)sh106.709 180.374 mo
106.709 178.206 li
@
106.709 13.4883 mo
106.709 15.627 li
@
%ADOBeginSubsetFont: CMUSerif-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.systemdict beginKFYYYG+CMUSerif-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/two <1C60D8A8C9B7A73DC50B0411757B441481CCF7EF812EE4807E476B52FD28648031338ABE585054ED5D291329A83457A15869DF50FD77FD36DFA67736343B1D61C0174BDE05C1FAAED530D27906801F1D8F20283013A09F4825C7AA38094E26843B668311FEBCF6ACB6E3906AA281598B98C24136DFDA219BC70ED0B43C6A9DE2F304AB8541648932C12FFF1D98F3DDB53EC0D66CFD85BD59D9E4> |-systemdict /gcheck known {setglobal} if end {end} ifendKFYYYG+CMUSerif-Roman /Encoding getdup 50 /two putpop%ADOEndSubsetFont
/KFYYYG+CMUSerif-Roman*1 [50{/.notdef}rp /two /three /four /five /six 72{/.notdef}rp /minus 128{/.notdef}rp]KFYYYG+CMUSerif-Roman nfKFYYYG+CMUSerif-Roman*1 [6.41276 0 0 -6.41408 0 0 ]msf101.543 187.113 mo(\177)sh105.159 187.113 mo(2)sh128.353 180.374 mo
128.353 178.206 li
@
128.353 13.4883 mo
128.353 15.627 li
@
%ADOBeginSubsetFont: CMUSerif-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.systemdict beginKFYYYG+CMUSerif-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/one <1C60D8A8C9B7A73DC579B9CE13A4EA8C148F4BC66BEA337C4DE2EEF1C4CAFA9F120106C1AB5EEC685376481EF4250D4D18FDB14A6D6397D1B8CF963A8973E85BEB3FA0A37FB3BC94FA6271F237CE05F5A49A4ECEE1EA> |-systemdict /gcheck known {setglobal} if end {end} ifendKFYYYG+CMUSerif-Roman /Encoding getdup 49 /one putpop%ADOEndSubsetFont
/KFYYYG+CMUSerif-Roman*1 [49{/.notdef}rp /one /two /three /four /five /six 72{/.notdef}rp /minus 128{/.notdef}rp]KFYYYG+CMUSerif-Roman nfKFYYYG+CMUSerif-Roman*1 [6.41276 0 0 -6.41408 0 0 ]msf123.186 187.113 mo(\177)sh126.803 187.113 mo(1)sh149.965 180.374 mo
149.965 178.206 li
@
149.965 13.4883 mo
149.965 15.627 li
@
%ADOBeginSubsetFont: CMUSerif-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.systemdict beginKFYYYG+CMUSerif-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/zero <1C60D8A8C9B7A73D3B2D32309B1F5D5A32FC3614834FC1C6AAC2FD0CFBA096F90FB2C3A3CAFBF3AA4446EB14C0E98B3F186ED964541453FB83C15FC2E93578528FFAF6AA7BC0D1581FE6CB2DFB80152ECEB8117E97861C19E2C935F2AAF631D61BC6A6F74A992D1CEC324DF000971D5A97285BB39F5323619D2F8DB1D4E590B9CB71F18D7C0C40576DCB5A547C4EDF3E1F> |-systemdict /gcheck known {setglobal} if end {end} ifendKFYYYG+CMUSerif-Roman /Encoding getdup 48 /zero putpop%ADOEndSubsetFont
/KFYYYG+CMUSerif-Roman*1 [48{/.notdef}rp /zero /one /two /three /four /five /six 72{/.notdef}rp /minus 128{/.notdef}rp]KFYYYG+CMUSerif-Roman nfKFYYYG+CMUSerif-Roman*1 [6.41276 0 0 -6.41408 0 0 ]msf148.362 187.113 mo(0)sh171.608 180.374 mo
171.608 178.206 li
@
171.608 13.4883 mo
171.608 15.627 li
@
KFYYYG+CMUSerif-Roman*1 [6.41276 0 0 -6.41408 0 0 ]msf170.004 187.113 mo(1)sh193.222 180.374 mo
193.222 178.206 li
@
193.222 13.4883 mo
193.222 15.627 li
@
KFYYYG+CMUSerif-Roman*1 [6.41276 0 0 -6.41408 0 0 ]msf191.618 187.113 mo(2)sh214.865 180.374 mo
214.865 178.206 li
@
214.865 13.4883 mo
214.865 15.627 li
@
KFYYYG+CMUSerif-Roman*1 [6.41276 0 0 -6.41408 0 0 ]msf213.261 187.113 mo(3)sh236.508 180.374 mo
236.508 178.206 li
@
236.508 13.4883 mo
236.508 15.627 li
@
KFYYYG+CMUSerif-Roman*1 [6.41276 0 0 -6.41408 0 0 ]msf234.905 187.113 mo(4)sh20.1963 180.374 mo
22.3335 180.374 li
@
236.508 180.374 mo
234.341 180.374 li
@
KFYYYG+CMUSerif-Roman*1 [6.41276 0 0 -6.41408 0 0 ]msf12.3579 182.66 mo(\177)sh15.9746 182.66 mo(5)sh20.1963 96.9307 mo
22.3335 96.9307 li
@
236.508 96.9307 mo
234.341 96.9307 li
@
KFYYYG+CMUSerif-Roman*1 [6.41276 0 0 -6.41408 0 0 ]msf15.9497 99.2168 mo(0)sh20.1963 13.4883 mo
22.3335 13.4883 li
@
236.508 13.4883 mo
234.341 13.4883 li
@
KFYYYG+CMUSerif-Roman*1 [6.41276 0 0 -6.41408 0 0 ]msf15.9497 15.7744 mo(5)sh20.1963 180.374 mo
236.508 180.374 li
@
20.1963 13.4883 mo
236.508 13.4883 li
@
20.1963 180.374 mo
20.1963 13.4883 li
@
236.508 180.374 mo
236.508 13.4883 li
@
gsave
20.1963 13.4883 mo
236.538 13.4883 li
236.538 180.403 li
20.1963 180.403 li
20.1963 13.4883 li
cp
clp
gsave
-.76416 195.607 mo
239.358 195.607 li
239.358 -2.5166 li
-.76416 -2.5166 li
-.76416 195.607 li
cp
clp
[.527326 .632791 ] 0 dsh
20.1963 96.9307 mo
236.538 96.9307 li
@
149.965 180.403 mo
149.965 13.4883 li
@
128.441 96.9307 mo
128.441 96.9805 128.401 97.0205 128.353 97.0205 cv
128.303 97.0205 128.263 96.9805 128.263 96.9307 cv
128.263 96.8828 128.303 96.8418 128.353 96.8418 cv
128.401 96.8418 128.441 96.8828 128.441 96.9307 cv
1 0 0 rgb
f
grestore
grestore
gsave
126.185 94.7627 mo
130.549 94.7627 li
130.549 99.1289 li
126.185 99.1289 li
126.185 94.7627 li
cp
clp
gsave
-.76416 195.607 mo
239.358 195.607 li
239.358 -2.5166 li
-.76416 -2.5166 li
-.76416 195.607 li
cp
clp
127.284 96.9307 mo
129.421 96.9307 li
1 0 0 rgb
@
128.353 95.8623 mo
128.353 98 li
@
grestore
grestore
gsave
20.1963 13.4883 mo
236.538 13.4883 li
236.538 180.403 li
20.1963 180.403 li
20.1963 13.4883 li
cp
clp
gsave
-.76416 195.607 mo
239.358 195.607 li
239.358 -2.5166 li
-.76416 -2.5166 li
-.76416 195.607 li
cp
clp
.712603 lw
151.361 96.9307 mo
151.361 95.9814 li
151.331 95.8037 li
151.331 95.3271 li
151.301 95.001 li
151.301 94.6143 li
151.242 94.1396 li
151.212 93.5459 li
151.124 92.833 li
151.004 91.9434 li
150.827 90.7539 li
150.47 89.2109 li
149.787 86.9541 li
148.214 83.3906 li
145.423 78.9658 li
143.968 77.0957 li
139.485 72.3145 li
135.982 69.1963 li
132.687 66.583 li
116.031 55.625 li
91.0923 42.3818 li
50.7754 23.0801 li
31.3887 13.4883 li
0 0 1 rgb
@
236.538 58.3877 mo
234.549 57.793 li
224.009 54.4971 li
214.568 51.5273 li
205.839 48.8252 li
197.527 46.3604 li
189.392 44.0742 li
184.999 42.9463 li
181.287 42.0254 li
173.004 40.2139 li
164.424 38.7002 li
155.369 37.5117 li
145.69 36.8301 li
135.21 36.8301 li
123.869 37.749 li
123.75 37.7793 li
112.171 39.8867 li
101.484 43.0947 li
91.835 47.2529 li
83.2549 52.2705 li
75.8618 58.0303 li
69.7764 64.415 li
65.0557 71.2754 li
62.8584 75.5811 li
61.7007 78.4912 li
59.8301 85.8848 li
59.3848 93.3086 li
60.335 100.583 li
62.6807 107.622 li
66.332 114.213 li
71.2012 120.242 li
77.1392 125.616 li
84.0264 130.16 li
91.6865 133.812 li
99.9697 136.455 li
108.668 138.059 li
117.575 138.593 li
126.511 137.94 li
135.24 136.159 li
143.553 133.248 li
151.272 129.15 li
154.983 126.537 li
159.169 122.974 li
162.108 119.886 li
164.275 117.242 li
165.938 114.927 li
167.304 112.848 li
168.402 110.977 li
169.115 109.7 li
169.381 109.225 li
170.213 107.622 li
170.984 106.077 li
171.698 104.593 li
172.38 103.167 li
173.034 101.742 li
173.717 100.316 li
174.399 98.8613 li
175.142 97.376 li
175.943 95.832 li
176.834 94.1699 li
177.902 92.3877 li
179.149 90.3994 li
180.693 88.1416 li
181.881 86.5674 li
183.84 84.1025 li
185.71 81.875 li
187.551 79.7383 li
189.273 77.6602 li
190.906 75.5811 li
192.45 73.3828 li
193.816 71.0977 li
193.845 71.0381 li
195.122 68.3945 li
195.122 68.3359 li
196.191 65.3955 li
196.221 65.3359 li
196.636 63.8223 li
197.111 61.6846 li
197.646 58.5059 li
198.031 54.3789 li
198.121 49.6865 li
197.854 44.1934 li
197.082 37.7793 li
195.746 30.6826 li
195.626 30.0879 li
192.984 20.7939 li
190.104 13.4883 li
@
20.1963 173.781 mo
20.7305 173.812 li
43.1157 172.891 li
64.9961 169.446 li
85.9268 163.507 li
90.1128 161.963 li
107.392 154.034 li
119.653 146.432 li
119.712 146.403 li
128.619 139.335 li
129.51 138.533 li
135.299 132.742 li
136.19 131.733 li
140.435 126.478 li
140.97 125.765 li
144.473 120.36 li
147.056 115.371 li
147.412 114.6 li
148.837 110.71 li
148.956 110.235 li
149.401 107.413 li
149.313 105.454 li
149.104 103.91 li
148.896 102.632 li
148.748 101.505 li
148.718 100.583 li
148.748 99.8125 li
148.867 99.1582 li
148.986 98.6543 li
149.134 98.2676 li
149.282 97.9414 li
149.401 97.7041 li
149.52 97.5254 li
149.609 97.4063 li
149.668 97.2881 li
149.728 97.2275 li
149.758 97.1387 li
149.787 97.1104 li
149.817 97.0498 li
149.847 97.0205 li
149.906 96.9619 li
149.906 96.9307 li
149.965 96.9307 li
@
151.361 96.9307 mo
151.361 97.8516 li
151.331 98.0313 li
151.331 98.5059 li
151.301 98.832 li
151.301 99.2178 li
151.242 99.6924 li
151.212 100.287 li
151.124 100.999 li
151.004 101.89 li
150.827 103.078 li
150.47 104.622 li
149.787 106.879 li
148.214 110.442 li
145.423 114.867 li
143.968 116.737 li
139.485 121.519 li
135.982 124.636 li
132.687 127.249 li
116.031 138.207 li
91.0923 151.45 li
50.7754 170.753 li
31.3291 180.403 li
@
236.538 135.445 mo
234.549 136.039 li
224.009 139.335 li
214.568 142.306 li
205.839 145.008 li
197.527 147.473 li
189.392 149.758 li
184.999 150.887 li
181.287 151.807 li
173.004 153.619 li
164.424 155.133 li
155.369 156.321 li
145.69 157.004 li
135.21 157.004 li
123.869 156.083 li
123.75 156.054 li
112.171 153.945 li
101.484 150.738 li
91.835 146.582 li
83.2549 141.563 li
75.8618 135.802 li
69.7764 129.417 li
65.0557 122.559 li
62.8584 118.253 li
61.7007 115.342 li
59.8301 107.948 li
59.3848 100.524 li
60.335 93.25 li
62.6807 86.2119 li
66.332 79.6191 li
71.2012 73.5908 li
77.1392 68.2158 li
84.0264 63.6729 li
91.6865 60.0205 li
99.9697 57.3779 li
108.668 55.7744 li
117.575 55.2393 li
126.511 55.8936 li
135.24 57.6748 li
143.553 60.584 li
151.272 64.6826 li
154.983 67.2959 li
159.169 70.8604 li
162.108 73.9473 li
164.275 76.5908 li
165.938 78.9072 li
167.304 80.9854 li
168.402 82.8564 li
169.115 84.1328 li
169.381 84.6084 li
170.213 86.2119 li
170.984 87.7559 li
171.698 89.2412 li
172.38 90.665 li
173.034 92.0908 li
173.717 93.5166 li
174.399 94.9717 li
175.142 96.4561 li
175.943 98 li
176.834 99.6641 li
177.902 101.445 li
179.149 103.435 li
180.693 105.691 li
181.881 107.265 li
183.84 109.729 li
185.71 111.957 li
187.551 114.096 li
189.273 116.174 li
190.906 118.253 li
192.45 120.449 li
193.816 122.736 li
193.845 122.796 li
195.122 125.438 li
195.122 125.498 li
196.191 128.438 li
196.221 128.497 li
196.636 130.012 li
197.111 132.15 li
197.646 135.327 li
198.031 139.454 li
198.121 144.146 li
197.854 149.64 li
197.082 156.054 li
195.746 163.151 li
195.626 163.744 li
192.984 173.039 li
190.104 180.403 li
@
20.1963 20.0508 mo
20.7305 20.0215 li
43.1157 20.9424 li
64.9961 24.3867 li
85.9268 30.3262 li
90.1128 31.8701 li
107.392 39.7979 li
119.653 47.4004 li
119.712 47.4297 li
128.619 54.4971 li
129.51 55.2988 li
135.299 61.0898 li
136.19 62.0996 li
140.435 67.3545 li
140.97 68.0674 li
144.473 73.4727 li
147.056 78.4609 li
147.412 79.2334 li
148.837 83.123 li
148.956 83.5977 li
149.401 86.4189 li
149.313 88.3789 li
149.104 89.9238 li
148.896 91.2002 li
148.748 92.3291 li
148.718 93.25 li
148.748 94.0215 li
148.867 94.6738 li
148.986 95.1797 li
149.134 95.5664 li
149.282 95.8926 li
149.401 96.1299 li
149.52 96.3076 li
149.609 96.4268 li
149.668 96.5449 li
149.728 96.6045 li
149.758 96.6943 li
149.787 96.7227 li
149.817 96.7832 li
149.847 96.8125 li
149.906 96.873 li
149.906 96.9014 li
149.936 96.9014 li
149.965 96.9307 li
@
58.1084 31.959 mo
52.5269 23.9121 li
64.3433 24.208 li
ef
.178151 lw
58.1084 31.959 mo
52.5269 23.9121 li
64.3433 24.208 li
58.1084 31.959 li
@
40.6812 170.219 mo
52.5269 169.921 li
46.9453 177.969 li
ef
40.6812 170.219 mo
52.5269 169.921 li
46.9453 177.969 li
40.6812 170.219 li
@
.712603 lw
148.808 96.9307 mo
148.808 96.1592 li
148.778 96.041 li
148.778 95.3867 li
148.748 95.0898 li
148.718 94.7344 li
148.689 94.2881 li
148.629 93.7246 li
148.54 93.0713 li
148.421 92.209 li
148.214 91.1113 li
147.828 89.5957 li
147.085 87.458 li
145.364 83.9854 li
141.445 78.6699 li
137.734 74.9268 li
130.668 69.2559 li
115.616 59.9316 li
114.962 59.5742 li
91.6567 47.9346 li
54.1299 30.8906 li
20.1963 14.8545 li
0 .65098 0 rgb
@
236.538 64.5635 mo
226.829 61.9219 li
217.359 59.1895 li
208.927 56.7246 li
201.238 54.4678 li
193.964 52.3887 li
186.958 50.458 li
183.039 49.4492 li
180.01 48.6768 li
173.004 47.0742 li
165.79 45.6777 li
158.219 44.4902 li
150.203 43.6299 li
141.534 43.2129 li
132.093 43.4512 li
122.622 44.4307 li
112.379 46.5098 li
102.998 49.5088 li
94.5068 53.3691 li
87.0254 57.9727 li
80.6128 63.2285 li
75.3872 69.0186 li
71.3496 75.1953 li
69.5684 79.0557 li
68.6182 81.6689 li
67.1338 88.2607 li
66.9561 94.8828 li
68.0249 101.356 li
70.3105 107.532 li
73.7251 113.353 li
78.2075 118.638 li
83.6411 123.3 li
89.9053 127.221 li
96.8223 130.338 li
104.274 132.565 li
112.053 133.842 li
120.009 134.139 li
127.937 133.426 li
135.625 131.674 li
142.959 128.913 li
149.698 125.142 li
151.45 123.895 li
155.577 120.449 li
158.338 117.569 li
160.297 115.134 li
161.782 113.055 li
162.939 111.244 li
163.89 109.611 li
164.661 108.156 li
165.344 106.819 li
165.878 105.661 li
165.938 105.543 li
166.502 104.354 li
167.007 103.227 li
167.482 102.098 li
167.957 101.029 li
168.402 99.9297 li
168.877 98.832 li
169.381 97.7334 li
169.887 96.5752 li
170.451 95.3574 li
171.074 94.0508 li
171.816 92.6553 li
172.677 91.0811 li
173.746 89.2998 li
175.082 87.251 li
175.587 86.5391 li
177.22 84.2803 li
178.823 82.2324 li
180.367 80.2725 li
181.821 78.3721 li
183.187 76.4424 li
184.464 74.4521 li
185.265 73.0264 li
185.621 72.3145 li
186.364 70.6221 li
187.225 68.0674 li
187.462 67.1475 li
187.789 65.7822 li
188.116 63.8516 li
188.353 62.1592 li
188.59 58.6846 li
188.561 54.7051 li
188.234 50.1035 li
187.462 44.7275 li
186.245 38.9072 li
186.097 38.3428 li
183.781 30.6221 li
179.98 21.1797 li
175.914 13.4883 li
@
20.1963 167.872 mo
35.9907 168.496 li
55.9116 167.04 li
75.3276 163.389 li
93.7354 157.538 li
95.9912 156.617 li
111.756 148.896 li
122.741 141.622 li
123.127 141.325 li
130.638 134.911 li
131.559 134.049 li
136.427 128.733 li
137.229 127.784 li
140.822 122.943 li
141.267 122.291 li
144.206 117.331 li
146.403 112.759 li
146.729 112.017 li
147.976 108.453 li
148.184 107.682 li
148.659 105.216 li
148.748 103.524 li
148.748 102.217 li
148.778 101.148 li
148.808 100.257 li
148.896 99.5439 li
149.016 98.9805 li
149.164 98.5342 li
149.282 98.1787 li
149.401 97.9111 li
149.52 97.7041 li
149.609 97.5547 li
149.668 97.4063 li
149.728 97.3174 li
149.758 97.2275 li
149.787 97.1689 li
149.817 97.1104 li
149.847 97.0791 li
149.847 97.0498 li
149.876 97.0205 li
149.876 96.9902 li
149.906 96.9619 li
149.936 96.9307 li
149.965 96.9307 li
@
148.808 96.9307 mo
148.808 97.6738 li
148.778 97.792 li
148.778 98.4453 li
148.748 98.7432 li
148.718 99.0986 li
148.689 99.5439 li
148.629 100.108 li
148.54 100.762 li
148.421 101.623 li
148.214 102.721 li
147.828 104.236 li
147.085 106.375 li
145.364 109.848 li
141.445 115.164 li
137.734 118.905 li
130.668 124.577 li
115.616 133.9 li
114.962 134.258 li
91.6567 145.897 li
54.1299 162.942 li
20.1963 178.979 li
@
236.538 129.269 mo
226.829 131.911 li
217.359 134.644 li
208.927 137.108 li
201.238 139.365 li
193.964 141.443 li
186.958 143.374 li
183.039 144.383 li
180.01 145.155 li
173.004 146.76 li
165.79 148.154 li
158.219 149.343 li
150.203 150.204 li
141.534 150.619 li
132.093 150.382 li
122.622 149.401 li
112.379 147.324 li
102.998 144.324 li
94.5068 140.464 li
87.0254 135.861 li
80.6128 130.604 li
75.3872 124.815 li
71.3496 118.638 li
69.5684 114.777 li
68.6182 112.165 li
67.1338 105.572 li
66.9561 98.9502 li
68.0249 92.4775 li
70.3105 86.3018 li
73.7251 80.4795 li
78.2075 75.1953 li
83.6411 70.5322 li
89.9053 66.6133 li
96.8223 63.4951 li
104.274 61.2676 li
112.053 59.9912 li
120.009 59.6943 li
127.937 60.4063 li
135.625 62.1592 li
142.959 64.9209 li
149.698 68.6914 li
151.45 69.9385 li
155.577 73.3828 li
158.338 76.2637 li
160.297 78.6982 li
161.782 80.7773 li
162.939 82.5889 li
163.89 84.2227 li
164.661 85.6768 li
165.344 87.0137 li
165.878 88.1719 li
165.938 88.29 li
166.502 89.4785 li
167.007 90.6064 li
167.482 91.7344 li
167.957 92.8037 li
168.402 93.9023 li
168.877 95.001 li
169.381 96.0996 li
169.887 97.2578 li
170.451 98.4756 li
171.074 99.7813 li
171.816 101.178 li
172.677 102.752 li
173.746 104.533 li
175.082 106.582 li
175.587 107.296 li
177.22 109.552 li
178.823 111.601 li
180.367 113.561 li
181.821 115.461 li
183.187 117.392 li
184.464 119.38 li
185.265 120.806 li
185.621 121.519 li
186.364 123.212 li
187.225 125.765 li
187.462 126.686 li
187.789 128.053 li
188.116 129.981 li
188.353 131.674 li
188.59 135.148 li
188.561 139.128 li
188.234 143.729 li
187.462 149.105 li
186.245 154.925 li
186.097 155.489 li
183.781 163.21 li
179.98 172.653 li
175.914 180.403 li
@
20.1963 25.9609 mo
35.9907 25.3379 li
55.9116 26.792 li
75.3276 30.4443 li
93.7354 36.2949 li
95.9912 37.2158 li
111.756 44.9365 li
122.741 52.2109 li
123.127 52.5078 li
130.638 58.9219 li
131.559 59.7832 li
136.427 65.0986 li
137.229 66.0479 li
140.822 70.8887 li
141.267 71.542 li
144.206 76.502 li
146.403 81.0742 li
146.729 81.8164 li
147.976 85.3809 li
148.184 86.1514 li
148.659 88.6172 li
148.748 90.3096 li
148.748 91.6162 li
148.778 92.6855 li
148.808 93.5762 li
148.896 94.2881 li
149.016 94.8525 li
149.164 95.2979 li
149.282 95.6543 li
149.401 95.9209 li
149.52 96.1299 li
149.609 96.2783 li
149.668 96.4268 li
149.728 96.5156 li
149.758 96.6045 li
149.787 96.6641 li
149.817 96.7227 li
149.847 96.7529 li
149.847 96.7832 li
149.876 96.8125 li
149.876 96.8418 li
149.906 96.873 li
149.936 96.9014 li
149.965 96.9307 li
@
44.9863 31.9287 mo
39.3452 23.9111 li
51.1616 24.1484 li
ef
.178151 lw
44.9863 31.9287 mo
39.3452 23.9111 li
51.1616 24.1494 li
44.9863 31.9287 li
@
27.4995 170.158 mo
39.3452 169.921 li
33.6748 177.938 li
ef
27.4995 170.158 mo
39.3452 169.921 li
33.6748 177.938 li
27.4995 170.158 li
@
.712603 lw
134.468 96.9307 mo
134.468 96.6641 li
134.438 96.6045 li
134.438 96.4854 li
134.409 96.3955 li
134.409 96.3076 li
134.379 96.1895 li
134.349 96.041 li
134.29 95.8926 li
134.201 95.6836 li
134.111 95.4766 li
133.934 95.209 li
133.726 94.8828 li
133.429 94.5566 li
133.013 94.1992 li
132.449 93.8135 li
131.707 93.4277 li
130.727 93.1016 li
129.48 92.8926 li
127.818 92.8926 li
125.562 93.3672 li
123.394 94.3184 li
123.275 94.3779 li
120.604 96.2188 li
118.466 98.1484 li
116.536 100.198 li
114.547 102.395 li
112.469 104.8 li
110.152 107.473 li
107.481 110.501 li
104.245 114.035 li
100.147 118.193 li
94.7739 123.212 li
87.2627 129.477 li
76.04 137.465 li
72.8936 139.425 li
54.9321 148.957 li
35.5151 156.439 li
20.1963 160.419 li
1 0 0 rgb
@
123.958 13.4883 mo
126.481 20.4971 li
127.58 24.7734 li
129.51 36.9775 li
129.867 45.7969 li
129.569 52.4785 li
128.946 57.793 li
128.174 62.0996 li
127.342 65.7217 li
126.481 68.8389 li
125.621 71.6016 li
124.73 74.0664 li
123.839 76.3535 li
122.889 78.4912 li
121.939 80.5693 li
120.9 82.6182 li
119.772 84.7568 li
118.525 87.1025 li
117.694 88.7949 li
116.803 90.9629 li
116.269 92.8926 li
116.031 94.6738 li
116.061 96.3076 li
116.358 97.8516 li
116.892 99.2773 li
117.634 100.554 li
118.584 101.712 li
119.683 102.721 li
120.93 103.553 li
122.326 104.236 li
123.78 104.741 li
124.67 104.979 li
125.294 105.068 li
126.838 105.216 li
128.353 105.186 li
129.836 104.979 li
131.231 104.622 li
131.262 104.622 li
132.479 104.117 li
133.458 103.583 li
134.23 103.049 li
134.854 102.515 li
135.358 101.979 li
135.744 101.475 li
136.071 100.971 li
136.309 100.494 li
136.457 100.167 li
136.487 100.05 li
136.635 99.5742 li
136.725 99.1582 li
136.783 98.7119 li
136.813 98.2969 li
136.783 97.8818 li
136.725 97.4648 li
136.665 97.0498 li
136.546 96.6348 li
136.368 96.2188 li
136.16 95.8037 li
135.923 95.3867 li
135.596 94.9717 li
135.21 94.5254 li
134.765 94.0801 li
134.201 93.6348 li
133.488 93.1904 li
132.627 92.7744 li
131.528 92.3584 li
131.292 92.2979 li
130.074 92.0615 li
129.391 91.9717 li
128.055 91.8828 li
127.521 91.8828 li
126.244 91.9121 li
125.264 91.9717 li
124.493 92.002 li
123.78 92.0615 li
123.187 92.0908 li
122.622 92.1211 li
122.087 92.1504 li
121.583 92.209 li
121.079 92.2695 li
120.604 92.3584 li
120.069 92.4473 li
119.535 92.5957 li
118.97 92.8037 li
118.674 92.8926 li
118.317 93.041 li
118.288 93.0713 li
117.99 93.1904 li
117.486 93.4277 li
116.685 93.8438 li
115.586 94.4971 li
115.438 94.6143 li
114.25 95.4463 li
114.042 95.5947 li
112.558 96.873 li
112.32 97.0791 li
110.509 99.0693 li
109.054 101.208 li
107.985 103.494 li
107.333 105.869 li
107.095 108.305 li
107.303 110.71 li
107.926 113.086 li
108.965 115.342 li
110.42 117.51 li
112.231 119.469 li
114.369 121.222 li
116.773 122.707 li
119.475 123.954 li
122.326 124.874 li
125.324 125.498 li
128.411 125.765 li
130.786 125.765 li
131.528 125.735 li
134.587 125.349 li
137.555 124.636 li
140.346 123.598 li
142.929 122.291 li
145.245 120.717 li
147.264 118.936 li
148.926 116.915 li
150.203 114.748 li
151.094 112.491 li
151.539 110.146 li
151.539 107.771 li
151.212 105.721 li
150.767 104.267 li
150.351 103.256 li
149.965 102.515 li
149.639 101.92 li
149.342 101.445 li
149.104 101.06 li
148.867 100.732 li
148.659 100.465 li
148.451 100.198 li
148.273 99.9902 li
148.125 99.7813 li
147.947 99.6035 li
147.798 99.4268 li
147.649 99.2471 li
147.501 99.0986 li
147.353 98.9502 li
147.204 98.8018 li
147.056 98.6543 li
146.907 98.5059 li
146.759 98.3857 li
146.611 98.2373 li
146.462 98.0889 li
146.284 97.9414 li
146.106 97.7627 li
145.898 97.6143 li
145.69 97.4365 li
145.423 97.2275 li
145.156 97.0205 li
144.859 96.8125 li
144.503 96.5449 li
144.058 96.2783 li
143.523 95.9209 li
142.84 95.5352 li
141.949 95.0898 li
140.732 94.5254 li
138.921 93.873 li
137.585 93.5166 li
136.101 93.2188 li
135.982 93.1904 li
135.062 93.0713 li
133.963 92.9814 li
133.013 92.9521 li
132.241 92.9814 li
131.321 93.041 li
130.786 93.1016 li
129.896 93.25 li
129.51 93.3389 li
128.589 93.6045 li
128.322 93.6943 li
127.373 94.1104 li
127.194 94.1992 li
126.185 94.8828 li
126.066 95.001 li
125.591 95.5947 li
125.175 96.3955 li
125.057 97.2275 li
125.175 98 li
125.472 98.8018 li
126.007 99.5742 li
126.808 100.316 li
127.847 100.999 li
129.183 101.563 li
130.816 101.95 li
132.657 102.098 li
134.646 101.979 li
136.665 101.623 li
138.654 101.06 li
140.554 100.376 li
142.247 99.6641 li
143.79 98.9805 li
145.126 98.416 li
146.225 97.9414 li
147.145 97.6143 li
147.857 97.3477 li
148.421 97.1992 li
148.867 97.0791 li
149.164 97.0205 li
149.401 96.9902 li
149.58 96.9619 li
149.698 96.9307 li
149.965 96.9307 li
@
134.468 96.9307 mo
134.468 96.9014 li
134.468 97.1689 li
134.438 97.2275 li
134.438 97.3477 li
134.409 97.4365 li
134.409 97.5254 li
134.379 97.6436 li
134.349 97.792 li
134.29 97.9414 li
134.201 98.1484 li
134.111 98.3574 li
133.934 98.623 li
133.726 98.9502 li
133.429 99.2773 li
133.013 99.6338 li
132.449 100.02 li
131.707 100.405 li
130.727 100.732 li
129.48 100.939 li
127.818 100.939 li
125.562 100.465 li
123.394 99.5146 li
123.275 99.4551 li
120.604 97.6143 li
118.466 95.6836 li
116.536 93.6348 li
114.547 91.4375 li
112.469 89.0322 li
110.152 86.3604 li
107.481 83.3311 li
104.245 79.7979 li
100.147 75.6396 li
94.7739 70.6221 li
87.2627 64.3564 li
76.04 56.3682 li
72.8936 54.4082 li
54.9321 44.876 li
35.5151 37.3936 li
20.1963 33.4141 li
@
123.958 180.403 mo
126.481 173.337 li
127.58 169.061 li
129.51 156.854 li
129.867 148.036 li
129.569 141.354 li
128.946 136.039 li
128.174 131.733 li
127.342 128.11 li
126.481 124.993 li
125.621 122.231 li
124.73 119.768 li
123.839 117.479 li
122.889 115.342 li
121.939 113.264 li
120.9 111.215 li
119.772 109.077 li
118.525 106.729 li
117.694 105.037 li
116.803 102.871 li
116.269 100.939 li
116.031 99.1582 li
116.061 97.5254 li
116.358 95.9814 li
116.892 94.5566 li
117.634 93.2783 li
118.584 92.1211 li
119.683 91.1113 li
120.93 90.2793 li
122.326 89.5957 li
123.78 89.0918 li
124.67 88.8545 li
125.294 88.7646 li
126.838 88.6172 li
128.353 88.6465 li
129.836 88.8545 li
131.231 89.2109 li
131.262 89.2109 li
132.479 89.7158 li
133.458 90.25 li
134.23 90.7852 li
134.854 91.3184 li
135.358 91.8535 li
135.744 92.3584 li
136.071 92.8643 li
136.309 93.3389 li
136.457 93.665 li
136.487 93.7832 li
136.635 94.2588 li
136.725 94.6738 li
136.783 95.1201 li
136.813 95.5352 li
136.783 95.9512 li
136.725 96.3672 li
136.665 96.7832 li
136.546 97.1992 li
136.368 97.6143 li
136.16 98.0313 li
135.923 98.4453 li
135.596 98.8613 li
135.21 99.3066 li
134.765 99.7529 li
134.201 100.198 li
133.488 100.644 li
132.627 101.06 li
131.528 101.475 li
131.292 101.534 li
130.074 101.771 li
129.391 101.86 li
128.055 101.95 li
127.521 101.95 li
126.244 101.92 li
125.264 101.86 li
124.493 101.831 li
123.78 101.771 li
123.187 101.742 li
122.622 101.712 li
122.087 101.683 li
121.583 101.623 li
121.079 101.563 li
120.604 101.475 li
120.069 101.386 li
119.535 101.236 li
118.97 101.029 li
118.674 100.939 li
118.317 100.792 li
118.288 100.762 li
117.99 100.644 li
117.486 100.405 li
116.685 99.9902 li
115.586 99.3369 li
115.438 99.2178 li
114.25 98.3857 li
114.042 98.2373 li
112.558 96.9619 li
112.32 96.7529 li
110.509 94.7627 li
109.054 92.625 li
107.985 90.3389 li
107.333 87.9629 li
107.095 85.5283 li
107.303 83.123 li
107.926 80.748 li
108.965 78.4912 li
110.42 76.3223 li
112.231 74.3633 li
114.369 72.6104 li
116.773 71.126 li
119.475 69.8799 li
122.326 68.959 li
125.324 68.3359 li
128.411 68.0674 li
130.786 68.0674 li
131.528 68.0977 li
134.587 68.4844 li
137.555 69.1963 li
140.346 70.2354 li
142.929 71.542 li
145.245 73.1162 li
147.264 74.8984 li
148.926 76.917 li
150.203 79.084 li
151.094 81.3408 li
151.539 83.6875 li
151.539 86.0625 li
151.212 88.1113 li
150.767 89.5674 li
150.351 90.5762 li
149.965 91.3184 li
149.639 91.9121 li
149.342 92.3877 li
149.104 92.7744 li
148.867 93.1016 li
148.659 93.3672 li
148.451 93.6348 li
148.273 93.8438 li
148.125 94.0508 li
147.947 94.2285 li
147.798 94.4072 li
147.649 94.5859 li
147.501 94.7344 li
147.353 94.8828 li
147.204 95.0313 li
147.056 95.1797 li
146.907 95.3271 li
146.759 95.4463 li
146.611 95.5947 li
146.462 95.7432 li
146.284 95.8926 li
146.106 96.0693 li
145.898 96.2188 li
145.69 96.3955 li
145.423 96.6045 li
145.156 96.8125 li
144.859 97.0205 li
144.503 97.2881 li
144.058 97.5547 li
143.523 97.9111 li
142.84 98.2969 li
141.949 98.7432 li
140.732 99.3066 li
138.921 99.96 li
137.585 100.316 li
136.101 100.613 li
135.982 100.644 li
135.062 100.762 li
133.963 100.851 li
133.013 100.881 li
132.241 100.851 li
131.321 100.792 li
130.786 100.732 li
129.896 100.583 li
129.51 100.494 li
128.589 100.228 li
128.322 100.139 li
127.373 99.7227 li
127.194 99.6338 li
126.185 98.9502 li
126.066 98.832 li
125.591 98.2373 li
125.175 97.4365 li
125.057 96.6045 li
125.175 95.832 li
125.472 95.0313 li
126.007 94.2588 li
126.808 93.5166 li
127.847 92.833 li
129.183 92.2695 li
130.816 91.8828 li
132.657 91.7344 li
134.646 91.8535 li
136.665 92.209 li
138.654 92.7744 li
140.554 93.4561 li
142.247 94.1699 li
143.79 94.8525 li
145.126 95.417 li
146.225 95.8926 li
147.145 96.2188 li
147.857 96.4854 li
148.421 96.6348 li
148.867 96.7529 li
149.164 96.8125 li
149.401 96.8418 li
149.58 96.873 li
149.698 96.9014 li
149.936 96.9014 li
149.965 96.9307 li
@
45.2827 158.696 mo
33.7041 156.915 li
41.542 150.055 li
ef
.178151 lw
45.2827 158.696 mo
33.7041 156.915 li
41.542 150.055 li
45.2827 158.696 li
@
25.8662 30.0879 mo
33.7041 36.918 li
22.0957 38.7285 li
ef
25.8662 30.0879 mo
33.7041 36.918 li
22.0957 38.7285 li
25.8662 30.0879 li
@
grestore
grestore
0 0 0 rgb
%ADOBeginSubsetFont: CMUSerif-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.systemdict beginKFYYYG+CMUSerif-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/space <1C60D8A8C9B81F2CC3> |-systemdict /gcheck known {setglobal} if end {end} ifendKFYYYG+CMUSerif-Roman /Encoding getdup 32 /space putpop%ADOEndSubsetFont
/KFYYYG+CMUSerif-Roman*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /three /four /five /six 72{/.notdef}rp /minus 128{/.notdef}rp]KFYYYG+CMUSerif-Roman nfKFYYYG+CMUSerif-Roman*1 [3.56265 0 0 -3.56338 0 0 ]msf19.6914 181.649 mo( )sh236.033 14.7344 mo( )shgsave
125.443 94.0215 mo
131.292 94.0215 li
131.292 99.8711 li
125.443 99.8711 li
125.443 94.0215 li
cp
clp
gsave
-.76416 195.607 mo
239.358 195.607 li
239.358 -2.5166 li
-.76416 -2.5166 li
-.76416 195.607 li
cp
clp
.712603 lw
127.284 96.9307 mo
129.421 96.9307 li
@
128.353 95.8623 mo
128.353 98 li
@
grestore
grestore
235.021 38.7334 mo
166.089 38.7334 li
166.089 15.9932 li
235.021 15.9932 li
235.021 38.7334 li
cp
1 1 1 rgb
f
.34238 lw
0 lj
4 ml
235.021 38.7334 mo
166.089 38.7334 li
166.089 15.9932 li
235.021 15.9932 li
235.021 38.7334 li
cp
0 0 0 rgb
@
%ADOBeginSubsetFont: CMUSerif-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.systemdict beginKFYYYG+CMUSerif-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/A <1C60D8A8C9B6E3FA234780E51B74F225B937BAAD654467D9B9969909765F61E5A965063AC338FDDD3C9F3A101885E1ABD8BFB9076C6D7E8486EE308B04DC793AB12D586DBEB37D4F410FDE0170F79140A3411FCF925319CB2DD96184E219E2122E1004B2277546F7EFAECF4921DC1B177EF865A6A6FAF8A634BFE62B0512A95C98DC631F5E1B551CCD5C847433759FB5D190E648> |-/D <1C60D8A8C9B6EEDBC0C41A524F9E758CC382DD66BE427C2AC208493331271EA7A18BE9DB3DA4F8406E0FB2A7E986AD7C712EF4EF5C6CFCC8EA28C6B15DA35AB3D7F19A526FCD98BE2949FD817EF28213422553B78C661A9D14ACEE1A45B5A5374338767EFB404645CBCA2FEA6CAB87D0B6B4FACE4A5F48E393> |-/F <1C60D8A8C9B6415B3711EB1374ABAAA5807BD16A8CFC6B263ED2B34454BA6A5D982A1B42AB391CDFDC799B800C564FA47D3F9B0A1E81DCC7E2BFDB2FCE690F2F81F94996BBCB36C09F477C8CC1DFC15F702381F9E8CDB881BF299C3A37F6410BDCFC5907EBE3C95E729408D7CBB5CD625A72FAD4B25FCC54EEAED1B04115> |-/H <1C60D8A8C9B6E3FA234780E58B87D2EA5F590A170732E8342AECC9617CCD55D9854C3A7188B947CB0583027017514C5D5C03D56FCADAF979F246B48976386B046F6B037E97582CAEFF7CB047EDE8A78C3919A6EDD028AE5A0D6BB4A400ED3E780D164CE5CAEBE1C511F1DA21B26D11AC1451A28CE18683B9F06548E0F4E2BECF55883FCBC4E188DFA4F0DC33B8DC330107D6E4116C44A1EF5CC57703E2B8D80E72BF867E3BA946C88083DC8AE9A9FF9CF748FBE89C> |-/I <1C60D8A8C9B803802DEC08D98BCB1124DC97CC71898B482428657C355DDC4B547DFBC3B8344AB5C11D40BE76A3E4CDDB13D5417CEBD2BC49745CDCBE69B8A7B52A4ABD6107354E38F39161360B2D9E9BC066E240159E8EC0004E1C> |-/N <1C60D8A8C9B6E3FA234780EB1A04772A480C0BA74E47A04C1020BB7FF09C390F565598EBF88DDB0974FA22D9E5DB5CCE1509C410A7EF27D200A69A4B6512D49D977E8386ECBA10B2F54651EEB43A6B07538309D11181CE8C13F95A7EE95D660314496EB30C36F878243A2394F6FC3C20AEA90C93BF549B2B6ABE0FBB7EC755214B2715BB50C4FCEA9419657C35698A77A84D3093088B> |-/P <1C60D8A8C9B65DE708408E897D8681FFF528127AC4B715331E00A8CA61FDBCD187E3948E8A98A808B375140E37D61DE8D6FF4590EC3471F62A8920EEA63FD1E7F92FCE188C2D9CEA24D13812B71E51C9B074D458B0AFB08E48DF8E6D84A02F1EF5F978C7A10BFAA0C300D407FAA749A8AC89466D387D6B1BF688A266> |-/R <1C60D8A8C9B615D12DC96511BCDF86E8A7C75693A48984A0E7356B506A1E1BC103ACFBF8A0D66C9AB93F1A714625E396A95DFB4167A1015ACB5D5C76E8C8BC8054615EA0E68592489728A32C2EB6AFB95B31828292627ADA33BFFB0736E53BBED853F04991A502EBCC408DD8BAE6B1A93057B3AFE0608121FE5B06852D588EA4C76176FEF94C5C12B63970C1F8D12D4D6BBCD970B3203ED9E9B96B74B7F5CA929DE2755A679A858968F29EE26648393D292BE45F2E5D831C561343DEFF1636931A06BF1284581D1FB9A058FDA9C2FF4E> |-/a <1C60D8A8C9B7A73DCEB5869E93AB192358AC59578AC6D0F9DAB85A7C2DE244D4D0619179DAEC21085E05A3E5A7210E9A6ED2C086828DC1C9CEDCD9DE6C6A39BEB5968A1BF95509FE9701E26332106BBB27E11A5260837E4591163F5C1561306BC00ACFBFA9F0ABAFF02916BC895FE33D6F4C6F766940AE69990E8D0F4543F13F43069E96E886951BE7426B7C7B4F6B348DF06465853213A3248BCF83183DED864D308777C6B07A477047141AAF7F27210933A683B33422C5B0EF3404748DC528FB0EFC7535890D3BC0DCE0B955CFFC2B3A63A3823B9DCCD3AB32ED53B79AE417F1FC> |-/b <1C60D8A8C9B790A816BA887E1C031606A64A653284C9C1A56800A8DD352ECB9B7F60086BB5C1EBF34ECD677E7060C5E71A43161FFA11A821F938D60254A92D76BEF86C5A0BC79245BC87071942A931630D7B4F690BB0E219F17CF072E8D6D2A25C13DBFEA39BB0BC2096730D93D2D511CB0B7DA9EA3B9F6A017A8FDA0FC827459FBA42E19EA1F91ADE15955BA9ABD7BA8B10AB8B203E5EAAB32B9521E283E7A7ED8B3A4AF2B249F4DB019F2E024492C89A214863BF88249A2FF5ED9F91B4A9BD41BC0C32EF1288879573191E30> |-/c <1C60D8A8C9B77FE2B98B448AAC15CD6088822B1EF090FF62DBC2AEFE7FED9F80C000ED6EB3511E99F4F438B5E3C3937C6D821BEE2BE976BE374E7BD57CABA9F1CB9D2CC4C0FB1E3E72CB005342F2AC3E61C18153EA3E0FAC7235C15652258C87DFC2DFD2324DFE4A1736F204EA83202B302DC82D8A3F8A2668BE1BE8E036D03F70DDC3E03B37> |-/d <1C60D8A8C9B790A83638025F58AA6585B9D21134BBF0D8C7DB1BEAB1B57C340ECD9370518EC665287D08BF61809894217F95CF7EC71B5849DA855D10B7D21E87B97EDC8CA6463B39822A3ED88F86AD7AD5FD881FBC9C267EF28239ECC8B93D73BAFED0D12AABFEEF6669F858132AE178B7A9097F9E80EFC328319BE9B02BC65F9C26E168DD762774ECADB180DBDA0E1F06DFE60E386A86443A8AC7F43DDD65F3D06B3DE100A8926641FA355611105CBF681FB173F7BF8DE407CF31005E> |-/e <1C60D8A8C9B77FE2B98B448A6D851DB2CAC9451BC5A777902E72F60019B14D3F735800187A8780D7D125C55873F3F16D34BBB69BCB7B4985F6877A66DAFCE7053EC521B229F0C87F1C2E26B31A642D86A096AEF6D89BDCE81ABE21CF98A44B9FB5706F9CC870F2A885C3A0F3070BD72C45F4CF5BA2D43D6F0310A5BDF3C1F2BE50343FE892A506C285A4> |-/f <1C60D8A8C9B83BB81FA130945C39F84FB8E8012CD8B808EC7D57A69016EFA2750F6D88AE4F0663D9FFF1C2382F4431D70DB829B07E72091FF8BF742D865A29E5E44B142892DAD7353474D4E9221B38DC3BE2430070A023379EF6412FE80313E1C652E432B28F49D3A2EA714E90A97322669C54EB83C4B64D255CA3F585BA> |-/g <1C60D8A8C9B7A73DB58EA288075BBADC10FA29744D0EBEE6A159C1F53674E4B04A38D3C982709D3BA331DC2C2BB92BEF0E2BCAB685706F022644E84F7518A9028081A5FDC9DCF621F8E6E025543F987E4E0E4D66599DE4420B5672D2C5C78A3B4001EB45FFD7C204635BD759EB1F788AC150CC0A20A77372879206C765EE041B449B1273DC71A1EB01896889DC3A00781126A1F9FA6593ED75676FE5ABAAEB0843ACDB81D25EBFCEEA33D7F49A4623EC2E6AADDDACEC5D42F68A4AF7C5AAAED48DC6AFFB560063CD421DD51549FE23C65D8A511753BE4958C96EC94A8D25CD5A331A77BF39B4C1A63997B4BD060542B418CEF431484CBDA8F83C35D08202A77342DC211DEE8002DF467DF8616C9794BC602359946BA0AF41BA7F914A1C056DCC04123D9F81C616E94814DBB855E4D09B44B059706E9FFE6F1C2F37182BD67E8C0F1E68DF5664BB2CA215A3B213330F7CE73888E1D3CD930BE8AD3261994A5BA9C4CAED5336E54BB1CA86C39A9D9F864BD3C773EB838AFBE671D1B1BFE9355A> |-/i <1C60D8A8C9B8574464F1B4355F119691B996E69E9059AF6BEFC7ACD9408807F348697A41C25CF2F5BDFD024BC2AF3C86BA0B3C05AE1D8D7D8BF00AD69351CAD7D5BB0A5320C8FD9810E17B9D8E02D7039A36ECDD62AE5F78732D9AF8F9897EEA464278AEED0EB5AE3D85E67EA83F0FB1857F9A8C048F> |-/k <1C60D8A8C9B78C669F28CFA812DED613F72D4AD54240BEFAF9812A50A83C3940A594AE8B0227C37F86478C68AC1FEB1723557A4DB76A0CC4C43F46557272C55161B4EC23B938C2CB245B30F318677E17409C976F4AD72B5AE12779A89C90703BA4B6EB29C1B1492DA5C511B991AD4ABD618986C776C2D039DE103964FF1C11CBA7B0D5839ABA47FC0E5EBD714122498A93887013407F571E95BD4A099A130197CBBF5269E186DC8F62B3604C5C2DD5EC588E0BB8C60C0A07A289F35F9BAA> |-/l <1C60D8A8C9B8574464F1B434832601212DC6EBBDB0A085EE371973855AE4A32CEEEC6CEBB5E425012B167ABF3A4DD1A6554514AF61125127FAC3918305F8E31383F779E47F2892BD4A409F0FBF1FFD> |-/m <1C60D8A8C9B6B41CBB73614D2DDC1714A2872D80DD283A086573D32193A40AD6D931A58470954259FAC3BEA3EFD9D3D468049F31B972A1EA3C7FC4090F326077B3B45B339E8CD209969F9BA5DC7128EC90D43584D6F2C722F5FA22FB81122E851177AA0235262BD9E23A3401D29AED82AD32B86D56E933ED8F4C8B7CC5E22E33AAFF5DF464B2D518E5B6FF0F0886E35FB5CD90021585A861BA2B04B1C519E4E47FD6D19496BF4E4D1D732B745C4350FDDCBC06F08F28F8CB103A8A9094FA11E71C32DAF4F0246038CC47BBFD813EE10976F80EE99C2F73D28495E350> |-/n <1C60D8A8C9B790A83D946A52D13353207152D3DCC239C677F325D8BCB512A1552AD393012D329C2DCB638248DB8557FEAADD41C5A1E999FF15D409D4C65F5AFDEE221E9FA30AF1F9E3BB93495F559B44D11A7D0549A9E39556C6E836D4CA3B8D2D1509DE72160FD61B9450E59713C7D79BCA124595660911F9E39E690EC41902AF3FA6555F82A63679D5D19A2698CC51E340466ED15789E1D8834219> |-/o <1C60D8A8C9B7A73DCEB07E09D16841D605E4F67059E6ED314FDC718296562988C2B46142EB322EF3939CAE354B7E55FD661DFF237CA71FD335E71456E698F8C0F8472C702E8F411702EBB9F00C5C847CFD63F9A2B5100B0912366AFD52B29CBD9D86DFF49D84DF43A08E6039EF8908788BEEF50F79> |-/p <1C60D8A8C9B790A84D73DFE4D381CFD6963C979633A535C3C749ED1C7152D4709CDCFACC592AD067EFE8970C23CB25681E69287299A22884DE8BDE1505B84CF6AA7511869BD2B6A6E872ED8F4FB950C326B4FB95082944712FB75D5A3254095346BEA5A595AD556AD3A9D3317DB6549C31014C28A6F4A2E9297C6A649C3F01B8E219A8D9A507BBE73A485E32408A43405CE351C757C6B087E383C4E5549808688C96DB79A996B96DC273A9BC98ECA850D69154C730BFD4278B52E37BB92F33> |-/q <1C60D8A8C9B78C66EF5247F5707C9C740E624C8899404A06F6848BFD2DCD181FB7D274A50A192DB05BB43FEBEF68A1F530DEC4BD11AF0AED748988BA60AE9D12F8BA7CA297DAC8AA560E7A58B7E1F16F562C09BC5900B92D56A4968433C72E15AA4E9432074F73C34E350142426CF19FC6B76645167A82BEC04D3626279EB89E74DB2DCE6B0921A0> |-/r <1C60D8A8C9B734780FC88FD3AECF134166BDDF8A4F36F510B86071E1C8D37D5CC317A859CF192618E335A018056977327199A88CB8A5B59464B0A92DD117E0B8A2D657630C13C88067846EA56753D04D3FD4B146A7E72A0E39C8181715EC30765957D24DCF441A27F184C7A01484ED170D92263EA4CEBDB264EC89D1229F9D2F6033AB> |-/s <1C60D8A8C9B731071688E37ED9B7C64FABF173B75F74601187E560E64B89407F48DF864C69E22EFE816414A33C117471210D510E4EF63643B1328193E752287DAA56CEF45DF2BEA947BF354F35864BB26CD7025C0F34D0C49535B8B692A6B5C45D43EBE2595D937FC0EE3C4BE29C6EED60FD29E8995A30999D351226EDB0B3E0AA4598B2C93624AF4D820EB8FF6DB3802D4871BE4A75F66D470AD2E4D2CE4AFE38746B6F5DD32CB50EFDC48CDC63B8325BB458FDCBBCF379E56849E031C34BF49761FFB824336E0C1DE2D2202144EB6D08D3DFD880F96EE2> |-/t <1C60D8A8C9B737EC5C828C4ECF4C405050A99F8A15BA02A5AA54B37FEAD9332521E419D50F5E5D8B4CDE8129224B887792FBA606EC0BBA947EFE193A3443D71FA7DA33B739E1D8215FBBC104C391018A65D67B8044EEDE065D8529DE94FC9F24832EB9FF88F626F290CF555A9756D8E3065C6710815CCE635BCABAF46E7E60A0DB7B13B8> |-/u <1C60D8A8C9B790A83638025F4440DA24B326E0A1F5D7AD526D7F41F79ECC12BB9B394DE8FA2310F677A900151EDE5FDB14959A7323B99B6E1C59AE8E9E6B7BA3BB1F6B327B3812889810E13637A562F95CC961967ACA2D5BE69CFDC2EAEE52168B2F1FE17207BA8B036C2E4E8064D6C5224EFD1C04718E9497C24149311144ED162DD479479372B5A7BF00943098EE2750B22E16B070341EBF21C44BABEBB97FAD87> |-/x <1C60D8A8C9B78C669F28CFA812DED67D2049D95925824051CB6FE0BECC0987A21C5CB0FF4F37782C77BB1C99EBA4339437BAE4E882F098C371E18C96B2511B63A7D6ED88494B2BACFA684B656905BA21AB806F38F9C6F5263F3D602BC77FC728056D33C762362C68F969A5094C9255C860119FEC3BC80AD2C64FA9221E0A01AA4F6805B6303E89B2613622BF1052D3086E817DDD8BAEB15AA14BBE9B6445D053B113A64FC435A5B2EAF00F564D0E02C53C266C8E546FA73EEB8F96D428734590451184D185A8E0A5020D> |-/y <1C60D8A8C9B78C66EF659E9082A1CC49596AEC819B9A9C6264B2D01FC7B64AB7FB70A4FED9372C9F75AB17D1FDECA458047272AE35572CFEC8C0E0DB6D247997B66E06A17BF1F6ABC0DEDD54FC83827DA33C5D43E6AC13C07F72AFBB360A078FFD755660F7AF81F13EF828FEF0804A68C26FA841589ADEB11A08837B6E08139FB246D0713E3C3D6E9C3F30B59D0308558230773F1D6CB4CDABA9F6D83D677ABAD6CF4C3F2A4B140D833A> |-systemdict /gcheck known {setglobal} if end {end} ifendKFYYYG+CMUSerif-Roman /Encoding getdup 65 /A putdup 68 /D putdup 70 /F putdup 72 /H putdup 73 /I putdup 78 /N putdup 80 /P putdup 82 /R putdup 97 /a putdup 98 /b putdup 99 /c putdup 100 /d putdup 101 /e putdup 102 /f putdup 103 /g putdup 105 /i putdup 107 /k putdup 108 /l putdup 109 /m putdup 110 /n putdup 111 /o putdup 112 /p putdup 113 /q putdup 114 /r putdup 115 /s putdup 116 /t putdup 117 /u putdup 120 /x putdup 121 /y putpop%ADOEndSubsetFont
/KFYYYG+CMUSerif-Roman*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /three /four /five /six 10{/.notdef}rp /A 2{/.notdef}rp /D /.notdef /F /.notdef /H /I 4{/.notdef}rp /N /.notdef /P /.notdef /R 14{/.notdef}rp /a /b /c /d /e /f /g /.notdef /i /.notdef /k /l /m /n /o /p /q /r /s /t /u 2{/.notdef}rp /x /y 5{/.notdef}rp /minus 128{/.notdef}rp]KFYYYG+CMUSerif-Roman nfKFYYYG+CMUSerif-Roman*1 [6.41276 0 0 -6.41408 0 0 ]msf84.5605 5.38086 mo(Nyquis)sh103.991 5.38086 mo(t Diagram )[2.48779 2.13525 4.89307 1.77637 3.20605 3.20654 2.50732 3.20654 5.3418 0 ]xsh134.623 5.38086 mo(\177)sh138.24 5.38086 mo( 4 RHP)sh159.607 5.38086 mo( pol)sh170.284 5.38086 mo(es)[2.84717 0 ]xsh113.804 193.171 mo(Real)sh126.354 193.171 mo( Axis)[2.13574 4.80957 3.37939 1.77637 0 ]xshKFYYYG+CMUSerif-Roman*1 [-3.92669e-16 -6.41408 -6.41276 3.92749e-16 0 0 ]msf5.38037 113.588 mo(Imaginary Axis)[-2.31543 -5.34277 -3.20703 -3.20703 -1.77637 -3.56055 -3.20703 -2.50781 -3.37988 -2.13574 -4.81055 -3.37988 -1.77734 0 ]yshKFYYYG+CMUSerif-Roman*1 [6.41276 0 0 -6.41408 0 0 ]msf180.254 21.6836 mo(Full)sh191.546 21.6836 mo( state feedback)[2.13574 2.52637 2.48828 3.20605 2.48828 2.84717 2.13525 1.95605 2.84717 2.84717 3.55908 3.55908 3.20605 2.84717 0 ]xsh.456506 lw
1 lj
10 ml
168.338 19.4873 mo
178.759 19.4873 li
0 0 1 rgb
@
0 0 0 rgb
KFYYYG+CMUSerif-Roman*1 [6.41276 0 0 -6.41408 0 0 ]msf180.254 29.1367 mo(Full)sh191.546 29.1367 mo( )sh%ADOBeginSubsetFont: CMUSerif-Italic Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /CMUSerif-Italic def/FontInfo 7 dict dup begin/Notice (Converted by Andrey V. Panov from TeX fonts. Some glyphs are copied from Blue Sky fonts released by AMS.) def/Weight (Medium) def/ItalicAngle -14.0401 def/FSType 0 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 110 /n putdef/FontBBox {-1003 -354 1459 1110} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 -0 430 442 666 666 677 716] def/OtherBlues [-206 -194] def/BlueScale 0.0253845 def/StdHW [31] def/StdVW [70] def/StemSnapH [0 23 30 31] def/StemSnapV [24 33 48 53 56 61 70 78 86 91 99 107] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/space <1C60D8A8C9B804566C> |-/n <1C60D8A8C9B7E965DE634C8C36C9FF169D9B4C02D8B84EA03FBDC73BC26EF3BF9B929CFB9F10922C6DEB3B10C618BA15DDCFB1E194EA481780BD20890FB8D3C0E02AB1FB70E7EF27F4FFA79EB8C1B4C21A4829039893E8C948312443D5615023DE63ADA62D05798180FF3C42FB8B028C248808142A5326A19CEF7255DE97192EEF96C83A74E6F2C16558CC8C6C739907C76A4AD9FC0EAFAA4578D45C3E8C472C1BA34BAC69C46C904D879C6115952B3A66F26512978B0B0DF631E9AEA594B633A0BC8DDB16434CCBCBBAD2F8DFDAAAAE99EB5F6C39A098337B16> |-/.notdef <1C60D8A8C9B6ED05B71B281B14BACC0E0F6998C26A83E375A07AB156E33D3C0D0AE7841ED3C58AA89F8452D8B14DFBBDB595110D4073E8E9BBB4C7CAABD777414D8BA1B96490CC4DB8D55EDD27856AB7DC35AC4EEB66EA52ACF8B5> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/KFYYYH+CMUSerif-Italic /CMUSerif-Italic findfont ct_VMDictPut/KFYYYH+CMUSerif-Italic*1 [32{/.notdef}rp /space 77{/.notdef}rp /n 145{/.notdef}rp]KFYYYH+CMUSerif-Italic nfKFYYYH+CMUSerif-Italic*1 [6.41276 0 0 -6.41408 0 0 ]msf192.189 29.1367 mo( n)[2.2959 0 ]xsh168.338 26.9404 mo
178.759 26.9404 li
0 .65098 0 rgb
@
0 0 0 rgb
KFYYYG+CMUSerif-Roman*1 [6.41276 0 0 -6.41408 0 0 ]msf180.254 36.5605 mo(Fou)sh191.2 36.5605 mo(r points of )[2.50732 2.13574 3.55908 3.20605 1.77637 3.55908 2.48779 2.52686 2.13525 3.20654 1.95557 0 ]xshKFYYYH+CMUSerif-Italic*1 [6.41276 0 0 -6.41408 0 0 ]msf219.904 36.5605 mo( n)[2.2959 0 ]xsh168.338 34.3652 mo
178.759 34.3652 li
1 0 0 rgb
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/KFYYYG+CMUSerif-Roman*1 uf/KFYYYG+CMUSerif-Roman uf/CMUSerif-Roman uf/KFYYYH+CMUSerif-Italic*1 uf/KFYYYH+CMUSerif-Italic uf/CMUSerif-Italic ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (Im\617ne Goumiri) ()%%Title: (robust2.eps)%%CreationDate: 17/01/13 00:10%%Canvassize: 16383%AI9_DataStream%Gb!R&GCJgNdP,u+^`II12C=8'OqT#F#Adn&F2.if)k1@=cTGk>\Eg]3NnN(:eNjKf%.?.H?D$*uWRY!S\Z<?lJO"33)g6SGO5fBl%]K[$)E:CaAiBns[$NuK:fCHl0.%Z?;4J..iWG!oUbPB7Ul%D:=75N%r$Jef*F_1`$33=^+N]`_o7fAH)ann_\UnRfnqES+-s+B+q%O8e)kp8-'DmM9e!S3k]rRte$:hBUXIJM]dH6eY<`;lS[?kjE0/`oDMDmOiI^E5K*&?=+I<b!;Elj'7h$+6/2YERsH"04ojFXQ9?%%F9[1h[dXiG-4"hF5C=eBT+!g[=]_c$6-.lG!P1CE$^he0glSF46ofo5;"M8%eC,Z2kO?6WVe^SUmscdbrC`4R;b#euUjPrD=/)Zf%,,6MFq^I_f-?sQ(;]^npdT"4k8o^@cM>ktJg&d8"n1^!H7<sA.`UV>lP4t0Da\4$":Xe/WrlKZ_jF?7ha0O3['gafER5TBk7!+6_%!!%Ho=0?1a=h,FDVI[W^8WM0bI+4GYoI#%$fU%+<KE-#ZPr*/Hb(i)JU,VA`VS1A2n'<`pLbCXMO0!!p0$!Oe3P*137cN*GPiq&=%*t9ZQ.$[3;R7[2&#gGaUK1VsQq/RtG3-ut-6YFa\K7TC3W$B;e._Uo"0TRZJaCV%QbR25QWm^3JX@D]bj96&CRaqA_Z2XrN7#'r*%*n%;9fdiV/rGZ$6]KlNS5ERo8V&mu;JbnK6r[bpf-mPP1dSp9KnC\N8dbk&`T..i(L]3H.GYP*p24&sI;Mk@@9Yu-3$!3<^\=-*S%X.flDPIo7WBU)?1[r`NlV:3d@SJFZFB.aF+E]Ifsb5k>q*EqQFcjDtQ/$pdkTN.roGEtj?V,W%)U'Ogh0qF'271l\\,.WJ:9^jA'%&;]BsgrZ]HPJ.%067Wld]L"+c',rC2"s\_$BEKK2<u<lk"M#>g"L%;(7KfpA';6*()+Fb40Q),j?XZV.P>IIYLK6)]G_J&M#er+n%!9SsSKSkFTn4N*o,:D+Wg^.j$3ag6X`*/6eBEdFK=6PK[OGoW5,92>[BEdF+*%"W.pVQ^`'u%NJ#likK?k0re/$sou_(4IgOV0u^%!ZrO?)$%mKr%O]Sr!:iH'qlSA$Q1t@*\\sd&\+WL`\5blrBVA>*Ks/6*Sa@Y9s2A.i"]E-q1eDORZMmT(#$IeHiYSI9Qpd(#Qu@-%9SSt:0PLX5M51\c@!]Y69'B$S,?-%0$/GT&`Xt*eJig>Kcq3]eIWD"W&^6)D&nr[T-aY$[M"m%PYGU^J*aaG3X/9$Y:7CM_l"4t>%aWK<?aUlpCNQ[:')BSr(7S1*oUB\W$iQL/BI`\/N3/@OlSQNijrC\EW(%%RiJNJKKm@F1N!^'8-dGDuP-:>L_n)Q-k-/Z%3#!5KX%"G'h*hT9-08A8m.jNeVjQcUo748GpVaER$Br,M!DZ0/naGU7_`hq9sZNlIDVPu>7s:6\1Ea9pTo=Y+UqI*Rt1/G^p7BD.noVcS-$%%".%JU6s$k#sLYX_KA&)_8!m+n<s3/mRh-7UdoHL+sVs^AdV]f12rMcLAMji</"_1>G=YFJXeQJ86Wp/6jA+V4eUXE)*/ZEKCfBJ%8?W#_i!f"\qbhOCcnD5GW;VL$n;\JF*g<PN#-cNZ_Dh$'7^)8H/;mVs&A9T)gmJME46mo:'/Po:XrhZnI>>nnoS_1B+V#4<INbpi%D<Q=)ahHfmEg_ga3uPMq''B4]&ioN>(PN38!e&7cnGp>oW(TH+.@0!38h8C@S(,gq[3kA/4-LG^L#kC]=u;6ZqNiIh91=@^j=opE%K?]\F*?!m>8k$TQi0p7T)U75&Pt@*/(26-bV7dYdLs\2FfbBKTB2^:OQkC)LTE;<\QlJXBO]81_+QlE[W,CaR$n!g1j9^KHn.21(%._M/01DTO"fhR'a&i9:iJt#VO:c-Q"\AnM\#mH-F!@CK]a=GY+VG#VX^mE,-49Z]l&lh4Q5j3ji8I1_(ZCI:,(n8#b%4Qm'JnJR;%Z6k)1<hLO&6i<Pm_2]mapck*>V*qE9]U2@]I#@S+r/R*MNRa/KN4URSQk[t,"CIjS3JKblG;5SEBAsp/7gbF'$=!f7-%lsQR?5of%'Gn!O9pGkR=d*U=5G/*t<T>^j[Pi<G8&-+KaX5Ch&QGi#W-9l9A[r5A9Ca4_5SnrE?m?VB7oFpU5u9Finl@#!W&dQGa/gYRF,V]:%o.igX'`(,_P<qA6pS3iqW#8!7X<fl;Qr;#%<>^dJk!Zd8*E&sL8d-5JRFW-HaAiT^9.VYgQa6aSqPOfEH;%eI"F_W$DMq3>0s!@3%\PPoCNL[^m:K6JDI\t2)=tAYaWGOok;CZ\uFq?\W@Etis;4-tpi.ArZR"M8g<Wa[NRZj1@UCe\6_^FFSM$G<?M!,]))XJuA+&V9U%W!!s(MM,"qBqth:EgHK=TF[=g8ioKeb)7eg2^3C-fa.76JMGJ[S]>]#id`]ZcX_`S=(2EmSU?4FJ`o8'R7s>8-IEC&#t5nDT.]]R%;R)0pN5pMB]:rGC8m=(M$F\nBTIQ*_6ns\tn3;\;,IkapXEK<s:D2?rUGKsma?_qfq([lS'X'@mPbd3ZPhN--,(;'f1-T,=MbO-W%-WJ2%eR!<M[Y/--0?PAQYpttG=iN\>%lS`9bmR_QVcHJ&af("X@nF]#a9oj0X.C`;d2S'"`M\du'e-T82\B;Y)62Si+3$%4krLj<%BbMo]'`!b719'LsG_1n")eM?EOf,#MUaQsU66%6gA=_LM5/Da.'m(\?r?QYXFV4LQU4l"Mj$a\5*FDh(,_B)1P(X_RK,64B(`r?[%nIi-*,5GSSmlLKe0WPagA5Nk&2ob<38caAf.\Y6&=e^(=,]P;Y-GG)aO@$=L0bq+C3Dk\uOY$Xh$.OX5;."oF6q.O^ZB<-?'FRd'%PTnLWe4'FA,F^0G#RZ&_I5r?e1.1/+Mrf%;&;^qJjFh1mk-&Hm65nU7''0P17XU*7)T"UjAKqHNJTrB=&q[WKBOT=Dk2k"He5u.T%AZ!)>j>4?a,Go]2;N)*QC2'F.N./F\KA>c:3;bkD;&Mh*//(.#NTlNk!O1F$@1T&@a[Rr1dF5hG[]hJ1.ART6qP%:e_!r(rdss@?%>J*@N-N4t-4i8'"&WR]qAFd>%Mjh@n?BE0F73\3f_Vjs?[H<>G:\&30>Itm!LPbaq^Ols8"\KBW\gKB(NU["O(H"=BSEhR*nLn?Z%M-:?*.u?'t.VdUgKJ;/4BZt^kaeY,6U55RPB&skHZHRo37-6i?im3h,[P5F(3;>S,V;h2.?<&k?GQZ1C%$;2cM98->%m`(Y)-iWV%i3<nF$8NF<D,o6,mUboj1`Jb,7o,6kM)D9h#oTC]#1KfNap]<nZ]W>dJ_VG?4BOGM"lYf`[L5`$P)`,`;24=k)ECa>bI!\WEeN?2%[knEr&`ZMX;M`!6ET$&@7;\t4fH"KCO?MX1.EsJ"$`SFYOkC(9DAY70SEJD#!WV[X.YukH$jfd/L!KBA4Mmt[V"7E!5PPq1P:TS'%K_p]AL^XM(?P;TL>*;G(.g2ln(BoP7))3[6mQdld?t;EWcV-Wo/@'%&7C.7gC<;;89?h7W)5/46NG"Z%TMUdM&I`&X=bC?3<ih*r%&NGG2$?R[pb#G>>`cd&N$`1*tF.Gf;aaAg$5\U^S^pon.dju."Oa&/bDm8Fm^l`/ja>rGff'*e[GS8PaCj)#aZ1qS1ZG\\`(n&TF%<,,elaS7P^N_6=*cltHt)R)JU/BN!'[3h7FTK*l2U/DWmK#FV?PXn8s==-)Lii.>?8QI<ITpT;J;>`_]26i<I3Zlgi&ld3%XC?lk%!Hs]85pV?96tC@)_Cpuge^nD-'M1*K`%s2a>JP#PDBp)nM?cr?`Xie.BINRAUB\D?3.N)LI:/(DL#.))NEMG!,?2`\q;EcFYsg#0%J!/0K`[e\_r[\p'%iUsGf^[HH;6-62d2;;@7%6"HBc9.\7LskJ*M]tfF'4G&SjsAVUhH9La-6RnXR_)no+GNcYk7HZ1QpJ%8IgFK%-o*a+LrA-o8YoUM1pBAZOD4p,@joLNo,frgGpjYHC=9<2PRWq/-e-FPM;FCH)jpfW3?kYI\Oa(Oa\`E*Qj%O``V]n-rt/D_+O[f6%7Z@Y9/<1C,e/II?$ji5s,S2P)Gmi"NdKek-F>GtKY#L41i_c"t4_L0m7X&U&El<UZfli[uAG/dJjZIJbNP(ar1lb*XOUIG43U0,6%(?;qkRJ=B&_2MLc,dCRt@aNH>VBr2mBCP2[OK(!/U7$i`Mq,&Ud(Hq\ZJQPufT<J9aIJ..^+uiX"=^1O0Jm6/M^<4VW=n9[-sZ+;%+QC0NA!T^8ck<a$e6g!"&WJk@`^P2+iX>oS7%ZFq>NaD(4jBo6A'500c2ju5`V)()\0tNaV%ebg)-eB!bT`gR&PO2EQ6AJC]iM*<%;0.WQ,&k15)tDR`')cFi-1b"c@\ZsaV3A8;QI@[U;q+%IAeoqg!JZY@81=^FMHl/hqOaTd;id$uLnp43#E(%a)M@QEeQTk;M8W(J%*;O'eDqB$4-_*U+b]CRl1tZO'e'!!=0*:;>_SpVZb6`t0C:8]d!&66`QrC>W0%_(^@2TaG(Rc4BWBf[mB(cc:;Jm`EiY=QV8JUAG%U2l^l(G\<"e+c#[S`\$F4A0<O,0OCN#pVHM2+#o*/4F)#R3GIcAR^XVBs<I3)VAP]CliLor5NE6iL%(tQ785r2I4QP'1jA;&CVu+%\Y;i?F`@q[8ZKN3e2Cgm7IUqY`PBu41/$^I1l5iD%D%eG')RS3'`o+jbp'!#;TnoEfP4.h;+=+;Ye<SkR%Dr2@QCAm/8I-GO1Q[c%\`18-/CIN/Q7%CcW?&p(.S,#OhMLV0NZ0Amol6hj]e^k#=&C'.TGC=2Su#O9<Z]NM&\gt`-3_gfjI4.10+uH]-%]<H;.R4;ii`Yp%#X^X;!8km\-^I`FmhClP9WGf_WHf0Z9b^UA'o@&UlQGfu)WCm_\&WUOeBt6M&WZPfU,t%jd@qhM?_TGf(;In(7_pd*BA#;$R]qb0%.#LG\!p(AXL4G.aQAn=rKqM9BL?!n![I?SAR,>pSU?45`3\\Ym;GQ_7>'(KU*sj9ROW_M'6T$;#nWAp/3H#MMY9N\&eB]#jlfKLt%P!n4P#Eg8C,M3NJoW*lOZ"Dp>$#g'BpEZ%YS9`N$ANB^*?]>*Zo?ajn(6G2tQ]=/.6794GUr?u6h^K1J+q0X=Ar#M`Jj?H$.b?KZ%T]S6'/:c,1OjG@/bO_`EW`bW5MmfUlV2,AR[N+hMK]`c3;NB@iSjFd1+AkZ%[(9#Nne,Jm7:atK_]c)+-]mdsB-P7rX-/#)Sp4L[%J]ku?Fc"Iu@R22g&sGL?+3UW>jmq2SSD!QLZ#4eu7;'UW[K)EiA4)GC/`qpW)Wsm%23MeD7;'WI0/@\b1Ds8,YRZci#5gR8-/'#W%'hDGilp2tb_qmV?J[H;iA"",[qPE<UFI?=DMH2"2Lr@@;U7)/c?W%K!`&a4*au@Qlj(oaaA)`W%C(RM0$kn8dbAO9E)_?K;AQu)l%&2YhkhpNXL`E\:Kf4BeZ,[/)1M[NM8P-CgM,In;SZdNLHF>W+ck@h;r^eU\bYQ[dXMoP[+`K5We=\OhJRn$_?$Q1cG&Ra.P6)3K'%[JU9S`"b$,;JP?$MjQ?8QdgC*aYmR!e#`aORZfU>'['GuIh,++8qi38k:;40/-j=*&?6:+L:LR=U/=9)N9#"F"0est\t`jrFK;B4%A#:'@UraTHU95]dPO'Q!_)>.9AYcQ/bA1bQk^k%?KTP,;29SkEG(P7HiK9BNUJ=h1IK52iq.qCLacZD.c@6HEU%?eCOYq^6"pADo%=\_%OfB.lh8?48PKSDKa?/8p/,qJ4Z*`3lbl@;qP`*AEmS_CYsRU`[#N#`kP3dWei#'Cpu@K88iMXdn>'fE$j@?DnF^3K@Fjs4t.%.Y,3/f0YEUO?&H7d]#Y:BcRslOfjYCP)po(Rj=>Y/IfOWcFW8_7T&8rNj#DXV68S$[Fh:T4*iCGCd"%g_lH?XZ9EuM&>D>7L`Fl:%]V\P7=IRfakkZX6%sV)O&?/&qkoaaDg<)@N6\RtkWc_!%2AWTsqK75b\e35l;LcgT,`@>L'j5+rZpV5OL7JVTC;_uETW"ciA]i,c%.ARKC^&]!?.rr4[IKcq7Zh[^Wr>.lm/(7>'r[3LQ"4)nZ=prUJUl6;1e/%1I^'3%/Z$\(Dc67)sFT%,/^F:cMn>m%.[YCfbXha:o%?r^acbNJLJEu$:K6k3Y7#`Tk3HquZ"C1fk;Q\4K&pkN[DRQl=JOr!`;.',sN.jsW5Pq_s>Q)e/EcL5GRLZJR1LuA([V%eh-.'8lm%UiQ`BTdDco[L/h>aB1Ah*>W`[KWRb.Q$^c)>#:#fF%h__(#`.GQ6^LRq)nW4"^(HDLt^"\DIkL.p5eQO?n6Th5)TcqGI=moUG;F7%)P5ZS,)hL(lLkG/lk[l/EN4EgWMf&\,$j^])-4U5.SVASXlt]Ja%1;P'[m]XIX/4\7Z.re]h$.@h3Xh\O=g0OW1KW+*4F=H6(ut,%ST^4M*Us?`T;oL7kc0G(f8!7FHXG87@P&a=SOjTZ@2m.Z@,b&G7`O#C?j<`?<Its5ZDWEnofL3MbuSm%qIhNWj*o!BD6G/WC`*&6%b*<[B"lm=rIY42(]5X\b+sSauC^19M8r7Eo+>%i_?bebmYZ2@)AV9c;m^:ul"QVYlkE;e<Jh"^/l8oE=Z(rDaEDdWpc%<e@*6##$%,4+-]elC`CgKd8>OOU_sdID%US7Lqe.Lq\H8V-58N+_/?Cb!9=%RseJ;2!1n,\AguO.=t@W3*nB;<W+\md<Cg+@ioRF(l+s*HPb`%,Z!f6JnI1h]4:&..AKU,O#ckP("t%U<sZcD,)7^))F9(qTN^I\hb3^DC"R1UB&4EVC.Jc!bU&D%AMiOX7qXiUMa5qK*Z]BX8Ld5S%jq=jfj]1@FQAK-M7e',[R4bL`Wu3,4^HT+LW[f3RCX"%b,HuT!&2QTf(4RRtUnp?MrE8Qm2XV]sDh5U7_f`OLf&@$=HPK2dO5)g5%OmFu=R8oC:IjZ"nqC5A8TcWdEoC)9rA;cbJk1(HXd+Vetj1@h6C+j>/XSPj]rsR-7'sTD@)^ATk#E^gN2VuJTR@'MmQ*m\?=6pm^%V4&X$[2^CD,>)0P%/8#aUQld%5?,pLCr`kB6FZnghc\7BWD-9mg!EZaN'!4M]>q>5&8h@[=ZWL3LpIl$VBBL(c?I?[PKF<,98:F6%3L.YH,#@tPW!p:7&kP9P7KY&KSZlSF\h`Q350,VS1VV;!VmEYsad:5jIV,@S4R!;>qQ`>PNdW>(?S^,:`e85*<m[+'9Mj*t=K*Nh%Hi:YmX%8f7</t6XHi:)e]4B06YoE?GM):?6D_\6?;`_8$HXHb6->@><r=\P2_`F.SS\CIbDO#@Rb3H)ldX@1`l06poe2B\L]e;8f%D+CDh8Cr$\[N,rZAu+[M1nA>TIBf3o[OZcRa@`Ol&<u9Y#LPUkREA,D7PU#e:r+)dch`'8)B2<V:gj2=6[&s7@CP&_<)O80i"!::%l\ri5PhsID1cA@0XpdbG0nP#b/ijtH]CL;BW5L;9I;/9:;h#_[B9PW"37AeNpHS4&2OKn^p<C!Tmj"\+/u,Rq6Q&&uUe,4MLG,`[%KRTiGIqJ6S#2($q@i1F0me!=VreRANf9,pn#5,.nrWk6&*fZ3u@^S<8:&FMY<;T-5+ntlI0oUK8Q9'%[+NtCqYgKpPC]lLKllq['%nc6F55t3->S['oE:]*raSc%.-rRCuN;2M0ur'C;RY"45@Q'jDEQsrcen]'I*GJ;^V%h4n`#D*p7,<2GN#RKS#VIsa[,-)"/0<".-%F#9@/&b3gCSVU<gT*6DV'c"7d+jC>hrBr<A-YfCidcciN]%$Dn`dLE^glN:1qJL2lV(Q_%1?lc"G8!FSUlGNIY/mE,eA2JX<17L-%0D7CFIRqUtd$J?CUkb_=r#P)okWW@[Jd^!%doLNF)p!=)"hI6>o!+U_$p,\Y(dm0;1-Xg8r6U(oR&NBqe=P1)2]kWSa<%XirBb_X%QCEBDo&?U0V^otSD*a3kq'fpi`="_&nT::i)1Oc4N$3Ad5;T:"^8,8PiB'rhkoZH.!#FMtaG.kN#T\<_`NsQg"iqHRHW%W5H[h*M%!=gA+emi:@STU$jlCf8s?uo3>fj*la+Fcq2?TcBLOC84(p;_6BQo%8kr(XH;ARf;^5F)/'G`!sa1'7K?LEEfdOlE$R+/r>BnRp2i%oij0A:7js?L<^Id[LfS,87pdW!5=@G>fjG>r>E1G<CX=bama`>gVK-E2j$Q2SM&Z(aOg^q41FD_R@+@&&Gf-@1hOG#*0kj1TOW1T%?W(E!\VP.C?eN'gh.?D1U^XWbcOi$s)jUFme/uhdQi>.s0=a:cO.fqW=nX(7pYSQbfH!Gp0+B5HO+3c,;3qmJAnVJ+5=9/36cRg:%h8VCJ[^@/sj`Lm;n,PqHIentNA5XfH:s.+@GT$lY(Z,*rfakud-[n3$Ej%Qt7L,LdU%jPgD"?h/N^eFY_SO,^cu>)bc6`OFhMH0(%qu438eaX*db9<RT=,=.(H+r,sC*b:Ws'BZC[0KM2#ZquZ,(M4"!VnAQ<g$:pJYP&4QegVC[,u\%UmFM<'3iB2A,sKd5&:,I@9fA;%h"ZLg`IUs35UYV#\k(&Mbld9#0HCVBUBtV8^>%nML`8;&5'cW^H4q9T38<R8\H3;]RJoKY`tpfVU'M<[n`S:"LL>pJ(D9%Ym#*`I%"69a?<R-*Yj.c%Y$81<;n?M08E;o`!kfYFOn:c>fLHjlbpHQ?1r\"'?rYi8X8&5eGB)Xrc+8MLPoPO]`T?B2]?Tm$h`%HQ6huA!m%&^H<Xd.&>e&9Rd[jPRY(DEo%,ZY>HCnF/u><%a_okNP6S81LYL61@".\BT7P=-4>54EVBt\qHq?BVku!lYS;")BSj1"/,O@qM`aQ%Wcrj`U'dB@=@='Ca;UE`1,h>NkVo4XkK"sDZ-^bq6[qQGR=;O-SDq_`3CRQKXVgqqj933in?bP\rfHUCkI$4F=15cOkMQ)^JEC-C%3J)X1dVGU3*r5:Z1_g]nqS1Lu$MrA^l?o>jKd%%!RtO"LJgdC#KpV$G#cQ\HcIQs_qFa^5HV!`H;j_nKS,O`,B<3]_5-\gW![uc]%@PTZcqd2sdFq6g`0(+9MLklLcH@a2r:*G&On:,V?aQhNRX<1f!eG5EB?H0ugY)*$LN]ukjH;AqU8aX7Y7IXSCq&`Z0c>56V%K<8)%rI:"GbQ$[LE7!+H.0%W8@=BCd5Qj7]R1?F[pcknt#abQ8<;uojV3CY'r"j_?s0*D8qRt2SG$>s4AYX7$nmg:We@-OcV[U[e0.^]e%s0H;sOlE,*6mD%WY(-)Tdn_X7U(../UVb>3cGjos[pf7&8K%R"_dUjqFrARI0>mVWT,nIT[c1u]0T>^=MIN0Gr&uE&k4LL0q0W)K%!W['4)P`_KOn!M$s5O[knl,R&'F+,-lCrfB=Zg^tij$n-)$hnDV/%'Z:`#-`[++PAnOc[N3hsDUI`X:Gk`1!enl%<g1jU]q]-cp4%N(4SPgAO:*I&f45-[oJ^*Vllb=C(Co;`6KK:3-?=1mSmVUc4\6l$AJ`L!W.aVX9MAFT!5)Pdf?M^((Z'(DL!bcsZm:kL=+!o<Wr:%.!Z`1qEXX/T-hl;a1nW=#3!"tp9=-V6DH^bQ3n>a:jga6Cf86?AWBC2n1SM(:^=]J:IVfBVdno!E$EU(I<NN1X@s07crCaU+ee"I%-Vs%tj;KQ>6rs;MrM.,<AIQ\^M=V1IIW(1oc[GV-5AYN\Z/CVJ\RRIc_L;UeA?(U&AWMhKo&!ChiZ+kZ_pDB!Z4Qg>Y7^Wc;I:>c%(jV^Us8=VEb]WqnoLBr4+YO_F)>6*^hAO^;O)_q'S\lCZr1XOk%^_Z#[4Fk;kEEQ\4Se%:[]4BEn\tH#U\m9.PVeY&6Q'NS*#jA<%8"FQd&H;u<+2l[e3Mo8r_7;](<0[MX]jH-=4Lp)?U_6gWU_A2ZK_F,#@>PY!;WrF\kP+:]^77p<BMcuV-Zjc4'koWF9?8#prh+^e%?)6OT&R7'A=Q54D3k2\N+*FG)9dGr%9"-aEg:_rRqT"QZ]I_U/iQ"XgOT"k"QuR'UB[I\H?+E%8?i@6fdF<+qY4')&Dtkt+'K+i>%L@UM-:r?&c%'>tuU:DD`ZnS?\(U:/@4,TsA,&MKlk%8*k#/nOmfk?]7R_d(@Ic%]djL[?g,CTS%3hcg?=-SOM@o0ghAMQQN[PMhW%b]g?SFCX'("U>fP:.K/'bjtpZbq=jY_Sf<H3P[bL@ock'q1^-=I/A7X\iSK5C=Wqs$E`Zgc4FGa*/rdFS<^l'Pc,t>epDuWD]0eH%obcB-i@jIj[DAMuelC@g!_NS7.>W[6=U0RJ+ZIr%5(Z+=_O>5RaVu*'_*-4t1q"dMHs98*eC0=4F!-iim%h2hi/M7oGIc2u(FEQQ%<h^k#CTha)VCTDSZTaXd50#JGbjBLnlte.[f1MZCfI?jt?a,(g"b\;<l1IQ>#>T"B*G?$=B*G&?6H-[$*YU(#i'u@oGr@A]gu^]b%/("C/gBfU2)]^@L;+K\]S%j&BQZ]?#8*\:!0@tAs3FIjdNVf82p7an-FG:GVP+jk`?=+dLc&:Ati&`uNojO1F-o,:@J8Lbc$JXrF%INM=[h7eFdQ>ItT2B,Z5$IU3R8,fRXJBK4lmX]7:2AsXZOuB/AC"+"0Vg+cWThR`]IRT^NR3>M@aX8(4,\naRZ5(=J6[<.LJGN;r%O/%H.hMTsa%EqB0&P!:"j3G`B_8KdG\3Y>IfZ_4^J[5]YkQ)9+2XGZD$+RB"*3pHgFj,PD\JaDP5\E-$8g>%jFoC<2oiamsr6IGP%NCu+!9rBb/6pAG,WTTp1AuN>H14&CD-*n5"e-:)kp/lWLDL[XEs!ZAB]C69tGRh`(g1UBga$_KTF!3*i7b__VnoE'd$WQI'4X2iP%HL@<-:q\*F[<$m^32S87]@Xa(S2)&'B/7aa(!WLb3GX%DgQL'^X!\q$^JEpi>I.+(1X".Y.o1I56YV#7BGoj>Bkl(q8)-og`fBG^%8\6o%8.HC@RZ]Rd.D2s-kK"R:E./-c0aC[OV&K':iTrjC(HGA9fTTRUUPA6YTRMocIo>g@Bn^1:qS$cT$A;hp)S=$2[%0RsJ:4U`%KV_XdqEpc1<ZmBk?LC*1S+`^/s.]ndn._<8Q%jhG(`QYR%TD:,RL6V_,;hlH$_teq+EPqrP_fK^[AX:DPKl@:BWRX.%rE%Kf^%*l%D^No@c1/W47]\a0<jDAF<en)<ep=DLk;@uKc6dRWe1&79#;%:Mi`LIJ%@r_(a(PRZ+;8Cm5k11'2$R,Rc6fVibQ\C"'!5>dGVNJ8%M\4,ie`SA$g6%W(942;WGY@cui[6cuT1nSpirFdDo/_Lg:A.S$31><%pq`?M&Qj*[C+%3dFP5p^,_,`Y@j'OEY@[04`?(LH$]WTV%8X;$Q@#s5TlKE9S.C=SKYe;F?LJO+<Q]Y`CW=D,`+2bKbE@ni0?0Y#/a_(D3\<>^i(N-7.kGb5(m<STATZfG7Z'%)m#3)W3#00H\%?fd>&[oq@1NU@SU_rF<sEgDOW!en>AR_fu6:5^47=1,no8oBl>#D\jj1qNW?#HH@'5k$O?0p'^D<i>&_QX]57&f(\Hg-do79Ktn"%l&D*5:2Si&^\Z]/^-MLb4)J2F[[G7NB5XoESqUc*H>=$jh_+q,f`)^o$Md88&1WG;1NB>HIJ3n!Z,F-&jfJCZEgJ6K$iTu#Hgu/\%qTM(A%HMcg.X0m[T>LTTp)WB&Tfad;I_:]fVlcT^8bZbt(s.5D$B<-HOPk(2F_AERmV=3"WH@p9S^M/N[C7dlP$=X>7JJH6-uIjt%-$cqGG^I$l\_$(:hsdT]Wk?qI$04&^P;5aKo.AjH4ma$^JYVUg&pg,U[Dpc.i#aN:SUSHOPC'bl"_$':*eY$KpL9Q,o0G$nM+uij%K$lZ9LVEA"[Du&<FE3;\QJ%Q[G=es,n!.>pic"bm?mcSQMu?=t5Xt6>$PZ2\q\saEE/pP5^77<^2\%X?d;*Fq[el:bZo;<1[thj$%)UMo=G6:t<PeKdt%=q90`U@1q6:LLS>N=]r)s?=M[(doiKcUtZP(j@J\/3r=(Z=$5-RnsRF=?S+:]#@$1X`oMY.TnB&eBg4,eE_T%kjYeh:6^f'%VS(N#Q&l(YDZK+8JP[`hdqqJ:f*qHWJ\KLL-U.Li#3NU.Jt."<\1^6WQXkn.$]6TIs$EVq(#EnO.H5K,\_V3Qu:ed%m2q[!LI1U=1DT2ESTCKm8C$-]JsV6%FAMY9ErU;>;b9BQef^inhca[GIT/=>%!rhVh]%h5VC1Y0$AK$Lp?i3ATP%W)dY`ftMlHSP%Z(NM;2lZ`Nh%AdGQL?8:`4XoFW&Vr5RRq35\=W,I:5#n!PqT?X3gf;jjaOk`Saq'u;WW5#T>Pbt<7kt]f7iAOF>coe'.7pEB8jT,%f&4"aZ=?,HSm\GEloHMP4'U`Qkqdbd=D;jR]4G,B_OOjqfM`A*jA:\1WsYuX30q#OaI<I(H58*)Ht=Rtqh1Zr`m<R:\9om"Ml$/H%1f$,IGK!I(n:6Lr"V7WPIeqttlT783*BY*uRi;SZ*..d?Km[%+IKsBdl=qCl9TjbKhi6d'27MnE:Z6#1]\^rq6@5[>'1MUi:gd/c%9mUNXQBA(k,.MW5XGpsjc>O/R-=7!D]ZrkLViR_akf5Kb@nCc":tr*I>MXkWGWRLtH3ZMUl/7!e3%Zu57j!H>k(t?aZ<-e7^j_*?%4KIN[=2L_jKXd;mh]n`=Eg=rEcP?V5'r3Jp_n>ZL>smcE?sC//O*C9aY,#Q<rjGanld+CcE;%Wqq>r\kcE=V`c-4aMWV4f")dLDN%<r$%RIPpnNCJemOf08^YONefg8>Z*ikpkdY>lQ^,)Vs5]aGEqfQ#O'NJ>d^8LD9W71N[l':?&<@,?u(OHG-@3$uHHB1s9NE`t<=+%_?]U2(sBtfO>LmI(BVST.2N.o4_ab\Ba2o(WPWL6QDksu?R&.&+)l6^IhWF^P`F\N@=%^RpQjT<gD&]8f:*tuO9fa<QK$FmD')nR%FO-ZN`]a57Rb*b?IRF=^=Me.]NTe61g>jC(H5r:168?AJapf(N&RU%uWkJH5'9!22!OF<4NUtt,e>jD\!_*<f"T9'C<#(!.i.[gX%jS//Iksd7%LR0N6^cEIVE7%_fB\1`<D??grC#BJK!Cu5F0[Y%;Yi0%0n)Ga6oa&QXUdEa9.4\fUO[fW:1%k$<nTFioCN`=3;LcT#%Zs]VPmN5h5.M3#4Qn#_+.e8@^r4&:$j?pHO![FeSULQ#'&&VAY4i!j=`)=XZELMD58>Y`\+Q,*]7A8WY1#D1$%^eT;?_'X-":p\/%o9i/?rmER!;Xr+k"&rVCiIOH8N<D;*'3l-CY;Pf;?OGMH)LAG-QJTKWWcG4aMoV`PXt&rEMFK]*)\s!K<bbn`I/tcPlH>lT3bsff%<PrqbOD@7?=gphbYo4Vmd9'AAK"HpD1XpVS7n$)q9H=+`+fbUeN5nhjP*2KK,-<s];&ePl;XrHW^i,SQ.bOq4>GJYXC>TjgpapCs%5#hWN*E/Zao265T%4.2@@[456870/),W"]>kWA@-?V)/ZjFj4GrVgekUAD4$a^5G#gU!SULr[92JSGRL1V].)"bs@a!0Ult2/Vas%p:0s&W,d67bT_nbVCn=d"_HgfWkKLFQ'']2`BPM_?AuB9c_:0o=Y[UL,4FHRm:8,]pK/)_jS.dcSq\*f'Z0IJm-'\W<$L;q<;GnE%-Y7s/CrsQeY]1mEVC.!gW#".8c-F_e^0&G[`b\Co*Rs5c"Mi,Xo1-;A($fUJ4"ubMgI1X]#_J%Ge\uj&^!=m1OEj%'/tXW*DcU-L%r:.seE-?Hu8Fa7tHrh\^Z9mU>=rNtY[U4<?W`-C*o@2%N`!s<#A8Y`7Zh""D"Bk_+YPs2e/X;q@RI2=6lVGfI;,8uF9g6tOHi]\o%\/-d:o%.0JeGDkYp>-%*%lCuPN?al3^1B(Oh%?:rdDAgCMeM`iFEF6_bt[MOJJCrHCo;D(:0ubpN_Sif]4s+`Yl#(>*^NO-!*gf\%hb]hj\R#%?4d9Eh_h1)5Q'"grWSf]Jql$IT+Uhn^+(O:TTLkq4OLqJ(RA[p$6cEq<[rk7&>Z61LEW9(/Hl8hg&Mt/&&^>aIB-fC-%DFf.j*TkMpLWk,84'5'nM/)>2h!NWqnC_Q:aFM!1Q/?LH<Ff;'R<ubfKkMT('S*U8&]=:Q^\+^CQ;Oh@ip4eUL0,>=h@bCp+H*eF%+5Vr>AM]n2C%8305\#'V>d-=a@eL?EXtCX%@QE(PQS`\(D/l!4=hDu0cIub[7:Ase,Ta]Z8tXFFq9WQXeRAi;QRLj#oF0!,^X#8\%AlX?4Zo/GOY1MZWia>KmT]T[mI!<s#^l;S![3+e"9e'\8jE]D$6=u*:Na@F"DP\F^J,s=q$@?CrlY-"k\Rt4*;J9%A?\g??8tp:2%QIC(tYVSqn+EHr3_U7OWL0:%Y67*F5H'M22bm@p-`pn4\mq+Y]b>BV]rqbLKXSsM&DkmU@+Q)A#k<]eiEu\&ZZT3N"l\hN^.sW:Z%jLEoAeR*`;=F]/72lV'fPP1`UR.N>"(:MBQPh[tWn%AAZ&-;1sGS5Z%rgm6S*tt?cLR2;K5@8s6kTS'BlaE\>hI<V[aln"2.n?eT%O[B',lW\L.-lPmbMo-1PbTcS8N.4=1EpS7Y^dMR7Nd]'RDa;VT7B]lYTGI1fJ-ST:-k7j?Gsg5(OXa\_P)kFGf>.@3DYdZ%Ys@kZ%X8A.<h"\u,nom=3^%^R\7j3@8#'?CJMbR(s\Mj05qr*>&1%&9;gq\?dP1usXph9tQn8YW_O"Y9.S4ISJ;B,+0U3tNS?e<)+DYpgg%Ecag@Pnl<+.DIgbn!3D+Hm\=diMk8)pOcYZj9t0V<;\!1ND+))4Yqq#g^;;0!Rre>R7D^UVk?Fu1SK7<Hcc"gZgW_5GJ!_0L,br\%(m:6>0'$E4T5V[!hIfN?O/RUhr#$V(J#jB6N]OIh!I-I8ZL.0P1k'fkVS=9$B:GAT&TMHJ$^r]@\QHIeP0gd:r@=Og&LmDYgcL[d%n&P'/rplbe2pTD*LSf!Va^0sM9hhi^ei1`q]Bu6dINB_F0))k-QK7\Icn%i[@R%JejV$OE?6OfDeYeQt/W<heO<ilJTnCYh'2k:i%\T$@Ur93-$$>!^Fl5cBj$@+?KV2s(!e^?nNp.1/QWC6+I3`"k$c?6gf\k>`i&M.Mklc'i`*o*$jF*^g/*C#H\)?`ts7Zj@7V>&7n%L%k/Y`_.eF+%JsP+R8?_fbo:+7j)hJqn^NB$`"`\r0;HlEGUTH$"hlQen.9cD/;)Vpd3;lf<8lnVh!sp=e/UI`SI*_GprJ61n.]b%##RBA@@!NBa%8TI(c>bZf[jaT!BK!J9>V&D&ITu\@QE6)eV#Nj2>8\%RNT__l]5<9XZ/S`/94dNE"d0n&knRBO^Yc!L1^`_1eTn+%0'j[?mu%&e[q3s<$m'\@H<O!*XPY!>4K#V^A$m@,%J+]?'Yejdcc,nXaT\,\<(;299,C&'$M&qLOD57JrCq1&.DfRilQRFsY$Hk"%L\at0H\clg5S)-m]&i?&(H13ZK=o4cpP3@/WP1biDkF[;=4P87@W4[NUTa68m^->=n+Hgng7,B$$N8pEc:4;a"g=]`01rM4o%D]F%N!*mPWs4IX`(KrU8'D@ml\qN]436tOA*F(m3%Up/A%m=7o`K:/VdBrYlF^AS/WH(B:=`&bp"9l%l47?TS$jHch]0)D[G>dA9jqtu%Sm2>2:@\jniDEY-D/shJ81'[kB',@1*>S\l2KDUK3>i+5cf^2qZ!9L`ZQq7Z:*JY<-[uhn`Q+4?M_ki/T<o.;0;/`@`^WNbs,RQb%O_E)C$8gG96Dj`"26"Ao+`f]QnL^P[MDpfk8c&Z"8_cujDA%E:4@"cCH*DkJW"fu^pEo=D2b3?3p1Y>?b\+fVo5[nsF)o].B<g(Q%rfaqenUq]eJ6.T5e>PQ4"4`_hP*k^+Y48kG^*)h[2K:-3Q\a+Eo5aKoF'g<$LZpM@(NDAN:89Kk'gP]S66EE(m`E#b/R8BOTAJd%%W_Yo#-,dLd]#=g/m'LbKfmOZ\cDilfPHh2q4`A,i^<gPShoU7#O^A&9%b@sn\k&f>4Jj$qq%jJ$0"EWHp9$%6M#31b9k)tQn4NLe%d$l/e<?*,$qe>Tf4HQn1!&!m?f;8(VD8StP+@F"TMJR/ElVuT5j+sOBC$h?nG:s]qm:<mi#]3^(BJoKC]!t7Xm_QGTC(,"F9W*)U%,6`knhEjmuhYf`+pW8-7G^_*rpYsb?//M6k,+<AAGrEqrZGfl"BX![@(&QBN^\IJ%09f8D=4?a)cAi12cmNAW:?Y=Q*#_hS>:41p%Z=WOJ@Mi#H9>akCUC2)Y(9Vgba?t+TEP4@rSP?YYVs;!],=(3ZVjY;ED9p/0f>IZ"%-bL;Qf1dp8dBCaA8;Jt!o3M`EXqh*jnGnI%7XBA=4V1irBM@$fpDX#rgmIG?nun_k/B3D+q2u-rP:.\I8O@0=H^'HGS]-7uFY\YV)^qLDOmWU@i;Iutm.BD;/FU?V)]8:764Wj?%N/Yeu/=g]dDW,r)(\;fo%Sa-eO2]]B,pF,5jed#L<"$[t[%NFaF!:+B7I\/o?_I7_D*D%T:#W8Q_/K!?ek7l*b\!j:MHD@NOp^=U%?N2U*54/B+6G5(uT20&DCeGAZ=DBO\re]g@bFOgg?/Ftf3goqW7BSbeT2a>4,];$q)W)+B4%Vas&m^9/8<k$p_fYi3dsO6;M<1.U%f7^>(`3G;LAQ]u[kK&96K>m;mr<Nj/9KdhI"4rnt]@st:6ap._76W->.c#LJ6YA"8eL$/*.?tM<J9Elgor.SM55Y_9l_hrljl5u_%XV-(3UA97!1!l)iQrqH,553E@];Oca]mPf]mI7X^cl0Z-$gA%t$=lMLPrU["G^p3I7,1<`=3!fZoJo5bqWt,Y8*Oc$$IZ;R^8Z<d%85jHDi0!%]B]a\b*A3te]lWeia78fhcb"^5Jf(FtnofH-`3%(@@JP?D'#KJM/UqWifgSV`0al[nAp"k0^C"V7_5tY)fR^;5l-.^c%Z^8_SAhFrbh%O#OgUmQYg.Sb-_G8i%0]o%9Ibm[=TAhbF3lkKK0htf(dEa'BRqjY"0>3,M*NrEEO?]"JcQQ1qj#9Z-Y>G.D/oF_m%ipf:)(82&_h.F$A)VX-BOSdMO8uE]t_Q;jTr\dm9!lh\l>!k4$OQh59'_YiX1SIso[*ZIlMe:VHLa7o^=k(eCr?QT?]u&XL9eeFd%Bu\=L+"mqod4`F?=3+Rp]1DgFqi_lfQ%i,B,&UCr@r4/,FDWOPRnfUL517]s_dfFH(+I6eLL"UMpMm)RCl`dtICU1Jp"#_C/"teE%:RTsr%'am:f1NYp1a<j=_bQJPRs#NeVh'*`s#j?U//i^VQLQ1Kn7LmqUe$.$6p*8*AH,b_!_N;4BO!emT13'$@70[Cgh\S]eb=Ea%YB"'*Nt(>,q0^bcp;VM`0UC>%Ps/F?7YMkM#c1Q.p-+g5rtpp^Nm/<#-`f5/gY@/X[0o<J`2]W]DRYq=]sq^g@FotKWSLi]1J')?%G91EtOoG9%SAop#_fS3^m^0sbiP+p2E7F\_7KZeGX-(JL/$dX;k4,;gBa$ZPO#Q/,[O#iDGDEMO06*D;Li,Z`rf<34?$"l+DL5a<%D-O[?S_#J5fkkYDZJG)dWGH(XdW0&DSWlc_L;9Z[d.;<$FEPdhq`R(=_Qp8iqdW$1jP8MM:d!NLq.(2/q[tq?!dj)r4R8bkc`)/T%Z%kKY6Kfhm[PY*XIq6M#ZoY2J3uN5<1G_"W.N6kAiA#p,&#ZeH$a6CL`]hbJ]=?_]Ul5*7^%\$<l/2X"0T`2r4rPKlgE?3N='geu%k(+!\4A#bL>E["eJKd6(!lQVhqu9#IH(mgNhqaTRZogn!Nu@2"c\DGn?KVua_lk/<4OfrIUUbCE%FdsFjF@"fUh:DLP,emOoDYr@%$sc^/rNEtt!Ve$&;kT&J%A/ENfjD$AoClf2BNIN\?OqE=1Nq?7s$@b!#31gIa#06&SK[fadmSL&U;?mB@0cscHE",u.O.:WIqIF_%__Nk;$Nl3.%lH&V)8]>BLI8%"Jan^G1aWP%2F/T84en*.69TI(%"Y?9q*Rt?8oLf3IBfaVA#sPt]tq7TI,E$u2,W]E>U-&Ni!J6t%!,3WSDWm^FjjLd'OZ[Aa=ejc+A+?kj".YnZosO\uP]AZO`,W%S7rP)Z<Uerc9bu8O3fc\?-G'!8_YNF.##6uqMs:^FMoK40>;Ol1%O9WhP;.p:mQ.D_@duXi0cfk`tRUsA_e%j#$qFiptFDiK]^8IrWAqOmcCrOc2@l2l+[3=$;%B%f#`pV]X0pU+E9CX,V1u;s3*_b\S%-5:.KamIiSr"&PAb_CAh$l6%@J8Q7>l@I@(*hTD(X,\)(VEgTmc-P(9ND+BM6aWOC3-tVkA-ktO'MU9O%4L"D[%Bo+nfk1-O8M=c%C35/_\g93D@+XQ'Z.]d0`e,E7!]_q9*neH6q(Q@X0:$a4TgSf2'0<^Aa1,784;9jQS0m2n,.2oc:T>56e5,kV?Lk$T/XG:8eaMOX%lN=-ac93/I<th9[lh'Ao:?:efD0L>Tl3j\I3miknE'b8j!cn3T/c>Fp=:6-uMpZ&eLHZ]:"0"k4o*U+G*F6B"ElW*r7t=h[Qb&Dm%V)YN/c>.XcZ]hd$]3>2o`[:V'qP*cTljN1KLOZ2<EVf'spicW``f>bJU6s\KeOhKmZ!-*Z\[[[g$CN'P<XN/1G`.RhN?srS5$3`]%[]a*BqeO$+`uH!omrL)Up)[KIc16k%nG.KX/]+&+\CeX8%NZ>gR[BUT]^[,.`G@<!IS:7nECCMspPH*5qFr)!9.h[9iB^ZRO"X69%B=Z,mp3?Ti.ZPQK[h\$#OXiYR%o)RZ39Z`b<f66M,C$W'*>9*Bq_0;R_<--?g-eg3-;=UgI)<j#N?(0'&71R%35&&!NkW!4mT(;p%^=;AB]Ps'_e8oefG?_1dBgYBAb>qQpT=loM[G",p5Eq-mT9Yc7k::>@e]]P95C&6WJC:\NYF?=c%+Yc!\p%0a=9IAdgJK<fJ78tp%*e-qe-h=m`JCRaLgYqa[%8d%F8(rEj=9D8\giF[KHYrnBTO>"i@Q1ug\IMqJ!Th8^?.fEqH6Z7)#_F)D2m0a^G_;YkNHMoQ.;YW`%U\C'ZIK#DX'PMoAgI0oZhR)1Z5`mV+.i9["Tj3"B?4s.P!&Q[]e`]rsi4Kaj5Z=F<;0q%7D1V9V9<^)sYUWI@H//h_g&MjLl/?eH%BaJl*]Hg3:0ba]_3&Q#.(g-ss?f.8fB=8L)TZZUQ*XM0R4hXqujhtC-ESkB0l&Es-Xg2RK2"g@TM(cp$Q6TZO-[UF5fPNtXMCa\j%[Mk`CfE0lp573`8,@-3VPAu!aJF:^FpI[jMEg/#SSKkA,Z$EFY9_!Z8I>I6WJ>O9nmook#o)('X7f$6FC/5RN"0/hrPP*t.8`kB[%.W#LaHroRc!\Jf/8qIN!V]_/`7UDZgNck:OnpK#R_c'4$NRlLK/^TF=j3s_,'Zl^CCl,d[^<]sbX_l9#+73ss''O0a5-b@W$f"]k%e\9jAca__LZ=!e,.!YW8pEiuD]fTutC-WA<N*ojA@<uPgoJsn(>W.5c5VF`S^@'2A]2h0/?XBVW/).<=lCk>,4.meL])(*h#'sDX%.SmpWKRrt$k-7t$,&&!hg#KKP$a)sL9'as+;/)&Tg"fR6J;-`_I=Xu`Eapct3ZGF;fE9)$oPO>KP61^.m@$/^(3b5DA"\\G_jt9^%d&8_q38FS-&We`RJZ)#hSi>(A!a:u8RDS,aNW;5rWJ"",>nb0"D$'?@RQo>Qq>uJg_4/g.n\HZ)NQms0Rs62Wg\O6%`L.UBdQ7e6%T_YXeEMUW6`PC%g#3lRAO)A\i_cSjh-@G]i%R@QbX)sKY>/-\9SKOS^3U<aPmGUbfOPDd#V&ic:MV7BPS(dJ5jkV_,D4`n8%S^fC%DBHlp8U\MA.cPu7U@GWVEO-)*kG@^Y4\TM,brArcM[d8o3G,G<lKV3f>eV3Lpo4MlO/LHCr9uFNIJ:k7>2f%TEb0<7\p&=<\hPpF%<F_CPm\L[+nMBLCcdJqR_Vo=ck3CWH4eK9E=C06Y4N;fL027,_/JYaonhMtM28+,W4]Mu/Y3tc6QM0bSpo4M:C;o#@9r1pu\beAA%.]&W\elU0$n`q<b%%=?!'YCmSr0juB+mZ`nm_8tJ8M":kFmq2EI*5[YWt-k+?QabK7;VC@fmQbpHi@dGkEadgMlY9Sia=p>&a^tn%hd;2goh4!7mW\*\F8P96h=>==m](WGZZ^>!9ef'sBO)nl=$&K_4Z]Li#DqH^j]-:#=6GO(,.%Q<[?p9djji$g*dP$H_#E&Wc1Q_I%DW,J7d]OXOKDT/$`](n,l7dFpq1YpeR^gpAlI8LsG[G06h_9iB4kkmuL!/(lCZ4#L1p:_<Rqk)]_&7X#_u-jJ(--0(=Qo`G6Z+tJ%(k!WF)?gOFK,cu!%_!T"5Id?EkmfJOn,"T]NEGYB*CLLrH3I#e@Rdu/X=(Fel4H)1fc96^nDQhLbl?pX9Qo-Z:rf8tCCHL19a.0V%JZap7&R1ou=A3(jJDt5^K11@]0Y,f@!W)<N!49>WgB4QYPm<l;:E%6A4l5s*c^l$$C0qKnJ*fZ81tC7.PP;(rXTR;5g-Y=s"u`j?%^U^QLb(##MNNIc/*Zj[!Y)=Bl5q;u;T"o%-?iq+f-ILVBD$O#q!JSZg*J(c6/PmFLfE-bOjMm4m@6@2g*UCh5M6$/#MD[)4r/!2g%@b,[>k6oY&QQ*5s*nN%Uei^<<B!(NPAhBr,)tI<]eO=\;G='9rjFToeqG`(AmfX;Y;-)6BlK'mtnTgM9*-!6P6b,uK7&f[`?D$Le%a?4?)Ppd-jFV,dc+!$Ac\kTM>6K!d,:UqHqQOOZ0Ru<[I>mR(#EdY@k,sn@PksA$$*?J5_\eelp959Q,b0aJqRQn:gcGS!0CFF8%%Hm!rH5SsnC%6EuOFTggQ@68b9,G:(beXJVr\eW$[A[^obe:]]a7OcpCaG99nTdRt6Y]Qd(HR2(`c.n/9?`s'CEf9H.`Qr;Qpg>ZE%,G[!@I9GU'(&sFe\'8tQre8Zg^&T/sSe7A'\n$28]?\@c^cs*dKS.gpE%thT$UaU</F4oTi[F4q`8]X_J*rjR99UkWanClTMG'Gn%`uZYt9Qt<np0pZnSe8"dZ(a>=M^u&+VWT*b1n1)ZF(q]\TT1))pB;>j`bQl,H'qX^/s=cgXIa:VTZg:a/'jP\>C8+K@,&Tgnt]'m%cI&cr1[$WI<pC.'V,de;LR-`N40*WDRP/%eS7-*W)id;'K\dn6A;:F<9<B/%K:R3Vg8KU-GZ<82rX^+ih1Xm?I$WPC%&b.'aLS=*%#!(l-H?@=IX6\DkTfi?+:RLnScD-qs^4Ia+:pJFGFNC/^;Y8)>1Y]'3O)37VG%,"54))Cj@Eb$@ViUWc5*Dj&ZJfB)&gf8r=)k9P%\L[0tlP_ho11juD]ML,7PLpYV+g%BWD.Osc3=6d7P^EK6B)*MfbS!-sia_E+HB@+FN^XWt1/c?7P4.bi`"I1dNT00^>YL4(McG<^%U5`ZgNYu\EZ!0(heV%i6\gW'CZSSf4P8[^Di[4i5g2#!PK(6gM;$-08kLOL4ddXLNkmStgDV4j/Ju5sDcD,+]l/i&*enj(qju78+%/Yr!`5K0N\X5uE1$6W?M](-"?n'#Y*1#J72/M0">b5?8oF,T?"kfd^SQ_^"rU+K%nRb=EeQ71TS7#Vf2@o/GJfB?=pNI?@<Co<%@%Q9uJ8>&1spZ&&o*G"`:JX^d&po1XN<Xo(.R]Zc7G$VZf,C@423Vagbp?tnnNR.g>\WDfo0]VZ9W`c=%i38);&G\>M''[MGgcO24?%<koF^MqIT%1pL&-PqT#F@65@6FA^$S<ben-+^*5mA';,cgK#@KO^IE5'^_-_MZGLY20:Rs#u#?>$^_GD"[UTkZ\R/YpcK[q7qhu+%T\jlJYB!ttX"aT^@<O,)b7Ir<^8(VV\^gIO4LQB[b>Yl@_'H?8P5!4>%0WYYR=*"U1qplm_jJE/hK#01F7QLJmQJ;`?n2Z"^d>t[%<cKX!iEhJDDj4B%'#ZOTpq[Xp\A;5f`D:+fB&2n.V,NS0gLa!HEX=-hhK6cW'Yg\q'^#WO\XA4@J_R!Q6V@%d-t\FrIl4SRkFq]6%,WJQ^h"%3(%BTGZ;bip3h^pj]e!Y'5cDS-rNd78XB'q&.5m"10U@U$'R$P$K%`Bu,K4nc=f@W[#c4h*N%E;3_[O-(8;#8BU8uigB%[pXNB#PkE[KkRBB?n_3JfWRkL8&@0k)kUOt8:774Emm/a7RLC2^7:U>i50LE'['jc);UqJCpZs_O)>"jgB%*OcB<(,SHo$3]<_Ob%A8HX*p348*!/N1,a[3X]fZr%#`3MY!bX-aaB&YA1STf4mSWIjk"rc$?_b0Bf[E^D*J;itNf-b[8P,23tZmtA'mqfZXF;FJF0CJX:%k_ra&-C594$aV.#nX+*50$eQtcb1F\7+)ehX#4nPc`]4QcjQC;Wq"_[qsibA@&Jm?kJNi.<sTU_U8dXi@CIg>o9uSAnCuAA%'##4%c4'<I?b789X)ZP-b8R!).@VAM8TP^"VYRcV7GG5SBK'6LRa6,3#1AL-/K1/&0_olH6f'EKjP+_&#A:.T>X<te'$Ed;,rA&(X=pXO%2k!0>9)!8:=u7R9%fIqsd;E!kp56+hfe/g15fTZ[0e,W`RB:ahm;]QjBPm"\'Vjl5(Y$8u<4:0Wpi+ilWQTSI_a8^QmVg@<Z<o0)%,BdfkQMAV[0B>H4mRGdjdEFe5^$^?R1,DVuhm\(uBf'e2*:d]M>l0@/NfCkVZ@8+r!eG^GR:)qXGLq<129-DoZT:9S2+3ueR.[fT%KkdLZ/JtqcL3JQrpNGlDaGqhohkM'TrN6<2?nlSU3jYGBgA4/%*%Z3?!qh],jiuo#fU^WYQAZQk><KX/l326YH#IrjljIr_iS=<M%n:o6&E8JH&lfX,D]qMP]KIu.kZ6M^!%HmH!/?g/:3;S!H(GagUgH;<L_lu!b#d7=akpR^ODdFT(1);QHE/>u[FaGae&"RuD8.Uh8%lABf/.QH-c,K5B<B28:cVH&26T(LfYoi.FN[1oOg[DR/K)jKteWlnUm;(mi!>1CD@4db#fLO?Dp,cs4LE(bqVCL60#&*CRt$S.Q-%gQO&BIlku9]^E4^Y'r:rq6JB4%<OLN&Rs'(Op=eYA@n*-UEm;rGl+V`c>5h+;D`!nq,W3DQ\h(];EC$^d_^(J7JL?;!GQ9LT?*mK%$[@CRc<P:"e7ZtSefrd<9<4`W"]ePhk?L<N<X^Q_6g%]?Vd"LRWeN.e=@&ic$SGRLVZO9-T[S&o03:O(>X>8f$SGLJB+#DTd+MG-%/m(L(>X>9k(0m_kcFJPP<5\V!)ER$g3pagd:dZ%>XJ!I-<_u.r@A7iYFEj/+@Pr8I%E\<d5\&8:gj7\TO6c-_YR8[&cNm/2RGRe+%ijNk(TY9A*SE!lX:M%"`/m_IMoe"?-Tte_A,!+6jfh64t``M'+hb3C&:8G%/Y0(@*VqJ5.@PGl7L7D,H=Q=Jd/H!]]R;,4H/*FR+%0C#DfSr%?bi3>Yk9BDpA)U&4.AntM=]Pu8gG?aYM<_PT1IoAVo@4MWW@NIF[]N1>$RksKrIYb'Y5;\;Fh."uqCU)XR>=%E6qnL>l%cgf/>W3W$A\JDe/YSG+%=sCgCXQqJq%7+8C)=pn&A_ibo$Po2;<^Xk<6H!qca3$o52G75gGM_>`TrSrNT(\&=,#e6tkFeqOQ:0mK%`^LMQU:-A)RHZT)8Sf#P`l);!5#'J-C6\kE>5l7E`kJZa?^9cU%d[op*)8%_a63Ba!mgc1\lD\iAQ?cp515Tpp8)JYe"]h\Pib;H%k<8;?.Jl9t.dPmc8*]k-h0cBg3kh<L%WPe!]@XDhe\*<Lg_HEqfQQEJ'Ela,iAD"0,+1k(BjCX>P%$$Y1Q,,SIOX=o'XN6*K#c/q%M;O7I\'YL`5HSArnT!o#]&_<j]58@%AW(FHkd$t,>r:U&`Pjl6O6h#DYRf<5Z8\-(FdVOK4<l%IHs#90]F+fOXf1"@<TCFq9b&Og%KlT'kdN[>)A+Rj!rA;a4f$7Rqh8s*?`99l'2/DS_-"h7:G*0tQQ'Rp6Nc'*$,82_oG17@!T%I)_W\mhS37:Qb?REZZdM?r)1gaO(%;'>%8FmLWQbWCW0*KMA.]Tff"4DF`:FN:Gn>4+ae15:nE?4EILX#M4'`d+Cn&TFe01SJ>`Nst,d$Y<ig:eEA&`LJFES2)kdR9e[2%E[cmP7;;bS*CoYKM('[5grta`k&eld)-+]9B1o-S:2MdB3Xatfg+YKl4<n>lha^&g?@HR&7`K1eL\EP\Y8J45k:&\7g0u"SXa)d*%Onsup$rin1An69q#iiABhR,=u`\9ZKoO;C+%_Etn1K1MOCTQ<7ds)1ba(MHO8NaS@4#>95DID=BFgatAa##VikH*L2?8"Z-#^Vb3%>Q6HBo<`YV[<rC$?#Zt_FK;J6Z?==Q?<=W.hXrU&5!#Lq4DbYW("_-85`LrnD6"_0]Wl<W7n(2[f^HmZGBS76I/&+QSDi]AC.6pX%lf".Vrg;;`3#<H:;*>oE>qB%[m\(]Io+'<IlJ]*0=^McMjJ_5+iEVr[\tXL1qqY)LXG>8qA7Si][[MM%/7W`9EN?6tZfK<PleriH%@Q)CjO@`SkJ^1]19QV$mc[-l+,DNnMQ<s8QcL$eiSaPAd;dQZpKY/<W+&7o(k'%"_]YY'TQmU/IfN:8t%/7)ENBQN[.A9fBU0FEr%BZK_(A(o\E#N!piB8`TK-t.0L`$#kp*n1`U@]>55P.*!EmQnY8eZDtq>j[o\)HNFO4I;8c7cT<]b<G"hqs]k5%2ej"qJ7&$fdlK'%@5YF_@aNHlC'_N*pd3`5C"[C1L<ba="Eo,1>5lS$BoOg\O=>qg^U]*Io+Pl^MU]7<<2;_XXKWl`Fgel=eE<Hh<2@Ocq.9.f\3;EZ%e]X[%WMlFrfM0P80pcp0O4\F.k$kLlG^0_)EF5>Tr>&9BLPMaQgLR,;FTVgl4K!r0*>_1ih/02GL0JgkO(Bc1cAQu$d:4/lk>F:K%B0i_u'Md1N<Xe`7]VS7Mgi)A@Mj;045(dOFV/S%_Dcfjc*-kk_95*N<0J#Y`C9%f`_#9,Z:fh;^+Q;F=nFlD)_oa%!L+0R2">Wr[%ff[8nnJJ,d0g9.#bMn+Z20p\io<a22Y]TuHr+M,9]'e*9EO,rtB8KH/5s+NUTGaCQEb_,@3#bU\cb)KUB?H:pD5.Z3(2LWL7<q%0%*AkssnPV)bH<8sb:E/Dj:nr:iH4-RsVeR6[gb+HXcXJi<ICNT1c3U=pFnt+Qq#[ee`=[IB'h-)Dm'^p2:tMVK$mf;:q9m`E?*W.t%6\QPNbnnumhc/s^m@N&49lIh@g+RWi`OSt#NKa'$iE0r$TQ$k'LT)%^G91,<U"HKm-ZhV5F_CKJBbdTB\2ZGhZYroRQO5cQfWC'0%e.sG[T'b-(5kX=1"]?/u2nNP.Q;b'CB%e;>okNO7iB4iiAa`m0"+'?"hM\^E'2X+2*ET5qLdnObiWg6tT4fP-D"f(7WElgJ)><^V%[H-1fo7D`=6i#-:U:F#Uk(f0:LoS&mfFj3u6S1=c\TckMCQ;d7=o"_1NMu4;fRIi=)XIBRjjl3aXGQm9<]6!O\(bt8?eSG!fhZ@j%pgoTR>Oj%""%r2*\bU;8(X4S#:Qi%nSYn$ogdBC'XbKe2^%JK>kOKU4j1[^4UWhjY:V15t(-+e.G'pIU^:>7Bib<dHc5Q1UJi`IA%cA5Pr]5<u0X=kg-kN,obGBGrsNm@E#=A?8P*l^i1S^fj<.LW^j24\/h[$K#)q(R_.dokc8knuj3<;o<DS_6%i/_s#K+'k5<I4MLu%ZccOU[[PKV,KU!_#k;"kk;]YM=Z)c#3fW7TlVc8T<jd%X.jMg3VR+FO(nY`WMJ>3,RZWk9ds68be^DuiC1CO$S^jb(En,84cH$f(%FZ#^)9%n%QWiG<bC?akUbZVNGcAI*N?WL9'B@R`"iE^"PSQ.X/=#7.(2;Ko7[U:t`1W<Bp:$8LuB'F%kmkn.h<7=u=Su16,'i`Xb%)'%\I$*1#%ZW\p])-^r8S\>2,94pJ9rG=E_'qako7Xe]=Vf>73>-[fT^TFB>,)4?V=\D`C=k1sR<c\/MRa,Y5=u:+5PQFb+:&sh,%86IYh]_aJ[E!\7h$cLQcYVjl\l.:Vb*it&Z\ld4&FjACRWm7ZO3j$[O]'r0:f9:(E6AdRV[cbN<"W#r_TKEB+/go$b1ro-b3a7iM%G1o##jk9MJ;)7V.3:RO\GXY2n@=#76%WmlIB^]1PQZ5K*Z1^:>27`pKh+)NX0["a<q4P?,eZA"r\[1-'j#&+VHH_r+6cSnCl!s/&%8U2onGBk^7F4_VoFart&a4tB/S.5e[/Ubk!@N!/B*cktZ;4K`3DR!BAdekhDjsP^a*d"mdi_f:1-DW_]rKkj@)P=.5cJg7%jf/%*%]s>]q5_I8K/7!J^]GJKK8OAJU!qoi54R][A>K(+IiHRDQ]t_RX.de%+p7"%S<i#h*Q778?()cB>BR<=Z5@I4"!.o%JHp&)<c04BH%Sdf8?h?2kS;9tc>h[S+<h/912.X+6;4RRrEg"9OOGhNGb?MPFCH79!k@X9$("nt1RZ\Zf2g"D)Vq4._YHI5aFrO/"tf9uTD"[/Bk%DD&#uGX+"[mD.CJH[dLfFB3E7?ErB"0XmerFdDO(1L0+TCe=FKmp]0IFPa&c&-:0^d(FuLr>'EXYOn.WKBai9d+q'#b3`l98AZj:%d+?"6lib5\Of=H$GIg$7p2nZCHfa;Em]uG7P4k."V,jX:5@3V8h(#p/O!suR2E5ocB.U,dn/rd9JliaCr-F&5@^"Uu6AFkLf?+eg%CA<]#m]>\(+.SY<Is&Wa.aG/>5N0md1qrSgG?X+'obht3WK5m,MLTVDhFd'rN+^ot0e.6MdUL8FrSiJlT>u`Jr9f5"Y>7$29e+="%&>-f;Rgg=&"I.JAQF3s.B+K;AXHhAk)[fA,D(6W/:g!VmUK+f'r]+&U+)fg`a$!MNca&84\/0D@c16RrJ;sMKi@_<UEO(?TVE5=]%m8cYL\erG_L(OeN]`2PLbOXFIqZk:q>/\ogn6F/^MqO=Lfobj^H.l#bfB7;9IfIT*];8QbHV.4`.:R$@Gj`;'GpO/N3`"[no1HVM%VX9"?Hc,1n0Jm;T!%Et_D;G?3;D`t-6R.gneFh%(:P%JW.53TLPdb=cC[qDQp),5=;dat_]L,,TbI#?9`PtS+:W;<7*_h@"8t0:W%hq,B,T7q*FSFh'7i9u_R<;45g6h48Xj8*.`iG)HelkH4/g<7IR<l>=d.l3A^MK0D$\ke4URR`d$ntZ!,/3d1"JoI5tSsG8]:8q3O%S\[50`gAcX5i5*eRU%\>_fdj(5O%LPN<b/#fcU3Z]unt"U1C3X$gi'hm>CE.:L@KgYeN*%/&S]prF;[<h3]cj:2C]L%.b:a3GeOA%0f.08Vdo-=3?:q+Bpp]J9_+m6$J&INQFd*tmFe#I[_?6UR\n<cijp<rH<-Jp_#&J2CE&r2%=GaY>s6u,/PodS&U7\jE6*m2B%%OZ%<_`S[g&[HrTYsnMbOD\&m=A:jSuT6[2&or$#E&;.^g>9*'r`M`O$?K%c[0K;B50pgs'3asF3RXEWF2:(UMdB'[KnoIe7q9hei.5A%SFXT%.rT(4D%c"`6hAWjX)F!1mN6N@bthpBZT?pO%,$smrA^S5o8_<e>@EHu>rp/9?@$CPL6?7\Q!FmN6RJeH^#kT&KJ3%@>%h]:%F&gp\>H8aDdVO,@)P:p48Y/D0mF&;rgJ_EhbGH4NVRb=lV2fH*[)fQZ4I$!%5O`8NI<!o;<?Tr<cZ>%Dlf`$-=Q,IY<\]kaXZ.t@%HHO&VrR<eI`@<BB[skH\@$Ls+m<SO*fP>%%cYZ'4f<k;(ca@(-ZOGMaq^TCX+$p>mJ6qQ\>\>Y8RJe`i0DR?OVNH%2A3PQB>-BrI%frKg@-YBEJ,MT)J(JY0m-4=SFFgK`<Y2CI6p(+d`&i?],c983pSd]&[5YuTQl2lf4F>Iq6l8An1kcKq?>tOt>:07%WK=U0+/QZHD%(;/n;Z/c3jG"B``cT1J+N>p1[1YMYZ9*$pL)=>+KrP%Gm5hE>Ik4rXgRBh6[)d/R_gd^*qRIT.%rQ;])Y]+6XL]8tn1"Z#F]]58Z%-,l%JUfbdJZak*bisP6nWrTh&L\e@*(9[f3=p$ba<"6GlQ8qgg)"fIa"mE>uOBDM><WTeXTkr"E?Dn4Xg=4C!!'9M"[H#Wn-gI,o%.P+U(kd:WATuP6@*/gGfB/rKU>Qs?!#1.7J9_"MiPpq%MGUVH&:Lm]!:d2M?Z;u<#T6"%A<JU/@]GlhV%coK[jo<u,HoO4agCs'=%+3I+KicG7Y.LtQ-0g?Z$[j!ldD8'-Mr6!n:b%Hu>!2OA/B=lgl`lk]^N2QMdVjK&[Y+Jn2B6gN7_Ne@VHT'AlcLnL_g@k*LD,47'%CoBeJolI4G1WRVP/4Ws]Z_9LPlfXtUEWtY&WRS1(CmpRK?_6THI&`eli#uWDe8[J"DkTe+?_?XsPR-l[I\rYc^HU8qH"]t9="\Nr%T.M7f2uuE1f?\_-4qHb295T4!CiXg$q#]Z6:'Y5'!hT.V3M,R"XM$G/?i""lB1HU)-2mgJ596pY:A+MW'<"UfqUpc1M-sUI:O,(S%cYXKjC<lKV:!L<)\UMi;R*OahosoO+?C^^o/Tn4gm<17t#3&aI]"kk*c3l,gUqF6!g]c$sF"0t"$mFb?;3dNdWIC_Uf3b09kIaQB%Ws2UDY+NVUkom?B=-:)X\UKjp"mW(9WjQ*+mQl9^ZV,,Fr4.9JFapB3rNpT5X4?09S]A5/;`sElj'07c6%>ol1=[B@F8[Y%\[j(r%0=u)7SEo@NZ.54orVa9UcHl)YcfJ=#>X)80A\C;q=#%)3\UL])CaJ9@g$t;slF2rJpfoalGWUt)M21>/41\L4Y$]9?<54-YhCsG^%TDMK5[MJ!akP@1Q>K#,\0X"a#\UG=RV*!4G\Z.Ki@?-Y/=mfNZk:fE,XC(C#5F'rgKc7]cO3b+XHI9=Uhjs(Gd>Q&Od2+gpcaakh%4]`E^qYduBT%##<J$,F8WI=hY($GE63hGVlmFVckolK!R"PdA'\UMiQG!`Iqch16,ntq\e4P0&2o?,%tos:oSoMiTUllO(n3LoAI%I+nMech2>h%"3]WSEo?C&8UBiIrhcb*@]+0IZEsN!pBD?mfulLMG'Q,[s/>QRrePp3(Zm<o2o;aHENlqrK\rnf?`,1W#9j)4k*BW%\JVH7E^6&fL%u`2>%3i:0\a^ogipu,g3$Z<FP1nW/6asaYuLMPR)@W5W;Y",^P<XFB(\D#>UI6YTX+E)[s82j<.qC@49]A5OkBAQ%1g/"=ZKAQOU*M)&g?s`:'oN4c>KOKu?Js;+alc631m>A/j_Si/k\9X.II1P`>SG'Af_WL$3ks@XgH[M0p`;>.g[aMeP&Acu>++hs%mA'1LG4Bi)2fcHekMr2h7XTUWhY=bKol$k8o@[u])Vf&78tk1p"93L(W/(*'a.^Pj<!bC)[M:+!\[F\b8$N''q7.;hXEACm`H%[D%S\q)E6&k17L1Ne6b1G6g?`N:)M;i)2[+@ka30?9`jM^2OaAk/g(L6Y(i_r^#7hK>+H+6#j%UZSOi+o^Jo'iOi3lkVi!DD!_d2Sf^%jYkRc-6K-)>jP@s1e<ia\A%TS1+b_J6;9QR%Q`;UOQ7CtmGcI"M---E^;.24O/Eng2k*$(@@4c2]=U$1Bk'#]FS6L+gt`=mf/L$_%rF2GVW1InA2,4WZ\ZPIF81b<?CjN6P1:=5;,ShO8f-HqUes,#a$jnttO__L,N58OdY<HlU^0]0*3'm/<7;Z_,pJLlQWO0odmlf6V%LXlCkrNgI5r4EZZA$-BcnUo"OCq>+"LeYI-@W(?k=LfqG>Z?rcr>%Rk'7Khi787sKGg)$(6`<>I)kVt2=M<J*2L/d[<"9.Fim.)9%8\FV_h_4Yu=<,sMXE;1+Ea7u14-F7tGJdZZqMBa3hh8ZT&\&Xfc@aMgo&s[KMO/1INSiC.P9MX!Vh,&o2POMdKRV!tn5lF<f0AJ7%+[WoW9]Ro,Phb'OIhQ&&V_dc>[I@&GX0!fVmk[+q@;bk;?J*45Hi\Pm'POP6_YSUsia)4D<.Elei*F%3kq5@^:HmHcM]a(?0+b><%eg:"@OKNm%2;1n\7._;8Gn,:];<P`%E)=,&L``O1.JT@IIE1*G!R`dtaB'P5W'-0Y'0E?@WYsMY@^?.a`EYi'P>8]RJ?KrAI!iSJ%I#5VdDEEnTEBI[g@LlorG2E!hU8q#T?dSI60V)8Odu4nf>];LB-2NTd-(G@W(A>8m9tc]6j%2opSnlWtA#Tu(rP_l&H"B-Z])L]o%NQHY5Ae.`iI<^se&2Gop*MQ]Qa2T$_hhS+_0Gr=e_V*c$RjMHui2lh##(EH`PskHC!+Nf,,2J+Hj%15K]e>HqG:n08!p0DUJps.O%]jeBF<.\#+IS,"Wcim4VBK[-(a2]U2<_9[pBG-BpD9]4Thhei#rMR[6a+Oqp\%V2G6hE)JWncGQ_cYXX=<@-!(He\"]`):Ycl!hR%$G]oj?uk$2:AX1B)4^4/1+qafjdB)_`(_cl%bN\.)^e:i<;KAqA3,@u6P'bK=jYV?1^UE6[m.r]KVKXu46Z#%"KoboJNqVse9lWK%)`)dU-i,!m95KTphFQV>@:o1"jT*sP>iZ@AbThuoDAAl]E]pa)bkCp.rlHoIK.PD+>Mn%=i6qX>mnMEf=IO?Z/)VJ1bp5,Gem'=/%+:5tKfU0cm`\thEb]%n&T7-)SL7G7h@0sm:m^)YsSo63C.TL%L7Rk&\7V%f5NrQ2RjiH1'-$_hcH*s<Wr!g6E$pC,_PJ*I$,0ua4%h]M8%7I`@K1A1sF&q+KE:N,AK!Opo=89;F#Q,dTBVq3PRFCJ8iZ*ZS)_bC*_6pjl5'u0CY7r@!/bLpgc%D@BUV&eF6eBCf<GJjZ)%V]4O&.b@nJF1?7&`'k@mMXqoSjs2l/?hN[tWlo""`]-S,>_Yt7`&p`kpSdN)TDU`s!=SBa&(fe"nuUT9^7FZ`:`bPffM2q\GI''X%a$[UY<j'be2r.F,GT,r7,C!a;+hgc147-Mu`'Y'e;.=.=nCVr1W*QIN-K&nSk',*JY?QAP6ego&XGC:pG.6F*r&A!_IspXpVq'*T%&GXK!'Qq*09,EN.L!'\l*pg=oF!tp-^gWg7LA39;D!ti21[A`ef"XtnZ&NMA=TL'ZW4?mRIFtNVMpf:kCL^GWfU7@f)*aqK^3XT[%%m>!:cM\<'G$0TU\cI>\?h<8dF>D'&<'M\RjhC;ZWtUs['^nr^Tj0t5IB7@3kc(%9)R$c4jW(tMn>3B"k+T^Ar]57(`GPbXfWFJ!%24JBHle1**DsUp'.]Z0Pn'a+2ja(XIm]?>tS%q6s'i[CnARbE-2h9EKmL3>a"m0/s@RjWSGj%iOS,[MSqT=S:iKI1NXh#n',G`(<%NcZ<0ZeXd1Tie)bdTHPBd#HThXE2.63-`4(6\kLOE4:V*J0bP4'^mf5GA\/sesUe3^!#QgZeFZ;id>UFL3bdo*X\i!rReqMF?4F]%V0f:pcgOhIX>$^<5?;<pV`4M-X&#".1)TtJ:N3kC,5Mi+`nVj;nDW@_6^l-mYOaSUUuJh"hMtKH-dMrMRCDk+m)SB]B6EKZK*\E9%'mD!9%h!Dr)h%J@3d?RP.JVlLU>*n/9Y]"2FK6EV=[@;hmXhe9[*qEi+*aQIhAV";oClHBE=B=DW$8C&HBmhnca)p`=nd%,HJNGf%m[I<1'6TT,+T9K_2h,"8Ko8_c1QiasIBTI[<8C#([g\Yf\H[<FI@#iFR<%"D">!ZFW=]mcoMXq`-P7]TCFt-lrQta=/nWtQ<+n<S%e;n0gGNfs1b#4IRMe!.1p'>o4)ljfOe1fhKcNnOij]+r"=/sZe&48%'02"3ODU7X8MKAGI(W6#g9:_$'7,nAU.eo6jVJ&D,7+6u?%:qc0m!>&&sbB6Xb];OuhZgY2!ZKE\g]1q`M\<^m>0YjO5TfS`b$uP6QWEHP4`B0R\,pm3#nr",,a<J*`Wt.M8LlL+XrJ_#%j35-]%4;;T8U0CT4T<)6JIk?u8\+htqHSUEsJp3e?f<C`*j,NX@+/(98L9XRP@dMHIYr%3]Z`@u4>AUe+igF^.DpTD<RJ[FbKFbgb;BnsT%Wsr,e^Wr/';lbG@b.=^LgDp"\l*"$2RWr4X`gJ4s>'V#Dk+?lNj/G(iE!BIiot-npqJ,#;AEPIVW5"QWRo#6(3$:Hcbt:^g)20Oj%O[$W750BD7n(it&2JDGXcc\Y(<@7lPho[$im8=u*dg*t;DZ/Oq`'j"VG:J5%438-,U<OX&\t8dMn=^rJOd'PT2m5EDr`BEt9j0kC%HLT4F&>fR:JKJ&[]KB4=.$mgUnGd58*.u0\+h0bF[1Egb+_6VSI%($20+j^S2iJ$X,9Qk"EHWS5oh]qPi4"XV\r!(rFFQOLVp^fB%6:-/3Nf4NUdKA4<7>h&61Esp9O%3\`"T+b^5kAL`67S;]f5@V<nJ:Bo<(Z!C#",0!h;ZVM\+Du:.)'Cai2Pilp4:MuI!HPV%rW0D%q'0J-h_L.kV]P]Ml_W>fI_Jj^e.$likQWH?=5IEPMc$M7Qe/[Qr,&K]lekRB\*.jbYP2tC0O#oS485G,7_i-[,]WhQmopdG,g*1.%b]G=AC!Xf[LinVZrU6B./UmDf<1,qG.NrH6DP#ao2R`VG3lqEBd_!tTpn2MEE,0@M[+5a?m->.qC<\d6C.lcRr74I\b][rGs)/p)%BiG?#QISRm=Kd<:\E]e2?'H%G/>K'I5I2ifkAi_qaXW*MQ+[^gm^`AZRb"`rLYNi(nbf)MNqL!C%mPO@=!-5<YN?&"nLm*kV*4DF%Gn3O?;BO2frc[[]p;gNcTl0D,5GcNpJLXW;*oFEccgRH3(+"7e(Cf!lhcF!PH[oJ*#s>#_J?4@7(0DGe.sCD4T5u+>o,k2k,gnDO%qDu6Ob-%@gaFZ4<POn<(f9#&nIX(1>9Hil^'P&,(iGY[DTT`@2if/5k<<V;M.Qrpin,4J2XFn4K\hB?K*#^^1n[8k)MWbXor[m'E%p=Q3N->IN>V&sai;Vl_%/MlWC,l%OiPAmV7hO;f6(U^ef*;VL@^CWMENEe&`4$<PNn2pUdj3Tua)P6&J-^UHH`Nu4R#Fo`8$90>!%:g@4u,0)MF/&V#`]rOCeD*`GPNCqu9Gl4&J0M=+aOuN<'kIj/$atI!X,bOET`*PQKH!!.i'g62ZpZr6Hjmd'?X]*#'rBut2Dj2:Z%SX$&58qq>K`DJGgO*&-Y%E[k,-$S=pCJb?#n^@k-?e-Z@bC#GZ%\BpBJ%c%0>+WdQGR7<-Q-+6R=i\r//qd;=FDlOX:O-H6hNFD2%XmH1';:sfqNm'l*h4C^8!\PJM,Z!cOD/GTEp/:!M58tN#IZ:gKFntY7GN-Y?e+l24?P2I:QRgp?1\!llVHt(XW?!HThrh;mB!*&n%V!QRK5mIF"$>ObkWL@PF=]AIl0UCi>^,[Z_Y&:,6`Pk]^7:Q@0fiWAmX*Zpnl\#-rB6?g780H6iq:c[N[%5.Vml%lTC2K@oV3pY=%p#\2J5#i1SQP2Fc6_dnaFnKu8DMCGg(hNnGA_*IR7GFh8C.59`]7RB,(Fa-f@Pke-`h[,RMTT$1fVE$d9)=N`"#DADK7`RMIKu("%0du`%LT`N`]QZ)I;DJF[4`V@&Ji,mTfqdt,+D0EkjQGgO-7*.ud.4r(8]_g6U%^8j)1r!#0d^I'/5Ea8UMAT#Ubk>nlZ=2bOebmU%XbO>6:TcF;\oKtjj,Io'A')TiG3WQ$p_%Ggl4PndMcf7tC#G1&A@bRP?ApOnMn*AVQu;]DB%*<pXX;+!J#Zb'KZRZ.^NDaCO7H?4%_((#'=DYS70rd%2b)`ZEd>B7eBkRAWEe[5NiaO9?_E#s.U=t+L&Gq@qq#H"'J'W#X3O0LdTV66bUhO(Le)U*ud^G:)G)U#EZfacE%P0J82^Z5)aAZ9!H)bJ"eoLTXrH#"u+XeFN+B#LhlIa!3ZDeP1OgIlp1^.8u<=H)\bArDG,[kRM0LE(,aCZ_dK?0/E3TXrWnlGq`U%/m/*fe,LZ?nbqlXY5%V?BB4oA1=f*]r?oo)BXei+M2Q4NeYs#Y:c7uuIDR/-5Z(S1m5lDr>eF)&#be5LVjM(("Et2F'lG$op/V'C%OB7X;dMeI'D)tmCEoc2:aK;hGXEc]fh;]\2Vsh,ie!,1VQ["<k9<%ljL.at_[]'O97:dmI91k)K)s8BJX\KbsC7MD$dCJ#,4.E6F%](Z5+4jFb,T&@dkAe$/dhm+FAjk84]THn;m8TiQeKPC3ZneRaV4&g,YS!OMG&BXn\DPb,;iJX["Q:]1(co*==#j,Qt#"rC681#Wm%:q3ss'ST9s7&t/OV:f#S+Zq(-f_%e;=-Je%.!3bb5YXjgD#a,O@o1l0+pMLS1'RpEjZQ:0`h9P+*k4e`(mL`AG;1NaK/,:[09`^7%n=b>q+q4l6C>"!ralRcl=e42NGdBu`(_j8cK/Y4sK7^Eo8<`VD.#K,Ud%%"k0dpii^G*iIa#m`d$9&Q)PG_oQM0V@lc@RI9N%]Lb%h5T)Q&Pj'hnajA[G4XI($.e_&0i-eV?TZ8tH#:0/bgV'[1Gmg8bgSe5U3*K/R&Bt?LG=:.0i.f]&'dh_0i.f]O5saGML#&ZGgtse%C4m7NXm<#@a#r0%Sk6;mj`I$u(7U</E4d:c(%_&>nK?u_2s0?hi_fVU5;>t6,RVhT1astB/O8'dSE?g\B3!_FnNc;Q(R)/POu5"S%r?PlL^a$<\pJ#Y4*3KatUh&hHWZ:H[UpuJhi+9$S_$4UO1'U2;aTFFM)2!ORjZAioN'X0113f"G0dq:0hUBus.np?dBp:A""YfXf%9sdA2KeXtuZ1fq$)1t8W_Ve-\`h6uuetYf^O[Pn&Y#`J^RL9oSll"d'@OY!k4>Bm@2P$,8j`78dLE[eEFM,?g5MM`IO*ERk;*YN!%jYNci#:rR+0i.f]:V,,g$]X^h&k-lGIDe8H7m'/6rPq&!7m)#+8\ZuUrt/&lm0l.t4TC@bIQh<e*YV]K&G'9a7(/Jn$7k-*IP+k'%b'd)P9SU0ppni[tl"GAi=6K+<UjU=7c4oA\>s#*Si+"/UIZSjja)*:NF78GX(7M,=PQl_uUH@hOg]u-B8Grs/?gO#WSP@c42qK!q%ppQX!A)ju=-0KXRISlY!oC]@U@<O]TF6]k[\P;PI%S)_R!Qo%)Z``l]J<W'_o&_=?(BNLmE8/VL3(+K+n*POW?WRTC\K:cTd\1+k%\&%3RVbZ:hSb==LmHi0F<#s`dJ:p[H?_%m0)<539Urc`RP?)8dC6Ee:Ne">td8&X_hhPi`Bk@u.[ILqD3![*ep7CcpPdQ^`I@3gC%F@&O1fdk_K8%o`Z70t^7lBE\!(Ad%.3raFi/jXY%/3=_9Yi8^lZpmlU_u*->S]"0Zo@rr5`p.U4'+A`Tp$aXsF&&41)the6Damih%3a95A7nL/O>.^1(p.SS$7B^gE['+3Lgco8RIWT7?5>RmYUW-@dlb1?NBp5e>DI8CIb&\<'c?SBN2T*:IgGSI<pLEu>G^RA-]#^CR%,O'k@&;k;n.@OsOV'FfJjfY^P`d`SN%uP$KQMCZC%S/nJOjc#C+FW]!-=\l[/#`#QF-aa..okkIM]'s_MT&!FqI<rg:6S4g2kTO.%:!'$^XN=3I&+mD<Bh&u3GJL`<CUg'W\fG'qOZ"$c*:PKZ*=/sVnPXM'm]8<er<5:$.1J+Hgke7(:2,eMj%dE#nLt'i)0[i^>Q[43%S8kH7LF"k"S8kH7LMD0^%sRds\%[J8`+'AHi(BTbCat&`YRKJcfa6Q[T2:8dTK2%-_2e/Q"3_X,i_Qk'XBQQ7<e)WGd/:<ZiQR?C%%YZsZP7B\@;@JFAqMZ^Q2`i&>,mdCoJ1(+eiAUh&'Kir&e-V`EX1G&2JC4N^U%]eH%A<=n:Ga,>4[A64Sd^Um)5-U%:PM>G"=V51%!(o1p;CnV!mgN#&_2Y$nXoU)qc1V<;H@RAJg[cbBdK;V:ns-B^-p>?Zb4+hKblX-YC9e2&jR@4P5l%ipq=uCAGU_9:$Qj0km]>$k%ABY-a[A)*bfiYj)l<P#b.VJ:c#p*@WqlU5HJgXsHhD`7q,E$b@n7;.f':nE!HY$^AX(6ico#MC&\"^;on*e-5iYct/Rc%$ThtnaF%#bKteUdWi>;"f?VGRJ$5lRsQ/:=5lmY'FOFDC31UjfBFi<K**,(H1/(_3="hHV3dD^TpItcaJ8B":qUS_TD87i$!`i^@E9X4Ch:X%.IW_`Tdj4@Y(?RH8pch>0^F^)_QB-lmmY6hW6E>p-$[M(T]L[T"HW7c"%_pK",^*1-["&Kjt&&QPmkH;bun2LQb"Mg]S4Mb)Z4EL%4i+J0\j@&$`YrL=VPK2H3dT*T:\oa+:.9#RL#^!KaUZ".JgVSR]N9]?dQ805]k;pekJRUni;%EFWMGOKj;npr\G%t(Y`n8"SF?-o%`Kq6#R9\0%-$X*#@,8f6-?prPUTe=\KH9DR3i`q7Xj.4oFd+p(gu\sFq!Aj:1pc*`T;L)G";C<]`rPMVJo90#9GAjd@^iW&";u02%I^n@]T/KpKp80eODGYh$e]Fb78oqRKE74#6S\CUT.^UReddat650DsYbCO;',/#O*[eEG0,lj>nQs^<Mr&RWl_kaR\(g"k<ZA5<g%L!'))D?CJ9):*(Nl)?8Ki3]n'840>aF5Y_610^EuN'-q0l+-rm]@3Eq!:KQ0$f"9*ZjtBq*%To-Q%R>enQ4];bS9ipq;&=?4*=s%%VgB%anGE-(XDtap30?O"9\$(/P`%,Ep\CD_NU<#FD]+or8[a15N@c"G&dF';n7:=C4DQ$7fs0,YeqX>p-Y:lC>9kbQ^NOoeZ)rX9%l"!Fp?3Y4?3nY-LqZF5QSSSU)lt't<4!deUA8`2^Huf>'Lbl;n\-R#X/9Z4\'<1JXTO4NMDq5]:Z(0E^hZOWh\L4N"A[,4l/G.9.%WnO%qUl2jjZ2/<rK1Hf&ARf`I%kM#A'gcp>AO,M>Y&#ZW'-C>f\18MV#e$(AESbt()k2'"%(nUC3LF">k'u76%#0bdk)nPVNTKAH%5j@:2Cb003XE8HJNBM>%LQ>h;^,R)!Z-'Nr4F_MTh_7mODSM=UiY[kHCGX%:4^?=?!L19U2<XjnZdO\YaT.PHi(<C&p0@\+Guq6^%h#q$B8Qs/@"]0Mq-cj0<&YSar:ZT,Jh?$N"J1'#TdOP;i&+G8;/NWrs21MK)JC4Wtn5W"nG_2Bs;-e,[bN#c0-p>?ZId>m\!(mdk%6tWLW!`33X-g9\?-$,m_9)@K)'L;3.XuESRD4smO7_t;SM\UKnIQ^WS7SI`*KC7".Gmfo'l<D]U?/`miZ96qCb0=g2eSIUJ"&'MT%KdY\ZKib(.]>>6(,n2>0g_HE"?/L1\`EhF/T@2Lf4^0jqdU(2,\%Rg@RIb=q@\6F4`cuu@l/Jl8"S48K9,Df+-i@#B!Mt^ZRVatm%:X8J^#AEp7T"kD=!Qs9m(:^[KGsi:>$UBipYNs*XD0Rhn9]eW+$!#-%=@)Rc\Xh"]k0</MY/t/,_>R->*OEu^5)XVJ<,(P:F#t_T%A"T>U\D5@h^WK2^G3mASJ*2"GnEj7"I0*$]<uCE7$oC)/4!<Cjgg6VErN>8UMX;9`\c%@DedTA9go^]\FFtHLIWAs"USPXb(Jd`Y%Xo/)Ak#F5u168?\Dt4i:V+F8)_8`r;n;B%)48I-W:1\HA/utI8ab'2#J@4:kUb;2/OoAg]rZ`J:`pK/6rHL75%?Qb7aJ-G:VuMRn%MSsk%H2<SHlrD_SbgV'[_jU8u@\1jWO8(EZ2<(l$V9UfVpeXN%4Kp#)>H@1ka!D2rB_QsMZppUbl^7q#?1`/P6/`8c(3$*B0;fSu%jii<OG-(;7"^TD)8AE=pCCaSX#Zjdk9U-)'6(cX"#sdKi9=/Fqdo[Nt#$,rG$+&Lp]_T6OOl"_ZPCr`?f>0/+_G1re4r`ecC@:=s%j2\9G3N(,0'Y0Rn?-[.?9:5(u4.Xi40Zqc+qjl2Jmh:0s9$o:[m\TnNHXqh.E$FijPg]Mq;ZA]!oC&2(gOoHMAmY)*a#UO4n7R>C%YV!E]9+SB!FN2bkJggWBH$5JY0&M<YGf^SiPqiGOfpN),oN`R3[L)H">,B>,#e;jSD^mpL0?s(CIJLW\T)[\YGp_E6U.faOnt]<>%\/<2o&FOe4o]FA!QF+'MNt$CSO7Y*oZ]-><dY@9bqWPuD3Gg3l!1%jG?]2HW\Z?:kS?(\<"p/6Y1tI.',(-Haf7H$X&Kr?!g5l0K%o3tufVJ0WHIcCQUo]$_T.r=.eC41KOc\upf1KT:(3QqAf[.RC4hoe#s,E6B3CIqamSW<k9Vp1I5ObJ(YF4sMhOt:@+o5=OUC^om(%2C`DC;9#@uUUdYeZYNj?$H_NaLU@^fQfhOrY&%>=e?Q<]Vn+d4;2_j.6Cs"Eg;Js2&g&QWf`l*N@)"]=E]17jV`'.)/+0D'nX"i@%Q)dh4P[Z6g*QsMk,qnkq>c75:`:4\Z#.\`Yl/E(snKk6t175hqQ3C(R";F<A8"IW-<1!`fKFBH,Mo*_Z"74!M,RLK'+,a7hH>6TH%q.?Voc#6Q1&JTcXpsTpriblTtiAPdhF9W1,KKHS3J1B/t>P,A.G&(Op's'tO082IFo9AD:%m*Pn+_"_.S`GA'T;QdOEL7];(o_\Y%P3)XOlIBleqi,g!\``W@Y-k&)RX6giA#Y8s3eE0#HjRJu"RorThY2?.nO\LR"0B&*e8*XO4S%!T>d.KL[c"XoR5Oq,k:+6Qhe@B-%&)X8")i,D?PEH0CU,h@2R6"Ju^9cji^$Q7kT>$?_rF2d_fZ3(@+-ria5FJ")kG$>8OS/J[9l@uaqT+*0S]pJLJlVAQ$=Cn<`O.%K%<oCR2<V,q4ClgG],`4l_;9<mp*:22-T<6dYFe\ABiH3!9[$]pCVr@==rQ&7*n\3T0>?G6HHosVSkV\cET+^XBa^d^SFrY$b0)h@/%(2UH;]_58]q>[ZVY1#UDgD7JSRp90ESZNK@Tht>:T^?4%`YCmm3<,IP&B4KKrI<stOApm#q8tW1WSC`S6LaNG"l^%>g'HGkNuu%1%l(+35Z5%rP.":(`39)g,&#*'-N+&epnVbe-Df#7u#64P/g1ILPjJCZ#0<<s^`p+JtFIe6DGsFOEqrmc[2ZW.Y/ulCrb)J[ec7s9D%c8Feuge,N>ZuBO%B'&mL<7=!IquZ*R(I7uAV75<h;@`#WhR/T?//F0jnbqW;&kpQi`TPf`+UMpk)i'?DG33#f`TCP<E>fa+fo'^F%`r@Cc1Z&-&&h<0WV`JCih.$DM.O0nr6'M7YX"/%QC1@@&ha2q3Lq;<>p,@N7a")]$SrpKbWq!ifDp;<)4B08pO8Ce?SWg?YMpHl$%g2cd2?biT(!8F+8F;5%)G)j-]LN=WP2.Q$W$-;&]P7WK)/C.af.253JT6'UFPDcH>s1[`WXoG>3m#'"NAYr%e26rP6Z'uigT+Xfi%SU.nNqld$0H[Zh3^D1sFWOT!'>TS2knU-Ub*O9X-?5r"u*bBO"-dQ<6V<jW'WJQn\9G&p=iu6R=gEk9NOP!.j(VO?'I.K)jKl.36%N[tBV%"Hl^p<`#-hX&YUHT_pGj?b\q^KMXO8q`IMdpNl=GS$;q5S1E4<_nE]EJV>L*ZgBs(7P\i&Eb&mYp_Rs@Ei9gmj=Vd4=-jn%C#j9Uq;0289PM7%U#!.mTGtrCO=OS#B6(ua]mZ\?SQsQJr:JnGjHcXEgVN4k0Qf0NSNc8N!XG=u8iB/pj$,J4p-+CVG)C>>45De'%Uo(c5h9jfc3>@DL<%GV%_Z0uBTU=_eJf2q]98m11N]*g_I2..okVW)0_SH42$rEf_;r'2'%0ND#6_eRIji<Zoq>"['Nc4;Vg.QfH%pC"BcVal+>`:MB@qsEpo',j;=Y@nj!ouH^hF"C]FhA4b4V9K0k]giKc`0j!fZGE_0r4[?e!1*Y.3HP$:D.BTt^uUaBY]?W"2D2[S%9VtTq@XJr1cTQ37`9iWWDU[?2qQ`L;YlPnZkrrG:MI2C5\\dsf&dAW"\Pd#:HtX5C0Vr%=C3;aBMMl9=nkq9Hlha1i$RB'g?d*=\%kebr&StK;1:T#j/=GA1lB4XX[Qo0!BqOYWSK<Iu47Ji8'o%Sf#FK'4+oV-[2m_MsR'7<e<Ap52eYf@T$h>6PRp%&Y?G\Xb@&%``,%3[<YWV8=bGqna0skPNAWhej[Y)\g%(e)[Y)'RWVL'`0)2dLfi('"m#qminpl3COU\-duBK#Shd',DBj+J_\`PIKDFLYC^>a&:Yth%<T2fe_dj2c:.06DjMe('G\mu]d=SkV4Z;4^jf3ZJE=Xg->(g;Bj0n!mDg6CinFu79-C]`Tb$-"pV9=$s'R/N-VAel`8DN?<%ErL'%A.ar%EofZT='+2+>\sX9mKhV=lDiSu)HhMt6R<2sO@5;?W2m1d\_"R?eb<<_-.uqh</O>h\\d^X)M"g8G-:>h?U.^NQRaWcS]V\U%5Cg]/\StC4J9Z4qTK5=!hh\<2X\8g\*eFsRctKVMWc(:jG>dn7HKBu>k?e/<B10,!fGdWH42@lU@]hVC"Xtsele05]CA4(pRFQps%hXhF<ZBb_:KTFNF[kK_s!E1!\,CC@tm^PlF9!R,P0bt(U+DXpWaaSKO:H6=5=I=N>N$&<taB7E6Uc4%k_oo'L?hQB,KBA/"ggeT/%aiCdE)J7&/Z5BVNVIsIUB9A(VF9%]"`9%8K++Km-[M=?P?X7>ko5Goa!&&)Ji0[7d?a=0iOPMSNpKsf0UXcnl\,L4jhCKr?Y7H='%[nG@l1jG?=ij;uXf>D,X9[#X00^Q^1J"J=P[Y_;*XnshNV#forn#OAeo-3IC@f(*bX4+hMBAM_BmB!f'+7WqZX)Ft-lpP[=g)juk%@OGt\XMR:!/bOqhYJhAV]RO2Q\5++=2:,;$:(rVXH)VFB+ZGpVVkZ[5:V6sO)pW3sI[*Zq5T%*]8u(E;2F2_=*NUiciA(R*QEfH9%>=:cP2nug\NTXDk[c]+YT,/<ec3at3=aB+cHiHE)]p0tbLG'mG/gjI)QsHGW.G_5T6"sdNR=;Fq"+,#Rf+<u!o_k4$%d#^]n$T/d%eQfM;h@m(GHS/iih4rGL[hk19h5:;lbf&#IFa=->:Scu<B!'VOnT(pmRQeR@WT&un7J\gRiZ"OPSu_RFcck?f%HUo2'_@#[+)\Ep%KRa:YhncKjI)ETq\c+QIMk?"D#hlI,gU!6);o_bnks/A*K<H<rW%njKU\._Z]7OV?UPW+LRId7\q)C0_@GcoQ<uQjT9+^Xlq5g\*%@@6m>fV6j@MZ@ZbRW<F`^M7XrDS5l*2L$"qZGnSDpZ/:&Hl!2i.kZ:R/KUrtrQ8`I<]E<W4rdQui6V3V")drq7J$31L=]'_]0Y7F%s-:u!UMi?aZgdG+BZ]jYC89Za)=;gTQ`HPPR>NMAIgslFD?'DfFXl>9iq)V4"tbi6@rM![A-'pJ&(,n+N;('qBM3$jr)r1LEg[=S%*R+&NF1#7,F]83-[a3J6`s=U9\\o2:@0MbuT-g/CdHBU&O1q$Z0FX^3+$PZN(j<1JF:G_s_r0dPF47Xs_S`K[.hEib(+ER1)mqIa%jm:_s.ZJqfSq/oIb5#5#Nm5Br0NqFa%An"FCU/FuIfEl(pTuW92#]_b]BH]dX"rS29bd#&%^^Pd6u&ph)Zm,oQH2N!>cI;Z5`7bh%^V_U[?NuU!HTB;B]ie5:>*F@<=rfQ"VlQipWut%%XQMk7q\Gcp1[!nm05!PJ_aUlj"Pqt3Jr"D9?A;Sq@[,UAAEh6JTI!lh&&m(L%[gOjE=`V8ZLHpc+(OZ(e$>]Z_Pf@$WQ8o^LO/MP]E=H/L*G(Q_%!-lHT>4aYYd!ZQN'HW9dC/T75<"/`7<Q,gMsLPV*kj5Bpr7UB%(rDd\I!'C\lEB._'/OMidWT3dBF.Hq@]KQRXNdn]!L$ed!e0f;;R.ui!`[8JbV-/;NfE=5R\YmFXqOPK@">$s54E%#+$X?tJOQ`Q%Eq=k[b6T5EgSa]@?9pq9<g]-A,!(#e90o:cqK$BQ]j7Zas'5.A`;%&.oqX;#Z6PdQ]tJ?Wlq`J>[!+"+;;Q\3O'm..@"!#Q;P-fn%e4\p3:o3!:qI7!E^&US!A)9=Z;s:EFAWgnEB%"'>:L:%;XY6b'0.iO<XA)%:ppE@QW;GuPf/%fZ,H-&B."L%4TODW]h"ucuE'W/e%Oc6]J=DHVjY%Q$i1soEe]D2GnCf^$X7ALD_i6P[p^Ym55C`S'IX/pf^_8E-7@h;T;83U?_co!&8do9W&@B!*aX,^n!pT$s.Qli)b%d<Mq("F>5mJ)u+&?'J3jX0dUN([&fA4u\c\B6)EI+7'B3X.N[W>aF4Dmurf1Pn))e4ifFS8l"JqZUC`fB$JVF/+Th(n9Nn'kA/7d%piIdWLHIeEB9QmCk2lNb;kG[j\qQZmRiT'bfYasCYi7V4">T[njJYkpXB5=#flLZdi2]LHGP'ZRc?Ue%>B`lps,QC&HGM"^9V1m=%XbK7Qg/u@h[0Zn8phdte+o!j>+NfJ"7"^!6gf#ht*eid+pi<3+:&J!AFcL4pB?p+YOq/^Zq!u4tibC!DEj,cVqagEHs,4WOT)1!1%kk)X23J+r^HJ-i]R8]%pP:&14Ws.<j=Q^clmqIVWaWeIErFY$_LV#uP4H?S/79]pL)1?5L:N,AK!=ms>W:cQE4gEA3C@"^6RM%*5%V'9`8J!NePp&CU(MP<M'KAkI\s&=05IpY?T5$\,t^)J[79b17dQ\F)*]DT#1E-:jLl@1rSr`hSC?JRaR:CUCf5Ll*ej.LC7n`TIX%\B)da8?\/-e8gD:]Pb[s9EI)c-VHD#O#o.1NUP0/CmIl?H`\/:PQ6Jh$-6j6^N#W+Lis57SUN5%28uIuEIGTa.lloJB4U@$7N7sT%j>m]f&$)PU`BVbAk?PHLRoDg:?bG8uR9NB,BB*$8YIsYnd/VOApj2-8,[6e,T=LWfB;$nEhK5mUTE.c9>Ja+DV0VMBqq]+[F%`B1%[m*RH=BG"@7P6]:NanAtP=\1K9D>uK"F`7a=EHB0QEZB,VH%1ZemkJ5@,l1?o'.3e3=*,CQDuQVq+G;MlUt*!j#2aL1$-sGc(lUI%pf1VW`J:1Ho#N]>bG]B^ZMpQ*=D^3mod;;7Gr[T6V7r=c[!Z?SGcEe]WkOoP>$fU^6aM\^l\f]-a)gO(29RF]Q4[1#lR10$m^[r2%(%KuBnjVS^NbOO\[&kc]\[:V*@q6[i[-NlJZRn+$B_$Iq>KkZ=8SR&QUg,`\CLq[KS8$X0ER6ZNpt$hk\^.a=Q#jur`m'R/o+L+(%//Pit(nJ=*==W6r^,jPhYQ#"I2^RR#a:4Zn1q@&oAS;R`hbM/GDeO5(GMI=%KLDa2T@)s&r9*mf4f4Y\GN!6+R.V9Bkd<10T09;_%VtU%[Y8&W*b1P[#Vp+!22\kp3/>K%;</e^0i^JIe`.!:f<L;s6SD*QV!P;!Z=#[a&bUNnCfU$]m>-^HEc'b&ATba<5q;Eh`E#<+`%o8<Q6d*WVhFg"-@9,Pb2F>Ptr^\9<oE1Wu9d(Zr/`V`u9S&#ua(``LsNZMlOZbHd<&(&Mr',\cSM3-7j)D%hSrJMf2+@.u=IK\Vu%bWbg>Z*ZSVQi"c;Hsg`/WGE;`ROZqd:M$pgG,dghIRG'_.3F"i"H2jH"JG6K`:?PhOhpCkAc]'80!@kP>MKrQQIUl_eg\,CjuC3Q%.Rrj,?stU-S5%q_nKEM[3j5t>:c0<$0k*C]Y"S>slGeokf5EC%)=HU.ig*4Nd[T5Ng%$]O*u4]V[-E:BNK[TGc4_9:p'!)K?;9<$%Dr7:6h9=ZK:`lYoWF(%/iC%_E)-9OL+$Rp"QCQ.G]*:H1k0KjJN$E!-@<$;:gqpVu&6(Eof\bSTk?G_2Xs[*maO5";<<VKgq/s8*%7/WVV.6!,T*2-94=/ZT&AX'amgZ+,\*`As;-58#Q"0eWl<S\bOYUK4;+!1@X2dA?bkR3cEl&3f/glh4/^H+p-DLGb#ki_$^hW,R<%_2%0joB?\9dU<$6^;s+"NY"DN9CRW`V\03$Cf9lqSAWD0GRjYlUG9^>3IL$SIdrO^3rODL_j[+KKArGdfKt%PO9CF2>PZ1??'%un%&KY+.;6\="Pc6m^NT;P).YZ5or1o&9eHhj&rHtuO7BiC"6,=2Md=ZX<^64.',qL4h%kj!/&1#AqKRaFHK^b-1-:]U!eEVP`E$2*:%i$K?Q/-PcF(4r'>Zk,9T!0\!0I]+'"hFJ6gc[sT4=pQeF6,b8GIdU".aWbt33&iZ;QoH2@q:\CNppfVr99,dtghA-9l?WiN62osb%aOu(5(6`\(6Xa[#N@Q2[m%FqWUG)>8o[[H8V6>9a0Ijd0JP&QrhSOPr;W/(<\\ZYVX):eYB3+cMCE)VBgZgCdp2u9'2gDrg.2KPf%i<>4&V'YsRV&jN:l9eU:j\F9]Q9R5GhV@hCKY59,D)6TuSs:eS#ID+Ike(nP'Lc(`aR/$f>T6+5h'2c1(>%T%V:BnW]#phZDWK*4%hNAKR,]W.IYKX";-O"d0<0aQ80fmmd?n0tHj96jSkZF[VMY+/Y.if@X<b9UpE*g([NK.#W>DM0\m6aLd?<H_4n)&P,q(q=Ji6r,V%Acj^HOkj?.lD6\S`L$HE?ddT7(O1j>-rp*Jjci8ac&-^l!B5PK?SGaQCTWWPr[!J=(MHf8TOkCV97%<l(mlGj@XpA?mNd4nIoCA`%>*hYbCRKtRp@shb">72X-%<BoNGECM*L.*h22r>s<%T92>0<QDF!^hWgZ'$fIcK9U[<a=_h;c$fRNA%ke'-+nWW$Y\)F:VlHEP"2%g0a3(9Dq<4ro1uBGDh-_T2HS1ri*Wca@h85mDG?0/(amjEVVqN;6msHT>F1Tcn+43_rpQu_DSe")dI8*cAtKg]seAsdJ:I@:#7L:%`&tokXIu]>QX#2d</,7Fi4QR5D:5'IVAG"X6H8mtj^>?dP>+JKVAN'B_5'\Ygu"_nS&HY&XO?e/Z*`1fY7<iiDmP3\<o.l;%ek%o%TlfPiVJp_1hjBJ=>u#>s3e-oRVm8rcY"><)otlC[N>hS`V(.kXjgDiN$]5mYbCUJDENpsljMpXo=+5HZ3p+Y31OjQl5Ij#Jok\sU%hr*R7%NX&-RED5YPM^/99Zc:f`U_l`q0fA^LN]Q]FSbQprkd:bhmjfO+XKXa"F2)c-*QL4$C\)[05>hM^<3Z[oTXRZX&<a5D1'mo%s.17"*ZE#9dRj&udS;8$NK-?KVlQ_.4:,FV3*EcfEIG<>p7GCs6XlG_ESqr:GE`LD2]d-p!<*8.FmXQiU42h5n+5)6a:GJ*-TnBP%5<Lg+0:o?HgmpV+kO90DmB<_\/iSN_L?6B%E:NSi"SB_pJ]m#a4Q`qETT:HfcL<soJ,_`fT&Do'd"ri3NpHm*s!R`L!ZukWdshf'%_s>31hjiXu\86Y-W0G6^3/EdWP&QS)kW@bmm>qlVfag2R26N@e+=b!P+J;=+=>g'FFMG5Wn'H\-Ghs)2s4=JR(/ZUam#5n<f<OLE%qU'KdNkOZ/gQ)7-1usn7,Y8sl]$gJs5IG^r[So[[ofS+-SK?;,4oa'YIm3no/"mRC+1Y7Xd@7#+/=b(blR34#.g8o))6R@&(6c%s%VtATomFCd`jjjCj^HXm[H2(2.p[lgoV4U,N[[0A?n3h_MJ$4q1MGEn?h$XtF;M%[?=GgdZ@9PKgUFdD7Cl(V?]h1-L4,LrrLhL0i%U#Q>kd9)C:BN2;a)Vt$8dJ3/URU@84n[rlT-XKt5<hh5beSL(32n_g?iB)lC)Mi'[>PA!A9oI#+ZpgaY/^`dZ=,A8Q-da2l&5?&G%PK6Cd)QV*qN+t4jd4MO7Mg.0"4:ib(3TWXgBpGsW/A\8c,8f8-3l1H$JU85,i0K#2997&,Zc8_Cbuf)2lc.B#lG$m]O^Al4PT#En%Z:6#Wbs57Glc.>El0i3B"m+B.1(2F8faCTa=pn-6]P]8@h9B0DnhQM)O/<@qg8OUcj6=nao\qMbA(.Y%\K]0=hC`:Kb&/22d;^7<%lKIsH@2q@TUXomp%EegC5Y=5?/M/#bV3-ddAKPFGkkPE<iHB_pLXRtkZB\K$`kJSd[,%>jI')u=2[h3\!Pn2trh`0?X\Z4fB4Ggq%iobtddN3I>j6ob!r&M,CF9djY$'CH^61EP"bAlV'_d!bWj$on_c*ToG)5;mDl^-Dt]@4ICKDn#J_adH^E$N[<iLA28UI5M(7FGnD%RA&BY-]M2HkdPEMKF!Cm:$@N<s+C,tn,3g24+-NAiH`?;.qW_nc\C/!S##DiU$LB[ZC>)`'#W)S#Aae'R/WD=;Dh]%I.Unr86t8o%Nj*G2)X'KZ,Lb^$rigeeiP^318^r8Td[cMe=9IKNA4BN?=rc8I$G()RC/bsd'$"sj?Zt4X-`$*]pe9/*eJ,p>#H0E?LU-/gqn;ue%<3p4SR."^.ij+Iqj\4neF=I^T[#1<?!C-%mM&g?@TV>l9<iNF`s%fj2EU4t`a>\tr:t/ohB%.'[FnIjb_@7M]LFa"63^I<&K4t[3%S\X9Y`JoJ&>+E\(;GDU#83D$[:EJ5FH&9C;P6_&.&oJ>%6nMg1jfLq$=PS%-THj_TEl-J,-7;CK<WY*061#4p=)^M@$!bD&;V)5b%ai>//"*TX%"ifj7S2`25Y(L]A:#L"G9g^oL+r?_8d(BXQ5V#"LV^<M0+M&irb/J88@sj>rAN>PM4V)G!\7%K./YN!:4s$)##[ecm%#TSnIa+N5o0RY-Q6NTuT\4Pm2_ml]K6-O6QO,fBJfT2\(*^6bA_oFG>g0H#)-d`;U8IQreDEq.[4/>meoKIdOJtr$1a8l5B!R"H8%0b!Sa0jp7``X;91S/B9dU"B@Y^t:eRIM$7k(IC>RkZ!/#KE43Qo7p`W&Xm'?JLU:8e:Fkm%]VhQ_'L42&:GZ6'U'Vh%']s_e+<&e%*_9:U_6=/:Nd-DX+S7qPOAU%3r6TX"Ufp%\Ka5a#pISiOVj9#&N.<L2:[EOd$R/44nZa0*[&0R<!2^&a*I;]NB)pE^"qOlSdp/2$%%$3``;0d,$TZQq99m@rM#ZhWsJc$]G^GpbrUT)-3-SWm[%+l@&af-!4EWXc>6)XZ0j9m3"DBCJ6i<<TuW=A:Y"pfWB4TaTc[P2`(%qh$<Tqgj!s_^/.:fM=j0$noKpGrTIY(kgb.Mg>bZpEL<#$$7X,i-*KA^klQ9Jk63d.g=;5fT#"f*>]_(4PiT1Ahh]WPsWi,fjiAO%LMd@.&FnhHcud=<KL>Ncb<6X9I*cPCMhAqqGNK,RqH[do`JB]tj7)#>^)P#'o)&Wl7gV!["JX+r5[f6YI!QuY2K<`U"upB>2Yl9?%KSLA;d;cB$+9RDo$6Rk^X^]XGReW$f.Ui)qbFmqn4Pe?uUZI,gqI#eG:Hq64J4#"Q\3=VH!/;l:d+aIe4d3gW#lpAd9n";M.Y7<5%[:]f7&f5C&%)_\YGXA;qOSUY/W`!#n=!Ys%%,^eMf21!Alk`bbLO0Of(kt#8TGTtR4UpIH&MsbI.bGHPS:uq$kV:QiSRF&;,V_0-%?:G&L5^0jPFU&$ZlH<3e$qLpQN#E-h.KXtS:uJoOb6Sd*V?H$6-96T[a!B*[#E+/.!>>btKhM`?PlMgDLr^r*(o#[0@=XM$4q/'^%O:+\j/TDuj8gHYk6J.2(gng@q>!P(pA-sN*@L-.<6<k\!$el;/EVto:&#'BX`dt,Lfs+_DM"E>%d,fh`"i5L^SB)K041:Ml^b#gG%%#FsIA97#=+9NGfN't)W$(;^X:m_(n[",:e1t6%STEQqQ8Y]FC/gbrTGQn\\E8\q:\hKPlkWt9I":U$G$L,W/Oi`6Act=ckZ-InA%-Q^rp#bPMpq:VDM(([KS)74s!N+A]j"&ZimJjsk?&Xt3kQNYT@N'N"9TSLStPV3'l'RB$G@GF&@X9?2HRn2`FqLl@2L:MD>(gp4)%=HLW5@#1U^%XDp0;:rkg%9,P[c[]miF@_V2,l*!5P-#lh7)fF3DFBdZXr`-Ml_BTZ0nIQbFX1Kt,2\_]#oXt'E]fdl=>7IFaf'k\%:r-NZ$noDFKO,p.]Ds8hX`05dQ=*2s]==:CSFVc2&dLZ62?dWq^hIe7!Gk1A,nW)H!I3XfkG&9D9f-i8fneu)Gm3/h@>GR`):0)7%N'ifH5`(ssi`3?!d9"-h-_b1/?OE.DLX5`+46kcs6K$iYN-"c7C^N:3FrmN7Rp;CG4WI;S,Z9'b6PML:7>^p[(]d+!@H>S#LDWWk%;\8`pGP!1>an:YREa0+.I'E4[(>M8F(WkRNqVo,6Jp9Uu8mE#r;G.uh1=1]Y,h"#k&KNI$6Kjd*1FSS4SMb(@_Vc`^1e!Nn]b2p;%as>_95%>WCTOA-1$;iU.:0<YpI`=ASK+re.clY"3<X9Ujm'E'*JjqE3ekh:S_mhXeC;^AroJRn1ci=tiW96`2c2\d<X2@b9,A?S0%j9lBJ-4o:#LK4s)iCtGnmi"RR@eM%$>m`ud@Z5"<Y:((o2@9#>d3mr;aORpQ)[m*GQd@NSOC^dnKHi=/(7)CFMZV?R0VMm4Yh'4V%Qb^MKOY?)Y_<DRLj2al05[?],n'Y2C;<'>5,C]lr9/0Q4LnTP+eYO*&CJ5aIW4E]?a:j\N86B/TTn@>1B81AJ#s.9>.V^,7D)EbQ%NBd'f0IUU/9eOD4)I&tjG#;cc\AnN#b>*dDFH%%sp1'[\$*QuEK@im89M9bmi[0)]!&e<"0T3.935lM:)Lrj-35Y`4[)=`NdK&$S%:'i[g(;L+Xk,oPKNMnX,j(hVP.-=#JHl^ZuE0hlbL8f_>lCGlFGcrMd_<V@rlHh<7kZTt"="80K+=Z6L'Xedk>jiS6PI<4HOMDd;%M*9td#ZqIf^bc-#=2Xum^G<#S7+;d1_3V;DnK6^'%BAC%/h4fDKrRuV31eQs3m](tW#@p7j:V=;W*5iiUPfhb#"0_M*GJ3,&n%im%Ql;E&lBR+RAn!Tm#(:Su18c$g6UW<BV]iH5O![bd)P')gW.EGPfeKZpNN$?3o4SQ0`]/d)JAKa(R51-jAfkbrC,E'*MDV4(0[cc$%6%`n_k<0lp0JtEQJ>%c'eJNi_@1$!2Loe6'W:iACAnY!M1ZpQ.?pM,+:`<<N4Fs8(!1H/qJ/F0.<aof[#YFLm5U.2#AL=]W@1#uo%W`<+l<)$(1GqoQ(BcT^KNN3)da_4N0C,G%8N)IG0XgWmW$<`^'=M>mf8O;YT?I!AO6J%OZ;t(\+/0[:\Y=f2'"i5EWPQEnKnf8'G%V`g(a%KY%oN7nP!cmkaZ[;TlG"P9lb4@sB<C^o^[G8Po^BFQF'LWh"mA;pl7,HIPi22$8s?)1md[W"X::pj_o'WB#okKth19T=<:%^9rRB@(ndbI?9-4E+=]qCfKe2"A-[9JSH!,,mC4S<MT;K..GW_)Q%l66Ia)1`CUD66PHOqM:uLZ%R^\E+L)qSC?V[VN\mO9_]TR^%ib+"q#[9WLZ6`TW^RkXl9pC`Cq[IT](s"[36#'1mF9YWq=nY59;[KGNMTZclW0&&l;A"M=Tk>eN/g3)srQ%cEC(-RoM0^JF"rf.I%r1V'Yd)>jY_:5-+TgJSg;[6RoPm5b]2@9$kW0Uj[$:0$_iS%#"r)k"$I_)?rATIpQ=/J'EJ!(Pa+XJUI>SRjf1K\^+.0CA%5C+fG%bUH[B>^f3R\YO;)Y@Q<J<=?RM%rFNNN(Cb4!PAFPQ2hI+;Vf/I_7m>lJSTEA=^LE?"...L]$^4UY*P(k=9+nt'2_e[^s55b`L/0=%%3]L"fEou1X3$HeM1gAgr1#0/2>N-@2\s2!Ml!0<:gSifNE\N+fes`/@K73iS-_cS4`k[SIR6cOS0f^]L-RGSIGfnio19O$'m!K6%kU2Z6%'ZZO\k.Ha$=pk*E!$eAfSUi?.uc"1h8B[]8-;d3iSB>4osh.GXGMk'%ns@W>TdWHYTRld"LH=&C(O,a^W5Jp0JDu1#d"a%%U;:Ok/g(o?%5)_L<hX]\KUW^\Tqt#?*A`G+Xrt03ae[ktd#k'sJk$#/7@eFM`[sSp/4lHN,A<-/2]3S;KLm.OiiriD+jd$0'Efo!%:PcE]*YEI29NDpqAH;"S8ZEn4?kU@6Qr9>+nM0`i-&X<i5TU#^.7/PHPd':d#h#>!Buh)M?GMai\/*1$:2M/7pH[UI=eaAt?\*Ee%pRr9F`Fg>@(,1:aTc[#e?kG]<jsd3eSI_bo@/*#O&n*.q\X4!MTu4qQ5U4,Ok^b!g&O(r6m><$H;NVImO<J@n+,WHt80Ht<i:"48%M_X-;i_=(d;Bio:5qWA'DT&E5Z@0AVA;l,lZ-oAU+uLu=*!'(o,Ts1Q#btgh83"C!W[F/8,$"am;iVQ3L+`h8UARP)#sKpa`W9\4%Y&c<%a!H\LU>p;?L1o<bZEVP]!A"k=BEh.laR#KcX=S\%cr7Rk#)a1_",7'(i%o<Z,/UFA`WR?,'8'/UfftL*^ahrj*Q]4WL#Ik3%4)Hg@+pHF]aZrQE@UET*_FBIh&2%I3loXi)++r6#,b]MMIZUdmd44sZ^*?YI&WT\V$&6:9`Q+/:OCDt^V'*QD1(C/,_ltPN9sO$+%#f\/K:'ZL"7+I+?"LmkF-8S#U`e2_T?r&NIOcZ77Quc0H?:h!d&[DedEH,Nj_b$BG,a<!^=>$2iWTeYj@l@-rO4)+j<KQ#<Q(qdr%ZKO,JW0dY2,_BM<aX4egCkY0;'41VkJrm+=:BSU51*Jn$.s8b>d1&)^%AT/u(^T=LcB`G5J1?(h&fTn_o)PG?&`u;M<%((A,BOX3%!,f\IW&uTK?A4'$6XgKQ7MHn1lMqU*"P,9[jq*(KqSN4H>crtm%n,ZFk+N:qOe4JpDG9JlZTq8NG\!ekR#J9Rj>#<*8-HLUo2li\%H!lLaNYN83KaEka_l+#r(/:/M0,bLUFh&gf^ncTSP4f,b+T=[5mC3i:6An+Yl(Vm"M9)S>%!>)gT[P+)i'VJU9J$a;S@"A[C.PIZ%)=r,ad^5cFnhm8$Z$d2\?*Ya_#!F]<j,k:%6<l,L#-lT1_cl_q6VPj/1V3c?%0IQ,.OegsWrlBr,YZG`/ETnhh2gPm>+&oD@'mj:%UA-/lm87g90YPKM/blp`!#ILYfGLsL%UoPEW"]hX.*+>dLkA(F-;TDW+[U#g;^.%5nL,fPfd0Jj#jDdj[0lV/`!<$E"trKf!^daQ%I)N8rB14"N(2.S*L:3J4O*o&MYYE+3eYT>QaA4(]A:lX.?sLL^8mE'>g]3(^5_5KpE6C;)+^8?jE#)?(2%5pQ:.0[rQtk5G7t-7E%*-kONcZ<SK1F(@B(*=\om&5;ec@G\=O:"5"\OS+qTi3'\/#%)-1(LO0+BDZ6jZnE"V)!-"`+2;9$:IAEW>p`>MTBIjW^tPi3__qH%alH$8;kO6&%]L*^e%Li(GnG%O<hM#&FekF!X%BTC#&tl'OJlQX&N9\%#-nGRgCl(\2u&D([P6^\Gb"/[7bfi-,_``_YJQYm,B!!]%!E3JHE<GP53Q%s22r[(T/^TRu4Yq/4#'/bhUEM,.NK-6cU&g7aahTSTUbF_c"e9&KTGom;_O_P.7e=MH4ZiBWG:5I<=@+@f!o=3:%Ufo;0N=Vo.2UEBF3YnlMhNU_(KObc'H_["gMBWA?1$"Nu`sR/<FVcee<8\]/0#%%oS0WqXk3rfW`r1n2bZmd<NQ*brQjB#Y*7HZ,%Y=OA_Yt69I'ElIRO9)T&i,gW?Js$rj3tW`K(,Q<;m]/7"_Frh*,#=LI8JmK`&6ZQ;EB""s8^]"0:5!$!q$%;H%Fion*7W-i=@`O6%0Xj7;hZel]-M(]\9EXgP;Znui8*eLCEJ)11\-+:4UQ@Hob@_1(6K0=e:e2RBV?8m!d@itfi14,M_)2eETO1_L.3&iX$\LEm__IFn%pd)f:Jc2H9.MRm\'phloJT(]Q'F#(i.AB5g#X_!(o;r;6d9ug-/'HT_J=GO3%DY7`1-F"c*#"[?58o%[7no*Mhu`_!ZJQRN$`mB%%A/Q$]E(gW7T%%idi#("a`*7!WN[ra,gT1E87U7"?C&fl*14p8@a3rF-Jo/Nb=I);GKneJ%rGkW2J_t.#@Yr/Pr73a!#(?en<G`-c%.[t!'Gbes$JFJ4B;_/K?51M$gf-&k4QWkRP%'qJgd3.5n)+k@TEAfh>Tg:Y-4q(CJ#Y1-i,FPMS'^fI[7b'm^$MStgGSUY\0g?>p%>"V9C+A-m9Ku,PN`bB"D_G/0XTl=841ARbC\5f?!J1rl-!J*(]_^S;0&db3;Lf8K9QQVcJ\.t;Z,`XL00p=r`BZ8*n(atD6>@jO.%(Pno/V.h;2N]Cl/"9,Mjj4G%L%+upHVgJl=as]@^$O'H6M(EBd7,B6%K!ImjCdE(u9jCf(&\3rdK?Gk^+NFOJ:/bggN[U)-OFlNV%j#MA5BH6Vo#t8S9N+:5T\O_Fn"kL?lP!L<@Nm!sWG_O(u,iNbd"iLMeiC=Ls&/b0''.b\pjTCZ:d;U))3#REa4:]&hGn>tUd3/:E%lkLR3Wu4Q0_f-Sh:$=*\`,Jra1*<C?3-89B-lS0R"B_Z*8n'VI'qH6g-^9o8#j<a!d,8o5.@#,t'M0Qa4:[r?oMqW@n[NMf/a<1i%%"7O@M+O]1r(5iDl'eDI8k%i;,"]p[q%G9TU@Tb(K)61BVc"uoJ&9</]1(mb2#OeF/?2;4:L3ND]k:JoAC!?7'R["BTL8s;YB[8S%E`/Fb@.k)RJJ2:6(rY>tFY]Y'gAZe:6GFQ!1d^>+K+S=%p&QULb"eUPeX`u:)OP-6\Y6Zj6iM:k&p\mYg4.90Ps0Bj=SW];'s:P5%GAB)#Pp*@RDJZKu]8;I)YpJn,Z3((M1/0M/MG:6Y_gW0>X5(Wdm-G0>;1N%PXB:>J9DVF%i]reL5Z>Us4dOeidbMnp$sH3'LU62[%iH'SXpV4694-.NEW5^l/Jq^3UW.h[ZOXCD:M64Y5Q^bn08B<ni8GE4LnLiKH=*6Z<`lVu3.ef#-j)XLE^5+;1adb+9"F#DqJh<Zl%VGg<5,'.+]>/U:J1"#a6D[:NA==YRgWQ9rp#TBB)^sG&OL:W%2%;B#T1)rlt,ClR@T;V#8d-]3P;/%367<CX+XAeqPbUa(uZ)%)9%<l9orCf&"nli<F"J0J&TD0Q^ad#J3UWq?4&(54=0@ou&+RELj=.[Lbm'h^r"`*6nK`!hd2FK1sfHoWhF(]acc/ld,:64*i"i)Y6L%Z4EG9$3[;dJM<":YQ/g-9CW/unfSj(&:r/-cS60:R#O=$.E$25WP++E]0Q^rJh5Fi//2]VMD-AP%RSm:fq/7a!:oMZ*l<FL$QPR)%%V9VA@@[J>X(F^,Q7&EYL?K0>%^ZGUHZO]\n4TqMNWdlkj5`8F\tOFYUr<(#\OE0EF?d<A(cDY*lC:KN8dH\AnMjQaEDfc:^8W#.%AJZX\VnVY;6\/*='"Oun?"anFk:iST'8]h87n<pULocDSLbFkSWJ&e3a_2$C/T+,;`]^=gFEoYa$4i%JKhWBZPa3&s8n>mZTFTbf%Jk_Dk_.jsi1@oH2o/9Gq;mXPA]gi^)(g(3[9FJeo$*3Kgd'LoDEGL.>VCI*Nl?'!b%?uFkS\PpPc3b&:lUB397KGFs*]`0N*3I+\%aA#s3j)Geh%@*A9<hsIi?V&i8@,WbMG'GAQ1]dN@'q:_eUs16<VaG?_Tf?-AKomo5`jrbV(TZsD=n<0O!ctp#XU-O6MFdj0,RRRd%C'm9\87*Y6TB8o&Q=(Ak.2X6DH^+kkS.m_7YXa#UZE@:fjnRUVj(XTK9NBW?Z2b1=?Z*.01.5Eml[#k0*l[Qoo'fVLQuQiCmK/,"%/f-PEMVeab_>],RnH>:Y$-tUU7eK"S7MS`.Z8#5g>SH50Z.(VVUOlUAHHG&;Vhc;Y!me3B0J4UX'Up:E]+?n5,dDcaJBLii-&b3<%`L*Q%T^AQ_3]0We9eeH^&1B=hTo'+]9LHk+7@$r8D;p*L*c%hMMcqA[Hs^jE!<si\!W5K,<gCW??n/Cd=-dmJ)9.Y,0lK=^lkTd6%0b/r.4l[5mPf0;q"9FGA&05L4&^tk&AHNl5J2-Z:@hCF?**'.-R:t"fY-iqk:b]u;gN@Lo'j)ofHrX1hkY++l(5G6-LAM9LbmHO)%7)$[r-M%XJ]B9E8=$9@11HSk+LOg:\VP<Q99OpGjX@Rk"hY6%6>WKrD$0S"]*`HB6nY=cM6i5&Gml9F>"':afZ[,c^ioi;jCBOc;%`$g=!1iu@2Fiq!7N4pb;6opUBG+hil0f)LN.W82"'N9Sl+]A#SpT_1'!FeGD[m?Dg6CHQ["KT;$e?1#9(G8.W7BK=$;D=@b/7cDH%Wne!Jh%dGA&h\Zq"d1jsZJR-SLUH.Kf+TDbD\c97!/9>l.S_@!6/X1-Ef17QkX[]!SXYXp)W2"3VprX8#UW*.iL6VL.<aC_Rp*%@%J:/hl&OAfBXCk=/c;<dJeO2/E3jLV<#GZRe*^]m9(#QWC(tp:gAlFuU-`sDn"LfH])k$l"&=\#g1eDAU?hi\[eeLCPWbdobfasM6%NG&DHIYbKT9O^t;OotkrO2U4Y5^7<^)3p-6=fiO3]l0,-\F\11ANGcqGu[UT[W#[312peCNHZN(-V#5[&FtQYoRDGIbp9d*,PlUN%DN_UGBZEWeOb'R#,g$m$hN#p]^uV@G;ju.Ikj9h_6$\BrhFhC"RRD%l,U932?+KFUi^2"YqN6^WR8S*?Ab\0EKAfu^YEI9d>/8d'%5:]CYOF0Y[\5NQY(k>&Xm:S^J_EcQ*D"2JPEK3HU*'c3q#1(i&?>Y!DXr#7r6I3+-_WPe3PQ:5bSB-g;Z?rim@7"4+ic7JWjZ&L\%8B$RAKWL>J]ibu=#4G;Qdash!5Xs`>;YU_472?-K=:QR6(ceuDUF\fH#IsJi-/.6dffTXEjon(lZ(C>^6CA%`!dtasmDh';@BS%j%0&Sf<`/XbOR*l7-)[IY+F"':L>GlI&!0YOV^,at$K;giQrURZK'IdZ8KN`?)BasI(<M+raQo66m:fi38P=J)gPVR*Ag#;KCm$6A,%N=(sW?K%%q6#Z,c4@3245V%Bg)"G<A>(hJ.Wa;!rFF2RW7+TOm/hiM-l,4R\+t$5,6b?ko'!?D/JDTd0$3VcRP:dF)U:,Oc#eW\G%.43M];*,=GA#+7cDN\KdP`[jeWMUq8,)%MGD+GpXOC1U)-"[7h'iSQiUdu8d)$VP<g7T</D9=_gUuP9g#ET&Ho0*k@Pjkqe2M75J%De(Xpb+35J$+4%[$6fd%dp`S.mIUg<'Isu8(o17S$=T%%ehij^dbL9[+mIoQ;b4'dp')BA#mh/Gor0Acgt^j<7*#cLVGk"ma=p0K%Lj`FMW>Qu:q88RrECa,]S*#g:Jg$BABh/R;VhSK]Arn^\PoCD`J`QBf\7*W(@2-t5oJD!Wl%GR8O6e[5'P0XYMaB$.Q4+Dp*/]Dd%`+-0168jrR`:=/$KiU#CQ<VFV9>r,Y]3Z57<0CG$,SFYu8YipfJ2H)4M[C2W'VPDfg]_[g!$`N@,-EpO"P@N(22>^]\E8kQY*1rT%3$d;C'FV(M<?./<X&Ci+%LKU"EZWYJ84]-;egA9X+jf:))%Oc%^Vq@1ZG>I]PaSa(,^!^^`?8m_f.]auJg2%`A:dat+IRP)boi_#%n9O''MBtrQ^Q+)SP+AouRR+gG+]#U[OH<H%?p[^]-A,r+oSn)C[m_I.>A4GdS@PFE,caL68@[qoAc7u__XU/2U*q9Ld4#XTN\Z=L%3g-Pp$kb<!Y%'7Y-6uXq&dHl-R3"^<BnTt%,Zege2$B)?P&?">o$i+.6i1P';0,*R=dIk^!_J#:I8Rd'JpjO^Z1Bl)A@`li,jgR#%JY\:++cu=6",9(hKlWVIdV$H7!XYo8]JP8*W,/8LBKFQr$rWgJUS<hYRaG!4`U>5g$"4BH:+?k_caE;k,SER`A@W<lE+og(1hdHA%`-Ie=dPk#;&jD,bK-=OnZSdGINnMeoP2U[DKnN/af`B>@=bVHb6aH3Vnr/l*'T%LqL]]:t+sDVKK%M909\$aD,$BZDO@U5A1/>)F%,ZEK3O[sd>/J^q<#E)%!OfcSH`QBo</<W3'_IAXL?tll:3jMGa8.mMO=<r<lK49u8+c)RU6HUklBbh#9.[$:h22d,'_43WOE%r)"%>[9cLP1a&S=<r9WO?Ae;OfTe@1lI$B0Z[b71lI%;8SZG+@Zf$ELFS9,=X6-,dq-Badn#kYQfl=:dk>B%TX<t%,+2Af'T$@8o49Id%29<an\NpEKMF,1913#.'A59Xu"HnC$Soa"N5dH;B'SGJ4=U?Ya$+G0F%CUp>n7&6r21pS=b>G1,0S9M&%\6.^>JTPpkS'%O'*@kQ%`?8"m9dFZ'$kbTp:KDp"JL'mM1D>WoQ_X=#_bFqGa;g,7q'4.Ul\J,&hO6[W\QI)uC$9@-,L+aWr^cKA1&MWb^a)JB8"a@S-\FS(%+5ro&bj]<F8FJpqoT>0Z%=R:f=/+q(]j9=<7s`XtToV$3D!3)aeJn?5d'_Sr513SY_]K&>-oV!ccC,UL82CC'5LLh\2Lf8Y,0_2I%8kJSDqU?\++6g@a_]S,pI`!8l>`n009KB]HO,TRY";7;'&uGs\77e?q#a\1.4gsF4N8mn@P-O>A5f,LO;njf&`"l\\1LcHICD;J5%gkM\fXM@[g8GX;T_]\1HSRITm'o!Y3.5>&e'S@+#=su`]km5m)#ZnWb73Uod?%t\o*lX4.3m'AqP#`-`B[ZWQ'Tuc)L-j<bcqm9%%nC&A?3P/7386-d'R-eC`<^^pu]#IcL8/Be,n5*bs1kfHkO(+2UFY\e^OS$qLL-a66FG<*Pe_*$=5r'rh;b1L<C'mP_kSOLQYUl8Q%OA(M#Aro\PRq@aU6(;JJ9L5.VOSV14i,pDMWu<omDY&\G!E?O55"0+^`&\cf+h'QZ.T)Zc(C,#)ZLcXr[/Y;7Z:WE5,l6"VX%-8e%^f:EF#7aukmD"hi7L`<LYO"XMGMNaoIYN@K33'aRHY!EN:'S2f$XZdj1Pb)Ha6&.N1?cVIDQTGC5-Mm]-&N_j^QU7ag[=]@F8iR2%*'\kSp&>ikMi6Qiqs:?IqLS[_<<H"RE?a1'K"_ob1pSS;L>_pqL\%;eBF9kZOXj+5Yo$/lLHD_fb`mEuVXj5FrW<hT^-qhgiXS]T%POj5<\\h'c5`+Bk_#Jk7=W]Tgpo9n:hQ5bL@:";eJ%prDO.6+F74auFrA2,rPB?ITLUQtDM"ThL@H%$0#]p-9e[hS/0o.mmS`fk!%[2XOQ[D*Ndo^P\mNc._X;2DETb3gfFghfArJl(Hj%>0e7pKi<hH_'%Kdd,Z.G8;8AFbrDlOe6CQ-G["mIdq:HmZLn'>:L)ANc(Ed%\GH,BG5_='@Hbblg&H+NI!0`.kNV?tl5mYWrpat##_Tf/If0$)5Hk<?U+RN.D/Ls9rP(B5=]Y~>%AI9_PrivateDataEnd