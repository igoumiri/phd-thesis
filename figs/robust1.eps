%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: robust1.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Imène Goumiri
%%CreationDate: 17/01/13
%%BoundingBox: 0 0 239 192
%%HiResBoundingBox: 0 0 238.1104 191.8584
%%CropBox: 0 0 238.1104 191.8584
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 104 8%%BeginData: 10728 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD2EFFA87DA8FD0AFF7DA8A8FD0DFFA8A8FFA87DFF7DA87D7DA8FD%04FFA8FD53FF7D5227FD047DA87D7D52A8A87DA852FD057DA87D7D7DA8FF%FFA8A852FFA8277D7D277D277DFF7D7DA8527D7D7DA8FD4FFFA87D7D52A8%277D275227277DFF52A852522727277D525227277DFF7DA8A852A8A8277D%5252527DFFFF27525252275227A8FD4FFFA8FF7D7DFF7D7DFFA8FFFFFFA8%FFA8FFA8FF527DA8FFA8FFA8FD05FFA8FFA8FFA8FFA8FFA8FFA87DFFFFA8%FFFFFFA8FDABFFA8FD7EFFA8A8A8FD7CFFA87D7DA87DFFA8A8A8FFA8A8A8%FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8%A8A8FFFD07A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8FFFD05A8FFA8%A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8%FFA8A8A8FFFD05A8FD0AFFA8A8A8FD80FFA8FD43FFA8FD2DFFA8FD0DFFA8%FD7FFFA8FD43FFA8FD2DFFA8FD8DFFA8FD71FFA8FD0CFFA8FD80FFA8FD37%FFA9FD0BFFA8FD2DFFA8FD38FFA9FFA9CBA9A97FA97FA97FA34F2A7ECBA9%FFCBFD42FFA8FD23FFA9FFA9A97F7F5A5A535A595959845F835984591210%3A595A537E5A7E7EA9A9CBA9FD17FFFD04A97EA9A9CBA9FD0DFFA8FD0DFF%A8FD20FFA9A97F7F5A5A59845F8AAEAEAEFFAEFFAEFD05FFAE5F83FFFD04%AE8384595A5A7E5AA3A9FD0FFFA97F5A602F5A59845F845960355A5A7F7F%A9A9FD16FFA8FD1CFFCB7F7F5A5A358383AEA8FFAEFD19FFAEAE83835959%535A78A9A9FD07FF847E2F595984A8FFAEFFAEFFFFFFAEFFAEAE5F83355A%79A9FD06FFA8FD0AFFA8FFA8FD1BFFA9A35A605F8AAEFD25FFAEAE838435%5A7EA9CBFFFFA9595F83FD13FF83835A7FA9FD0EFFA87D7DA87DFD17FFA9%A3545A5F89AEFD2BFFCFFF895F595A545959FD17FFAEAE5F7E79FFFFFFA8%FD0AFF7DA87DA8FD15FFA9797E5F89AEFD32FFAE345F355A7FCBFD18FF5F%8479FD0CFFA8FFFFFFA8FD13FFA37F5A5F83FD2BFFA8FD08FF8434AEFFFF%835F2F5A7FCBFD16FF838479FFA8FD1FFFCB797F5FAEAEFD34FF845FFD07%FF895F5A7FA9FD15FF5FA97FFD0EFFA8FD0FFFA9A3545F83FD2FFFA8FD06%FF5F83FFFFFFA9A97F7F7EA97E592F5A54A3CBFD12FFAE837FA8FD0DFFA8%FD0EFFA97F5989AEFD15FFCBFFCBFFCBFFCBFFCBFD18FF8384FF7F7F5A5A%35845F845F84848434340D3079CBFD11FF8A7EA9FD0DFFA8FD0DFF7F7F5F%89FD10FFA9CB7E7E5A8459592F592F592F59355935845A7E7EFFA9FD0BFF%A8FD04FF842F7E2F5F59AEAEFFAEFD05FFAEFFAEAE5F34063079CBFD0EFF%837E7EFD1AFF7F855FFD0FFF7F7F595A59845F8AA8AEAEFFCFFFAEFFCFFF%AEFFA8845F84595A5985A9FD0CFF840B6083FD12FFAE3A120779A9FD0CFF%8978CBFD0DFFA8FD0BFF79845EFD0BFFA9A95A5A2F5F5FAEAEFD15FFAEAE%595F355A7EFD07FF7F360CAEFD16FFAE5E0B2F55CBFD09FF892FA3A8FD0C%FFA8FD0BFF798489FD0AFFCB7E5A3584AEFD1FFFA883357EA9FFFFFF5459%3484FD1AFF8334075A7EA9FD04FFA85F2FA9FD0FFFA8FD09FF798383FD09%FF7F5A2F5F83FD25FF5F5935A9545FAE5FA9FD1BFFAE5E0D5A5959355959%837EFFFFFFA8FD16FF798483FD07FFCBA9305983FD2AFFAF0C12A9AF59FD%1EFF5F54FD18FFA8FD07FF798483FD07FF7F5A358ACFFD2BFF545FA85F0C%A9FD1EFFCF5F54FD09FFA8FD0CFFA8FD07FF7F7F5FFD06FFA9545989FD2D%FF7F35FFFFCF3B35A9FD1EFFAE59A3FD14FF7DA8A8FD05FFA97F5FAFFD04%FFA97F2F83AEFD2DFFCB3583FFCBAE59FF347EFD1EFF5F5AFD08FFA8FFFF%A8FD08FFA87DFD06FFA383AEFD04FFA97F35AEFD2FFFA959FFFFFFA884FF%FF3584FD1DFFCF2FFD07FFA8FFFFFF277DFD07FFA8A8A8FD04FFA97E89FD%04FF7F5A5EFD31FF5984FFFFFF8459FFFFFF347EFD1CFFAE59A3FD07FFA8%FFA87D7DFD0EFF7F8AA8FFFFFF7F5A83FD31FFCB60AEFFFFFF8484FD04FF%3485FD1CFF5FA9FD09FFA8527DFD09FFA8FFFFFFA97F83FFFFFF7F5A5FFD%33FF35FFFFFFCB845AFD05FF2EA9FD1AFFCF837EFD07FFA8FFFF52A8FD0D%FFA984AEFFFF7F5A89FD33FFA984FD04FF8484FD05FFAE35FD1BFF59FD0A%FF7D7D7DFD09FFA8FFFFFF7F89AEFF7F5A83FFFFFFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD0D%FF59FFFFFFCBAE59FD06FF5F7EFD19FFA85ACBFD07FFA8FF7D27A8FD09FF%A8FFFFA98583FFA97F5FFFFFFFFD19A8FFFD0DA8FD0CFF5FAEFFFFFFA884%FD06FFAE59FD19FF5F7EFD0CFFA8FD09FFA8FFFFA97E89CB7F5FFD05FF7D%FD07FFA8FD0FFFA8FD0BFFA8A8FD0CFF59A8FFFFCBAE59FD07FF5984FD17%FFAE2FFD09FFA8FFFF7DA8FD0CFFA3A8AEA359AEFD04FFA8A8FFFFA9FD04%FF7D27A8FF7D52FFFFFFA8FFA8FFFFFFA87DFFFFFFA827A8FFFFFFA87DFF%A8FD0CFFAF5FFFFFFFAE60FD08FF35FD17FF35A9FD0BFFA85252A8FD08FF%A8FFFFA383A87E89FD06FF7DFFA3A9A3A9A3FF527D7D525252FF7DF85227%2752527DA82752275252275252275252277DFD0BFFC4C3C376C3C4C3CF35%FD08FF5F7EFD15FF3484FD0AFFA8FFFFA8FD09FFA8FFFFFF7F8A7F84AEFD%05FFA8A8FD07FFA8A8FF7D7D7DFFA8FD047DA87DFFA87D7DA87DA87DA87D%7D7DA87DA8A8FD08FFCAC3CACAFF8483CACAC377A9FD07FFAE35CBFD12FF%AF35A8FD0DFFA8F852FD09FFA8FFFFA3595A83FD07FF7DFD23FFA8A8FFFF%FFCAC3CAC3C3CAFFFFFFC3BC6FC39AC375BDCAFD07FF5F5AFD10FFAE8334%AFFD0CFFA8FFFF52A8FD0CFFA3845FAEFD07FFA8FD24FFA8FFFFCAC3FFC3%BCBCFFFFFFBCBDC3A17CC4BC9AB6C3FD08FF5F5AA9FD0DFF835F84FD10FF%A87D7DFD09FFA8FFFF7F545FAEFD07FF7DFD07FF7D7DA8FFA87DA8FD15FF%A8A8FFFFBDCAC3B5B6BCB0C4BCCACAFFAF5FAFFF76C3B6FD09FF83355985%A8FFA9FFFFFFA8A85F5F59A8FD10FFA8FFFF27A8FD07FFA87DA8FFFF7F54%5FFD07FFA8A8FFAFAEFFAEAFFF7D52A8A87D52FFFF7DA8FD13FFA8FFFFFF%CABCBCFFFFC3FCBDA1A1C3C39A7DAE60CAB5C3FD0AFFAE5F845960598459%8483AEAEFD11FFA8FFFF7D5252FD07FF7D7D7DFFCF7F2F83CBFFA8FFA8FF%FFA87DFFA8AEA8AEA8FF527D7D272752A8FF277DFD12FFA8A8FFFFA8FFBC%C3A8FFA1FCB5A176CABC9A76FF35CBB0C3AFFFA8FFA8FFA8FFCBFFA88459%5F3559348359A8A8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFFF%27527DFD07FFA8FFFFFF7F5A5EFD07FFA8A8FD0AFFA8FD19FFA8FFFFC3CA%C3B0BDBCB5BCC3CAFFCAFF5FAFFF7DC3BCCAFD09FF59595AA9A9FFAFFFA8%A984845984A8FD13FF7D52A8FD08FFA8FFFFA95A5FA8FD07FF7DFD23FFA8%A8FFFFC3CAFFC3B6C3C3FFC3BCBDCA7D83C4C36FBCBCFD08FF842EA9FD0C%FF845F59AEFD0EFFA8FFFF52A8FD08FFA8FFFFFFA3605A89FD06FFA8A8FD%08FFA8FD13FFA8FD07FFA8FFFFFFC3CAC3C3BCFFFFFFCAC3BC99BCC3C39A%9AFD08FFAE2FFD10FFAF5984FD0FFFA82752FD09FFA8FFFFA35F7F5FAEFD%06FF7DFD07FF52527DFFA8FFA8FFFFFFA8FFA8FFA8A8FD04FF7D7DFD06FF%A8A8FD07FFCABCC3CAFFFF847DCBA1C376CBFD08FF2ECBFD12FF8359A8FD%0BFFA8FFFF527DFD0CFF7F8A847F83FD06FFA8FFFD05CAFF7D52A8525227%27FF7D527D2752277D52527DFF5227A8FF277DFD04FFA8FD09FFCACAC3CA%75C9C3CACA60FD08FF5F85FD14FFAE59A8FD0CFFA8527DFD09FFA8FFFFA3%83AE7F83A8FD05FF7DFFCAFFCAFFCAFF7DFD04A87D7DFF52FD067DA87DA8%A8A87DA8A8A87DFFFFFFA8A8FD0CFFA883FD04FF35FD07FFAE35A9FD15FF%AE35A9FD09FFA8FFA87DA8FD09FFA8FFFFA3A989FF7F89FD04FFA8A8FD24%FFA8FD0CFF8484FFFFFFAE84FD07FF847EFD17FF845AFD0BFF527D7DFD09%FFA8FFFFA97E89FFA95489FD04FF7DA87DA87DA87DA87DA87DA87DA87DA8%7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8FD0CFF59AFFFFFCB%AE59FD07FF2EFD19FF357FFD08FFA8FD10FFCBA383FFFFA359AEFD04FFA8%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8%FFFFFFA8FD0EFF5AFD04FF8484FD06FF5F85FD19FFAE35FD16FFA8FFFFFF%7F8483FFFF7F35AEFD34FF59FD04FF8459FD05FFAE35CBFD19FFAE35A9FD%07FFA8FD0CFFA8FD04FFA97E89FFFFFF7F35AEFD32FFA95AFD04FF8484FD%05FF5FA9FD1BFF59A9FD15FFA8FFFFFFA97F5FAEFFFFFF7F3589FD32FF35%FFFFFFCA845AFD04FF5F59FD1CFF837EFD07FFA8FD0CFFA8FD05FFA38583%FD04FFA35989FD31FF8484FFFFFF8484FFFFFF8359FD1DFF59A9FD11FFA8%FF7DA8A8FD05FF798383FD04FFA9305FAEFD2FFF7E5FFFFFCBAE59FFFF5F%59FD1DFFAE5AA9FD07FFA8FD0AFFA8A87DFD06FFA97F89FD06FF555983FD%2FFF2FFFFFFFAE84FF5F59FD1EFF8954FD07FFA8FD0CFFA8FFA8FD06FF7F%7E89FD06FF7F5434AEFD2DFF7F34FFFFFF34357EFD1FFF35A3FD08FFA8FD%15FF7F83AEFD06FFA97F3583AEFD2CFF5A83FF59347EFD1FFF5F7FFD17FF%A8FD07FFA97F5FAEFD07FFCB7E3558AEFD2AFFA81211858484FD1EFF5F5A%CBFD09FFA8FD0CFFA8FD09FFA97F5FAEFD08FFA97F2F5F83FD26FFAE5F59%7E5A83FF59FD1DFF5F595A845F84598484AFFD11FFA8FD09FFA97F5F8AFD%0AFF7E5A2F5F83FFCFFD1DFFCFFF83593584A9FFA954595E7EFD1AFFAE12%0D2F7E5AA9A8AFA884345AA3FFA8FD18FFA97F5F8AFD0BFFCB7E7E2F5F5F%AEAEFD17FFCFAE5F603584A9FD06FF7F2F34AEFD17FF893A0755A9FD09FF%5F5BA9FD0EFFA8FD0BFFA97F5989AEFD0DFF7F7E5935595F5984A8FFAEFF%AEFFCFFFCFFFAEFFAEFFA8845F5F5959597EA8FD07FFA8FFFFCB35345FAE%AEFD11FFAE5F110D2AA3FD0CFF5F7FA8FD0DFFA8FD0DFFA35A89AEFD0FFF%CBFF7E7F5A84355A2F5A59605960595A2F5A35845A8584FFCBFD0FFF5930%5A595FAEAEFD0BFFAE8A34130755A3FD0EFFAE7EA9FD0DFFA8FD0EFFA954%5F5FFD13FFCBFFA9FFA9FFA9A9A8FFA9FFA9FD11FFA8FD05FF34A9A97E53%35358359845F835F848383330C075479CBFD10FF837E7EFD1EFF7F7F5FAE%FD36FF59AEFFFFCBCB7F7F7E7F7E8559352F557FFD13FFAE8A7FA9FD0DFF%A8FD11FFA37F598383FD2DFFA8FD07FF3584FD06FFCFAE595A5AA9CBFD14%FF89847FA8FD0CFFA8FD14FFA97F5A5FAEFD34FF5F5FAFFFFFAE5F5F5A7F%A9FD16FF8A837FA9FD0AFFA8A8A87DA8FD15FF7F7F595F83AEFD28FFA8FD%09FF843A5E5F595A7FFD17FFAE895F7FA9FFA8FD08FFA8A87DA87DA8FD17%FFA97F7E598AAEFD2FFF838435362F7EFD18FFAE897E7FA9FFA8FD0AFFFD%05A8FD19FFA9A3545A598383CFAEFD21FFCBFFFFFFAEAE5F5F2F7E7FA9CB%FF595959AECFFD11FFAEAE5F5A54A3FD04FFA8FD0DFFA8FD1CFFA9A97E7E%598483AEAEFD1DFFAEAE8384595A5A7F7FCBFD07FF84595A5F84AEFD0BFF%AEAE5F5F597FA3FD14FFA8FD1FFFA9A97F7F545959835F8983AEAEAEA8FF%CFFFFFFFA8AEFD04FFAEFFFD04AE5F8359592F5A54A3A9FD0DFFA9855A59%2F59595F5984598359833559547F7FA9A9FD07FFA8FD32FFA9A97F7F5A7E%595A59848384838A8434103A83845F845960595A5A7F7EA9A9FFCBFD15FF%A9A97E7F7E7F7EA9A9CBA9FD1AFFA8FD29FFA9CBA9A97FA37F7F7E7F070C%307F7E7F7FA9A9CBA9FD05FFCFFD2DFFA8FD0CFFA8FD34FFA3A9FD4AFFA8%FD43FFA8FD2DFFA8FD8DFFA8FD43FFA8FD2DFFA8FD0DFFA8FD7FFFA8FD43%FFA8FD2DFFA8FD8BFFA8FFA8FD43FFA8FD2DFFA8FD0AFFFD04A8FFFFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF%A8FFFFFFA8FFFFFFA8FFA8FD05FFA8FFFFFFA8FFFFFFA8FFFFFFA8FD07FF%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFA8A8FD07FFA8A87D7D7DFD74A8FD0AFFA8A8%7DFFA8FD14FFA8A8A8FD14FFA8FD16FFA8A8FD15FFA8FD15FFA8FF7DFD08%FFA8FFA87DA87DFD12FFA8A87DA87DFD12FFA8A87DA8FD15FF7DA8FD14FF%A87DA8FD13FFA8A8A87DFD0BFFA8A8A8FD13FFFD04A8FD14FFA8FD16FFA8%A8FD15FFA8FD15FFA8FFA8FD3DFFA852A8FFFFFFA8A8FF7DFFFFFFA8FD72%FFA852527DA8A852FF7D52A87DA87D7DFD71FFA8527D27522752A87D2752%277D2752FD7BFFA8FDB7FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="Ôªø" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2013-01-17T00:04:46-05:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:ModifyDate>2013-01-17T00:04:47-05:00</xmp:ModifyDate>
         <xmp:MetadataDate>2013-01-17T00:04:47-05:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>208</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA0AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYqxb8wdL8walp+nQ6FPdWt7HfxzfWrWVYliEcchR7lGki9e29XgJYRyLL0Wu4VeeaT5u/&#xA;NjSvJeuvFb2GoS+V4VEjtJNfymZbX6xdwzTyXtZJbWZTE45glWVlFV9NlU51HXfzuuLv1dL0Gxub&#xA;OH1ptOufVCQzc0vfq7OUv0ZkMX1VWV4qc2ZxTipCqpLH+amqeRb5Na0+4i119VtZ4LTSruG1kXT/&#xA;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&#xA;rsVdirsVdirsVdirsVf/2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Mac OS X 10.8.2 Quartz PDFContext</pdf:Producer>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>85.000152</stDim:w>
            <stDim:h>68.553955</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>CMUSerif-Italic</stFnt:fontName>
                  <stFnt:fontFamily>CMU Serif</stFnt:fontFamily>
                  <stFnt:fontFace>Italic</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 0.7.0 </stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>cmunti.otf</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>CMUSerif-Roman</stFnt:fontName>
                  <stFnt:fontFamily>CMU Serif</stFnt:fontFamily>
                  <stFnt:fontFace>Roman</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 0.7.0 </stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>cmunrm.otf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Groupe de nuances par d√©faut</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:AEF72130252068119109FFF4BB8BEFCF</stRef:instanceID>
            <stRef:documentID>xmp.did:AEF72130252068119109FFF4BB8BEFCF</stRef:documentID>
            <stRef:originalDocumentID>xmp.did:AEF72130252068119109FFF4BB8BEFCF</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:DocumentID>xmp.did:AFF72130252068119109FFF4BB8BEFCF</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:AFF72130252068119109FFF4BB8BEFCF</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:AEF72130252068119109FFF4BB8BEFCF</xmpMM:OriginalDocumentID>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:AEF72130252068119109FFF4BB8BEFCF</stEvt:instanceID>
                  <stEvt:when>2013-01-17T00:04:35-05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:AFF72130252068119109FFF4BB8BEFCF</stEvt:instanceID>
                  <stEvt:when>2013-01-17T00:04:47-05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -191.858 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 191.858 li
238.11 191.858 li
238.11 0 li
cp
clp
[1 0 0 1 0 0 ]ct
22.9385 176.875 mo
234.968 176.875 li
234.968 13.2275 li
22.9385 13.2275 li
22.9385 176.875 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
ef
.17466 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
22.9385 176.875 mo
22.9385 13.2275 li
234.968 13.2275 li
234.968 176.875 li
22.9385 176.875 li
@
22.9385 176.875 mo
234.968 176.875 li
.399902 .399902 .399902 rgb
@
22.9385 13.2266 mo
234.968 13.2266 li
@
22.9385 176.875 mo
22.9385 13.2266 li
@
234.968 176.875 mo
234.968 13.2266 li
@
22.9385 176.875 mo
234.968 176.875 li
@
22.9385 176.875 mo
22.9385 13.2266 li
@
22.9385 176.875 mo
22.9385 174.749 li
@
22.9385 13.2266 mo
22.9385 15.3232 li
@
%ADOBeginSubsetFont: CMUSerif-Roman Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /CMUSerif-Roman def/FontInfo 7 dict dup begin/Notice (Converted by Andrey V. Panov from TeX fonts. Some glyphs are copied from Blue Sky fonts released by AMS.) def/Weight (Medium) def/ItalicAngle 0 def/FSType 0 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 49 /one putdup 53 /five putdup 127 /minus putdef/FontBBox {-1135 -387 1495 1094} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 -0 430 447 664 666 678 716] def/OtherBlues [-206 -195 -162 -162] def/BlueScale 0.0260525 def/StdHW [31] def/StdVW [70] def/StemSnapH [0 22 26 31] def/StemSnapV [25 28 30 40 70 75 84 89 103] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings4 dict dup begin/one <1C60D8A8C9B7A73DC579B9CE13A4EA8C148F4BC66BEA337C4DE2EEF1C4CAFA9F120106C1AB5EEC685376481EF4250D4D18FDB14A6D6397D1B8CF963A8973E85BEB3FA0A37FB3BC94FA6271F237CE05F5A49A4ECEE1EA> |-/five <1C60D8A8C9B7A73D3B2B97F19D54A2E00E7DDA8E720642298FF59F6D0510372F339D4407D70E4CE30327FAC09E858DA5EA5BFBC5716648BC5436840BBE29BD7F94EBBA03040A0DC970649964D7635443B27223526CEE9A0535A57DD8913D4ABDEF6432D9D023CC5B88E7126716C194309C44C19F42624093F7AFCB3E069EFC1118A68155F24350D3E690B1E5FEF7CD118E0E4A3E0EDD4BE6B2F9AE44D98CB60CAAEB36B4C3D72E7EF0A8F7E8D43B02ADBFAEAB20F0E20C32D08C3CA57AEC75CA3A772590769D2F5DF9FBCC3E5D914E868CA2B8A817CA1C78CAE5F76D045B350DDF515A564C6DE4D15FBA44EF2ED49DC147CBE184CA90ADD077C9A3353C6F8A9A> |-/minus <1C60D8A8C9B6FF86F56CC7C227EB77C70B9853F03387A73945FFB543663AEA9137B84F961E95466B7A25F79E73876D20CFE31728C6EA98DF6E04CECB784E> |-/.notdef <1C60D8A8C9B6ED05B71B281B14BACC0E0F6998C26A83E375A07AB156E33D3C0D0AE7841ED3C58AA89F8452D8B14DFBBDB595110D4073E8E9BBB4C7CAABD777414D8BA1B96490CC4DB8D55EDD27856AB7DC35AC4EEB66EA52ACF8B5> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/KFYYYE+CMUSerif-Roman /CMUSerif-Roman findfont ct_VMDictPut/KFYYYE+CMUSerif-Roman*1 [49{/.notdef}rp /one 3{/.notdef}rp /five 73{/.notdef}rp /minus 128{/.notdef}rp]KFYYYE+CMUSerif-Roman nfKFYYYE+CMUSerif-Roman*1 [6.28584 0 0 -6.28965 0 0 ]msf16.3027 183.485 mo(\177)sh19.8481 183.485 mo(15)[3.14307 0 ]xsh65.3384 176.875 mo
65.3384 174.749 li
@
65.3384 13.2266 mo
65.3384 15.3232 li
@
%ADOBeginSubsetFont: CMUSerif-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.systemdict beginKFYYYE+CMUSerif-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/zero <1C60D8A8C9B7A73D3B2D32309B1F5D5A32FC3614834FC1C6AAC2FD0CFBA096F90FB2C3A3CAFBF3AA4446EB14C0E98B3F186ED964541453FB83C15FC2E93578528FFAF6AA7BC0D1581FE6CB2DFB80152ECEB8117E97861C19E2C935F2AAF631D61BC6A6F74A992D1CEC324DF000971D5A97285BB39F5323619D2F8DB1D4E590B9CB71F18D7C0C40576DCB5A547C4EDF3E1F> |-systemdict /gcheck known {setglobal} if end {end} ifendKFYYYE+CMUSerif-Roman /Encoding getdup 48 /zero putpop%ADOEndSubsetFont
/KFYYYE+CMUSerif-Roman*1 [48{/.notdef}rp /zero /one 3{/.notdef}rp /five 73{/.notdef}rp /minus 128{/.notdef}rp]KFYYYE+CMUSerif-Roman nfKFYYYE+CMUSerif-Roman*1 [6.28584 0 0 -6.28965 0 0 ]msf58.7031 183.485 mo(\177)sh62.248 183.485 mo(10)[3.14307 0 ]xsh107.739 176.875 mo
107.739 174.749 li
@
107.739 13.2266 mo
107.739 15.3232 li
@
KFYYYE+CMUSerif-Roman*1 [6.28584 0 0 -6.28965 0 0 ]msf102.675 183.485 mo(\177)sh106.22 183.485 mo(5)sh150.139 176.875 mo
150.139 174.749 li
@
150.139 13.2266 mo
150.139 15.3232 li
@
KFYYYE+CMUSerif-Roman*1 [6.28584 0 0 -6.28965 0 0 ]msf148.567 183.485 mo(0)sh192.54 176.875 mo
192.54 174.749 li
@
192.54 13.2266 mo
192.54 15.3232 li
@
KFYYYE+CMUSerif-Roman*1 [6.28584 0 0 -6.28965 0 0 ]msf190.967 183.485 mo(5)sh234.968 176.875 mo
234.968 174.749 li
@
234.968 13.2266 mo
234.968 15.3232 li
@
KFYYYE+CMUSerif-Roman*1 [6.28584 0 0 -6.28965 0 0 ]msf231.825 183.485 mo(10)[3.14307 0 ]xsh22.9385 176.875 mo
25.0337 176.875 li
@
234.968 176.875 mo
232.844 176.875 li
@
KFYYYE+CMUSerif-Roman*1 [6.28584 0 0 -6.28965 0 0 ]msf12.1123 179.117 mo(\177)sh15.6572 179.117 mo(15)[3.14307 0 ]xsh22.9385 149.591 mo
25.0337 149.591 li
@
234.968 149.591 mo
232.844 149.591 li
@
KFYYYE+CMUSerif-Roman*1 [6.28584 0 0 -6.28965 0 0 ]msf12.1123 151.832 mo(\177)sh15.6572 151.832 mo(10)[3.14307 0 ]xsh22.9385 122.307 mo
25.0337 122.307 li
@
234.968 122.307 mo
232.844 122.307 li
@
KFYYYE+CMUSerif-Roman*1 [6.28584 0 0 -6.28965 0 0 ]msf15.2554 124.548 mo(\177)sh18.8003 124.548 mo(5)sh22.9385 95.0508 mo
25.0337 95.0508 li
@
234.968 95.0508 mo
232.844 95.0508 li
@
KFYYYE+CMUSerif-Roman*1 [6.28584 0 0 -6.28965 0 0 ]msf18.7764 97.293 mo(0)sh22.9385 67.7666 mo
25.0337 67.7666 li
@
234.968 67.7666 mo
232.844 67.7666 li
@
KFYYYE+CMUSerif-Roman*1 [6.28584 0 0 -6.28965 0 0 ]msf18.7764 70.0088 mo(5)sh22.9385 40.4824 mo
25.0337 40.4824 li
@
234.968 40.4824 mo
232.844 40.4824 li
@
KFYYYE+CMUSerif-Roman*1 [6.28584 0 0 -6.28965 0 0 ]msf15.6338 42.7246 mo(10)[3.14307 0 ]xsh22.9385 13.2266 mo
25.0337 13.2266 li
@
234.968 13.2266 mo
232.844 13.2266 li
@
KFYYYE+CMUSerif-Roman*1 [6.28584 0 0 -6.28965 0 0 ]msf15.6338 15.4688 mo(15)[3.14307 0 ]xsh22.9385 176.875 mo
234.968 176.875 li
@
22.9385 13.2266 mo
234.968 13.2266 li
@
22.9385 176.875 mo
22.9385 13.2266 li
@
234.968 176.875 mo
234.968 13.2266 li
@
gsave
22.9385 13.2266 mo
234.998 13.2266 li
234.998 176.903 li
22.9385 176.903 li
22.9385 13.2266 li
cp
clp
gsave
-.75 191.813 mo
239.509 191.813 li
239.509 -2.46777 li
-.75 -2.46777 li
-.75 191.813 li
cp
clp
[.516992 .620391 ] 0 dsh
22.9385 95.0508 mo
234.998 95.0508 li
@
150.139 176.903 mo
150.139 13.2275 li
@
141.758 95.0508 mo
141.758 95.0986 141.719 95.1387 141.67 95.1387 cv
141.623 95.1387 141.583 95.0986 141.583 95.0508 cv
141.583 95.002 141.623 94.9629 141.67 94.9629 cv
141.719 94.9629 141.758 95.002 141.758 95.0508 cv
1 0 0 rgb
f
grestore
grestore
gsave
139.546 92.9258 mo
143.824 92.9258 li
143.824 97.2051 li
139.546 97.2051 li
139.546 92.9258 li
cp
clp
gsave
-.75 191.813 mo
239.509 191.813 li
239.509 -2.46777 li
-.75 -2.46777 li
-.75 191.813 li
cp
clp
140.623 95.0508 mo
142.718 95.0508 li
1 0 0 rgb
@
141.67 94.002 mo
141.67 96.0996 li
@
grestore
grestore
gsave
22.9385 13.2266 mo
234.998 13.2266 li
234.998 176.903 li
22.9385 176.903 li
22.9385 13.2266 li
cp
clp
gsave
-.75 191.813 mo
239.509 191.813 li
239.509 -2.46777 li
-.75 -2.46777 li
-.75 191.813 li
cp
clp
.698638 lw
153.602 95.0508 mo
153.602 94.2354 li
153.631 94.0615 li
153.631 93.3623 li
153.661 93.0137 li
153.689 92.5469 li
153.689 91.9932 li
153.748 91.2939 li
153.777 90.3047 li
153.806 88.9072 li
153.777 86.6074 li
153.748 86.082 li
153.486 82.5889 li
153.136 78.8906 li
152.845 73.6777 li
153.02 68.6992 li
153.078 68.1162 li
153.806 63.9229 li
155.232 59.3516 li
157.327 55.041 li
160.092 50.9941 li
163.468 47.2969 li
167.396 43.9473 li
171.849 41.0361 li
176.737 38.5303 li
181.947 36.4922 li
187.389 34.9795 li
192.976 33.9316 li
198.592 33.4063 li
204.122 33.377 li
209.476 33.8135 li
214.511 34.7168 li
219.167 36.0273 li
223.357 37.7158 li
225.074 38.5898 li
226.966 39.7256 li
229.934 41.9678 li
232.175 44.4141 li
233.659 46.9463 li
234.357 49.4805 li
234.211 51.9551 li
233.193 54.1982 li
231.302 56.1484 li
229.672 57.0791 li
228.45 57.6045 li
224.608 58.3896 li
222.543 58.4482 li
219.603 58.2451 li
217.188 57.8672 li
211.833 56.4385 li
206.449 54.459 li
200.833 52.0703 li
194.868 49.3926 li
188.377 46.4814 li
181.103 43.4521 li
172.868 40.3662 li
163.322 37.3379 li
152.758 34.7168 li
140.39 32.5625 li
139.197 32.416 li
130.729 31.5723 li
123.978 31.252 li
115.247 31.252 li
102.821 32.1543 li
90.8022 34.0762 li
79.3359 36.9883 li
68.6558 40.8311 li
58.9365 45.5195 li
50.3511 51.0225 li
43.0762 57.167 li
37.1978 63.8643 li
33.5601 69.543 li
32.8325 70.999 li
30.0391 78.3955 li
28.9038 85.9375 li
29.3984 93.4492 li
31.5229 100.846 li
35.1899 107.922 li
40.3701 114.53 li
46.8887 120.616 li
54.6582 126.004 li
63.5049 130.576 li
73.1963 134.274 li
83.585 137.011 li
94.3813 138.729 li
105.411 139.398 li
116.382 138.962 li
127.091 137.478 li
137.218 134.915 li
146.53 131.274 li
152.758 127.926 li
154.737 126.615 li
159.015 123.324 li
163.7 118.578 li
164.748 117.21 li
167.018 113.803 li
168.443 111.212 li
169.054 109.96 li
169.433 109.114 li
170.248 107.396 li
170.976 105.912 li
171.645 104.602 li
172.343 103.438 li
173.1 102.388 li
173.915 101.398 li
174.846 100.468 li
175.952 99.5928 li
177.261 98.75 li
178.92 97.9629 li
181.016 97.2344 li
183.78 96.623 li
187.622 96.2441 li
190.066 96.2158 li
191.171 96.2734 li
196.119 96.8848 li
200.833 98.0508 li
205.199 99.6807 li
209.127 101.777 li
212.532 104.224 li
215.326 106.989 li
217.479 110.018 li
218.934 113.192 li
219.69 116.511 li
219.662 119.859 li
218.905 123.18 li
217.421 126.412 li
215.238 129.499 li
212.677 132.119 li
212.416 132.352 li
208.952 134.944 li
204.965 137.186 li
200.513 139.05 li
195.682 140.506 li
190.56 141.524 li
185.264 142.078 li
179.852 142.136 li
174.497 141.729 li
169.258 140.825 li
164.253 139.458 li
159.539 137.652 li
155.261 135.467 li
151.449 132.877 li
148.218 129.993 li
145.628 126.791 li
143.679 123.413 li
142.427 119.831 li
141.903 116.161 li
142.107 112.405 li
142.951 108.62 li
144.435 104.776 li
144.988 103.583 li
146.269 100.99 li
147.083 99.418 li
147.666 98.3125 li
148.131 97.4971 li
148.509 96.8848 li
148.829 96.4199 li
149.121 96.0996 li
149.354 95.8369 li
149.382 95.8076 li
149.528 95.6338 li
149.673 95.5166 li
149.79 95.4004 li
149.877 95.3418 li
149.935 95.2832 li
149.994 95.2256 li
150.022 95.1963 li
150.052 95.167 li
150.052 95.1387 li
150.081 95.1094 li
150.081 95.0801 li
150.11 95.0508 li
150.139 95.0508 li
0 0 1 rgb
@
153.602 95.0508 mo
153.602 95.8369 li
153.631 96.0117 li
153.631 96.71 li
153.661 97.0596 li
153.689 97.5264 li
153.689 98.0801 li
153.748 98.7783 li
153.777 99.7686 li
153.806 101.166 li
153.777 103.467 li
153.748 103.99 li
153.486 107.484 li
153.136 111.183 li
152.845 116.396 li
153.02 121.375 li
153.078 121.956 li
153.806 126.149 li
155.232 130.721 li
157.327 135.031 li
160.092 139.078 li
163.468 142.776 li
167.396 146.125 li
171.849 149.037 li
176.737 151.541 li
181.947 153.579 li
187.389 155.094 li
192.976 156.142 li
198.592 156.667 li
204.122 156.696 li
209.476 156.259 li
214.511 155.356 li
219.167 154.046 li
223.357 152.356 li
225.074 151.483 li
226.966 150.348 li
229.934 148.105 li
232.175 145.659 li
233.659 143.126 li
234.357 140.593 li
234.211 138.118 li
233.193 135.875 li
231.302 133.925 li
229.672 132.992 li
228.45 132.469 li
224.608 131.682 li
222.543 131.624 li
219.603 131.828 li
217.188 132.207 li
211.833 133.634 li
206.449 135.613 li
200.833 138.001 li
194.868 140.681 li
188.377 143.592 li
181.103 146.62 li
172.868 149.707 li
163.322 152.735 li
152.758 155.356 li
140.39 157.511 li
139.197 157.656 li
130.729 158.501 li
123.978 158.821 li
115.247 158.821 li
102.821 157.919 li
90.8022 155.996 li
79.3359 153.085 li
68.6558 149.24 li
58.9365 144.553 li
50.3511 139.05 li
43.0762 132.905 li
37.1978 126.208 li
33.5601 120.529 li
32.8325 119.074 li
30.0391 111.678 li
28.9038 104.136 li
29.3984 96.623 li
31.5229 89.2275 li
35.1899 82.1514 li
40.3701 75.541 li
46.8887 69.4561 li
54.6582 64.0684 li
63.5049 59.4961 li
73.1963 55.7988 li
83.585 53.0615 li
94.3813 51.3428 li
105.411 50.6738 li
116.382 51.1104 li
127.091 52.5957 li
137.218 55.1582 li
146.53 58.7969 li
152.758 62.1465 li
154.737 63.457 li
159.015 66.748 li
163.7 71.4941 li
164.748 72.8623 li
167.018 76.2695 li
168.443 78.8613 li
169.054 80.1133 li
169.433 80.957 li
170.248 82.6758 li
170.976 84.1602 li
171.645 85.4697 li
172.343 86.6357 li
173.1 87.6836 li
173.915 88.6738 li
174.846 89.6055 li
175.952 90.4785 li
177.261 91.3242 li
178.92 92.1104 li
181.016 92.8379 li
183.78 93.4492 li
187.622 93.8281 li
190.066 93.8564 li
191.171 93.7988 li
196.119 93.1865 li
200.833 92.0234 li
205.199 90.3916 li
209.127 88.2959 li
212.532 85.8496 li
215.326 83.083 li
217.479 80.0537 li
218.934 76.8809 li
219.69 73.5615 li
219.662 70.2119 li
218.905 66.8926 li
217.421 63.6611 li
215.238 60.5742 li
212.677 57.9541 li
212.416 57.7207 li
208.952 55.1289 li
204.965 52.8877 li
200.513 51.0225 li
195.682 49.5674 li
190.56 48.5479 li
185.264 47.9951 li
179.852 47.9365 li
174.497 48.3447 li
169.258 49.2471 li
164.253 50.6152 li
159.539 52.4209 li
155.261 54.6055 li
151.449 57.1963 li
148.218 60.0791 li
145.628 63.2832 li
143.679 66.6602 li
142.427 70.2412 li
141.903 73.9102 li
142.107 77.667 li
142.951 81.4521 li
144.435 85.2969 li
144.988 86.4893 li
146.269 89.0811 li
147.083 90.6543 li
147.666 91.7607 li
148.131 92.5762 li
148.509 93.1865 li
148.829 93.6533 li
149.121 93.9736 li
149.354 94.2354 li
149.382 94.2637 li
149.528 94.4395 li
149.673 94.5557 li
149.79 94.6719 li
149.877 94.7314 li
149.935 94.7891 li
149.994 94.8467 li
150.022 94.876 li
150.052 94.9043 li
150.052 94.9346 li
150.081 94.9629 li
150.081 94.9922 li
150.11 95.0225 li
150.139 95.0508 li
@
128.168 33.4063 mo
123.978 31.252 li
128.488 29.5332 li
ef
.17466 lw
128.168 33.4063 mo
123.978 31.252 li
128.488 29.5332 li
128.168 33.4063 li
@
119.467 157.104 mo
123.978 158.821 li
119.787 160.976 li
ef
119.467 157.104 mo
123.978 158.821 li
119.787 160.976 li
119.467 157.104 li
@
.698638 lw
153.34 95.0508 mo
153.34 94.3232 li
153.369 94.1768 li
153.369 93.2158 li
153.398 92.8379 li
153.427 92.3721 li
153.457 91.7607 li
153.486 90.9746 li
153.515 89.8672 li
153.486 88.208 li
153.398 86.1113 li
153.107 82.6172 li
152.758 79.2109 li
152.409 74.085 li
152.555 69.2217 li
152.583 68.8438 li
153.253 64.5342 li
154.591 60.0498 li
156.599 55.8281 li
159.248 51.8682 li
162.507 48.1992 li
166.348 44.9375 li
170.685 42.0264 li
175.428 39.5801 li
180.492 37.5703 li
185.817 36.0566 li
191.259 35.0078 li
196.759 34.4551 li
202.171 34.3965 li
207.41 34.8037 li
212.357 35.6777 li
216.926 36.9297 li
221.029 38.5605 li
222.718 39.4053 li
224.58 40.5107 li
227.52 42.6963 li
229.731 45.084 li
231.244 47.5576 li
231.943 50.0332 li
231.826 52.4502 li
230.837 54.6631 li
229.003 56.5566 li
227.52 57.4287 li
226.238 57.9824 li
222.484 58.7686 li
220.68 58.8564 li
217.566 58.6816 li
215.442 58.332 li
210.204 56.9922 li
204.908 55.1006 li
199.437 52.8291 li
193.616 50.2373 li
187.243 47.4424 li
180.171 44.5293 li
172.11 41.5303 li
162.827 38.6182 li
152.001 35.9404 li
151.827 35.9102 li
139.721 33.8721 li
139.343 33.8135 li
131.078 33.0283 li
124.501 32.6787 li
115.072 32.707 li
102.938 33.6396 li
91.1802 35.5908 li
79.9766 38.4727 li
69.5581 42.2871 li
60.1006 46.9463 li
51.7773 52.3623 li
44.7061 58.4189 li
39.002 65 li
35.5386 70.5908 li
34.8115 71.9893 li
32.1924 79.2686 li
31.145 86.665 li
31.7266 94.0322 li
33.8804 101.224 li
37.5474 108.154 li
42.6982 114.619 li
49.1587 120.529 li
56.8408 125.771 li
65.542 130.197 li
75.0874 133.779 li
85.2725 136.428 li
95.8657 138.06 li
106.691 138.642 li
117.43 138.176 li
127.876 136.662 li
137.771 134.099 li
146.851 130.519 li
152.933 127.169 li
154.854 125.888 li
159.015 122.655 li
163.525 117.938 li
164.835 116.249 li
166.873 113.018 li
168.182 110.543 li
168.764 109.29 li
169.113 108.533 li
169.87 106.874 li
170.539 105.446 li
171.208 104.194 li
171.878 103.059 li
172.576 102.04 li
173.361 101.078 li
174.264 100.176 li
175.312 99.3018 li
176.592 98.4873 li
178.163 97.7002 li
180.171 96.9717 li
182.849 96.332 li
186.515 95.9238 li
189.134 95.8945 li
190.211 95.9238 li
195.1 96.4775 li
199.727 97.584 li
204.035 99.1855 li
207.934 101.195 li
211.31 103.554 li
214.104 106.262 li
216.286 109.202 li
217.77 112.318 li
218.556 115.551 li
218.614 118.841 li
217.916 122.103 li
216.548 125.275 li
214.453 128.304 li
211.979 130.896 li
211.717 131.129 li
208.37 133.691 li
204.5 135.934 li
200.193 137.797 li
195.479 139.253 li
190.473 140.301 li
185.293 140.855 li
180.026 140.971 li
174.758 140.593 li
169.579 139.748 li
164.661 138.467 li
160.004 136.749 li
155.785 134.595 li
152.001 132.119 li
148.8 129.294 li
146.181 126.208 li
144.202 122.888 li
142.922 119.395 li
142.34 115.783 li
142.457 112.114 li
143.242 108.387 li
144.639 104.631 li
145.658 102.359 li
146.705 100.263 li
147.403 98.9238 li
147.898 97.9629 li
148.334 97.2344 li
148.684 96.71 li
148.975 96.3027 li
149.237 95.9824 li
149.382 95.8369 li
149.44 95.7793 li
149.615 95.6045 li
149.731 95.4873 li
149.819 95.4004 li
149.906 95.3135 li
149.964 95.2539 li
149.994 95.2256 li
150.022 95.1963 li
150.052 95.167 li
150.052 95.1387 li
150.11 95.0801 li
150.11 95.0508 li
150.139 95.0508 li
0 .65098 0 rgb
@
153.34 95.0508 mo
153.34 95.75 li
153.369 95.8945 li
153.369 96.8564 li
153.398 97.2344 li
153.427 97.7002 li
153.457 98.3125 li
153.486 99.0986 li
153.515 100.205 li
153.486 101.865 li
153.398 103.961 li
153.107 107.456 li
152.758 110.862 li
152.409 115.988 li
152.555 120.85 li
152.583 121.229 li
153.253 125.538 li
154.591 130.023 li
156.599 134.245 li
159.248 138.205 li
162.507 141.874 li
166.348 145.135 li
170.685 148.048 li
175.428 150.493 li
180.492 152.503 li
185.817 154.017 li
191.259 155.064 li
196.759 155.618 li
202.171 155.676 li
207.41 155.269 li
212.357 154.396 li
216.926 153.143 li
221.029 151.513 li
222.718 150.668 li
224.58 149.561 li
227.52 147.377 li
229.731 144.989 li
231.244 142.515 li
231.943 140.039 li
231.826 137.623 li
230.837 135.409 li
229.003 133.518 li
227.52 132.644 li
226.238 132.09 li
222.484 131.304 li
220.68 131.217 li
217.566 131.391 li
215.442 131.74 li
210.204 133.079 li
204.908 134.973 li
199.437 137.244 li
193.616 139.836 li
187.243 142.631 li
180.171 145.542 li
172.11 148.542 li
162.827 151.453 li
152.001 154.134 li
151.827 154.162 li
139.721 156.201 li
139.343 156.259 li
131.078 157.044 li
124.501 157.394 li
115.072 157.364 li
102.938 156.434 li
91.1802 154.482 li
79.9766 151.6 li
69.5581 147.785 li
60.1006 143.126 li
51.7773 137.71 li
44.7061 131.653 li
39.002 125.072 li
35.5386 119.481 li
34.8115 118.084 li
32.1924 110.805 li
31.145 103.408 li
31.7266 96.041 li
33.8804 88.8477 li
37.5474 81.9189 li
42.6982 75.4551 li
49.1587 69.543 li
56.8408 64.3008 li
65.542 59.875 li
75.0874 56.2939 li
85.2725 53.6436 li
95.8657 52.0127 li
106.691 51.4307 li
117.43 51.8975 li
127.876 53.4111 li
137.771 55.9736 li
146.851 59.5547 li
152.933 62.9033 li
154.854 64.1846 li
159.015 67.417 li
163.525 72.1348 li
164.835 73.8232 li
166.873 77.0557 li
168.182 79.5313 li
168.764 80.7832 li
169.113 81.54 li
169.87 83.1992 li
170.539 84.627 li
171.208 85.8779 li
171.878 87.0146 li
172.576 88.0332 li
173.361 88.9951 li
174.264 89.8975 li
175.312 90.7705 li
176.592 91.5859 li
178.163 92.3721 li
180.171 93.0996 li
182.849 93.7412 li
186.515 94.1484 li
189.134 94.1768 li
190.211 94.1484 li
195.1 93.5947 li
199.727 92.4883 li
204.035 90.8867 li
207.934 88.8779 li
211.31 86.5195 li
214.104 83.8115 li
216.286 80.8711 li
217.77 77.7539 li
218.556 74.5225 li
218.614 71.2314 li
217.916 67.9707 li
216.548 64.7959 li
214.453 61.7676 li
211.979 59.1768 li
211.717 58.9443 li
208.37 56.3809 li
204.5 54.1387 li
200.193 52.2754 li
195.479 50.8203 li
190.473 49.7705 li
185.293 49.2178 li
180.026 49.1016 li
174.758 49.4805 li
169.579 50.3242 li
164.661 51.6055 li
160.004 53.3232 li
155.785 55.4785 li
152.001 57.9541 li
148.8 60.7773 li
146.181 63.8643 li
144.202 67.1836 li
142.922 70.6787 li
142.34 74.2891 li
142.457 77.958 li
143.242 81.6855 li
144.639 85.4414 li
145.658 87.7129 li
146.705 89.8096 li
147.403 91.1484 li
147.898 92.1104 li
148.334 92.8379 li
148.684 93.3623 li
148.975 93.7695 li
149.237 94.0898 li
149.382 94.2354 li
149.44 94.2939 li
149.615 94.4688 li
149.731 94.584 li
149.819 94.6719 li
149.906 94.7598 li
149.964 94.8184 li
149.994 94.8467 li
150.022 94.876 li
150.052 94.9043 li
150.052 94.9346 li
150.11 94.9922 li
150.11 95.0225 li
150.139 95.0508 li
@
128.691 34.834 mo
124.501 32.6787 li
129.011 30.9609 li
ef
.17466 lw
128.691 34.834 mo
124.501 32.6787 li
129.011 30.9609 li
128.691 34.834 li
@
119.99 155.646 mo
124.501 157.394 li
120.31 159.549 li
ef
119.99 155.646 mo
124.501 157.394 li
120.31 159.549 li
119.99 155.646 li
@
.698638 lw
158.52 95.0508 mo
158.52 95.0225 li
158.491 94.8467 li
158.491 94.5264 li
158.462 94.4111 li
158.433 94.2939 li
158.404 94.1484 li
158.375 93.9736 li
158.316 93.7695 li
158.258 93.5361 li
158.142 93.2461 li
157.967 92.8955 li
157.764 92.5176 li
157.443 92.0811 li
157.036 91.5557 li
156.455 91.0039 li
155.697 90.4209 li
154.679 89.8096 li
153.427 89.2275 li
151.885 88.7324 li
150.11 88.3828 li
148.189 88.2373 li
146.21 88.3252 li
144.29 88.6455 li
142.544 89.168 li
141.06 89.8672 li
139.837 90.6543 li
138.848 91.4688 li
138.12 92.3721 li
137.539 93.3037 li
137.073 94.3232 li
136.753 95.2256 li
136.462 95.9238 li
136.229 96.5068 li
135.938 97.0596 li
135.617 97.584 li
135.269 98.0801 li
134.832 98.5742 li
134.337 99.0693 li
134.308 99.0986 li
133.755 99.5352 li
133.639 99.5928 li
133.057 99.9727 li
132.882 100.03 li
132.213 100.351 li
132.096 100.408 li
131.281 100.7 li
130.408 100.903 li
129.564 101.05 li
128.721 101.078 li
127.876 101.078 li
127.091 100.962 li
126.363 100.816 li
125.665 100.583 li
125.083 100.32 li
124.559 100 li
124.152 99.6514 li
123.832 99.2725 li
123.715 99.0986 li
123.686 99.04 li
123.628 98.8945 li
123.541 98.4873 li
123.541 98.1084 li
123.686 97.7598 li
123.919 97.4092 li
124.268 97.1475 li
124.705 96.9434 li
125.229 96.8271 li
125.84 96.7979 li
126.509 96.9141 li
127.295 97.2051 li
128.168 97.7598 li
129.273 98.6318 li
129.914 99.2441 li
131.136 100.351 li
132.416 101.398 li
133.813 102.33 li
135.356 103.176 li
136.985 103.874 li
138.731 104.456 li
140.535 104.864 li
142.427 105.097 li
144.29 105.185 li
146.181 105.126 li
147.986 104.894 li
149.731 104.515 li
151.361 103.961 li
152.875 103.291 li
154.184 102.506 li
155.115 101.777 li
155.319 101.603 li
155.93 100.99 li
156.628 100.061 li
157.094 99.2148 li
157.385 98.458 li
157.56 97.7295 li
157.618 97.0898 li
157.589 96.5068 li
157.502 95.9541 li
157.385 95.459 li
157.21 94.9922 li
157.007 94.5264 li
156.803 94.1768 li
156.803 94.1191 li
156.542 93.7412 li
156.25 93.3623 li
155.93 92.9834 li
155.581 92.6338 li
155.232 92.3135 li
154.824 91.9639 li
154.388 91.6436 li
153.893 91.3535 li
153.369 91.0332 li
152.758 90.7412 li
152.118 90.4785 li
151.391 90.1885 li
150.576 89.9551 li
149.645 89.7227 li
148.597 89.5469 li
147.403 89.4307 li
146.035 89.4023 li
144.464 89.5176 li
142.864 89.8096 li
142.718 89.8379 li
141.321 90.334 li
140.827 90.5371 li
139.896 91.0615 li
139.633 91.2363 li
138.645 92.0518 li
138.527 92.1963 li
137.829 93.0996 li
137.8 93.1289 li
137.364 93.8857 li
137.248 94.1191 li
136.898 94.7012 li
136.52 95.2832 li
136.142 95.75 li
135.734 96.1289 li
135.24 96.4775 li
134.687 96.7695 li
134.366 96.9141 li
134.075 97.0313 li
133.697 97.1191 li
132.999 97.2637 li
132.94 97.2637 li
132.3 97.3213 li
131.602 97.3213 li
130.933 97.2344 li
130.292 97.0898 li
129.71 96.8848 li
129.186 96.623 li
128.721 96.332 li
128.343 96.0117 li
128.313 95.9824 li
128.022 95.6045 li
127.818 95.1963 li
127.702 94.8184 li
127.702 94.7891 li
127.673 94.3516 li
127.76 93.9443 li
127.935 93.5078 li
128.197 93.1289 li
128.546 92.751 li
128.982 92.4307 li
129.506 92.1387 li
130.059 91.9053 li
130.7 91.7314 li
131.369 91.6152 li
132.067 91.5557 li
132.766 91.5557 li
133.493 91.6436 li
133.813 91.7031 li
134.192 91.7891 li
134.424 91.8477 li
134.861 91.9932 li
135.065 92.0811 li
135.647 92.3438 li
136.142 92.6641 li
136.578 92.9834 li
136.957 93.334 li
137.305 93.6826 li
137.625 94.0898 li
137.946 94.5264 li
138.295 94.9922 li
138.79 95.5459 li
139.459 96.1289 li
140.332 96.5645 li
141.264 96.8271 li
142.253 96.9434 li
143.271 96.8848 li
144.202 96.71 li
144.581 96.623 li
145.104 96.4492 li
145.919 96.1572 li
146.676 95.8369 li
147.345 95.5459 li
147.986 95.2832 li
148.539 95.1387 li
149.004 95.0225 li
149.354 94.9922 li
149.615 94.9629 li
149.79 94.9922 li
149.906 94.9922 li
149.994 95.0225 li
150.11 95.0225 li
150.139 95.0508 li
1 0 0 rgb
@
158.52 95.0508 mo
158.491 95.2256 li
158.491 95.5459 li
158.462 95.6621 li
158.433 95.7793 li
158.404 95.9238 li
158.375 96.0996 li
158.316 96.3027 li
158.258 96.5361 li
158.142 96.8271 li
157.967 97.1768 li
157.764 97.5547 li
157.443 97.9922 li
157.036 98.5156 li
156.455 99.0693 li
155.697 99.6514 li
154.679 100.263 li
153.427 100.846 li
151.885 101.34 li
150.11 101.689 li
148.189 101.836 li
146.21 101.748 li
144.29 101.428 li
142.544 100.903 li
141.06 100.205 li
139.837 99.418 li
138.848 98.6025 li
138.12 97.7002 li
137.539 96.7695 li
137.073 95.75 li
136.753 94.8467 li
136.462 94.1484 li
136.229 93.5654 li
135.938 93.0137 li
135.617 92.4883 li
135.269 91.9932 li
134.832 91.498 li
134.337 91.0039 li
134.308 90.9746 li
133.755 90.5371 li
133.639 90.4785 li
133.057 90.1006 li
132.882 90.043 li
132.213 89.7227 li
132.096 89.6641 li
131.281 89.373 li
130.408 89.168 li
129.564 89.0234 li
128.721 88.9951 li
127.876 88.9951 li
127.091 89.1104 li
126.363 89.2559 li
125.665 89.4883 li
125.083 89.751 li
124.559 90.0713 li
124.152 90.4209 li
123.832 90.7998 li
123.715 90.9746 li
123.686 91.0332 li
123.628 91.1777 li
123.541 91.5859 li
123.541 91.9639 li
123.686 92.3135 li
123.919 92.6641 li
124.268 92.9258 li
124.705 93.1289 li
125.229 93.2461 li
125.84 93.2744 li
126.509 93.1582 li
127.295 92.8662 li
128.168 92.3135 li
129.273 91.4404 li
129.914 90.8281 li
131.136 89.7227 li
132.416 88.6738 li
133.813 87.7422 li
135.356 86.8975 li
136.985 86.1992 li
138.731 85.6172 li
140.535 85.209 li
142.427 84.9756 li
144.29 84.8887 li
146.181 84.9473 li
147.986 85.1787 li
149.731 85.5576 li
151.361 86.1113 li
152.875 86.7803 li
154.184 87.5674 li
155.115 88.2959 li
155.319 88.4697 li
155.93 89.0811 li
156.628 90.0137 li
157.094 90.8574 li
157.385 91.6152 li
157.56 92.3438 li
157.618 92.9834 li
157.589 93.5654 li
157.502 94.1191 li
157.385 94.6133 li
157.21 95.0801 li
157.007 95.5459 li
156.803 95.8945 li
156.803 95.9541 li
156.542 96.332 li
156.25 96.71 li
155.93 97.0898 li
155.581 97.4395 li
155.232 97.7598 li
154.824 98.1084 li
154.388 98.4297 li
153.893 98.7197 li
153.369 99.04 li
152.758 99.3311 li
152.118 99.5928 li
151.391 99.8848 li
150.576 100.117 li
149.645 100.351 li
148.597 100.525 li
147.403 100.642 li
146.035 100.671 li
144.464 100.555 li
142.864 100.263 li
142.718 100.234 li
141.321 99.7393 li
140.827 99.5352 li
139.896 99.0107 li
139.633 98.8369 li
138.645 98.0215 li
138.527 97.875 li
137.829 96.9717 li
137.8 96.9434 li
137.364 96.1865 li
137.248 95.9541 li
136.898 95.3711 li
136.52 94.7891 li
136.142 94.3232 li
135.734 93.9443 li
135.24 93.5947 li
134.687 93.3037 li
134.366 93.1582 li
134.075 93.042 li
133.697 92.9541 li
132.999 92.8086 li
132.94 92.8086 li
132.3 92.751 li
131.602 92.751 li
130.933 92.8379 li
130.292 92.9834 li
129.71 93.1865 li
129.186 93.4492 li
128.721 93.7412 li
128.343 94.0615 li
128.313 94.0898 li
128.022 94.4688 li
127.818 94.876 li
127.702 95.2539 li
127.702 95.2832 li
127.673 95.7217 li
127.76 96.1289 li
127.935 96.5645 li
128.197 96.9434 li
128.546 97.3213 li
128.982 97.6416 li
129.506 97.9336 li
130.059 98.167 li
130.7 98.3418 li
131.369 98.458 li
132.067 98.5156 li
132.766 98.5156 li
133.493 98.4297 li
133.813 98.3701 li
134.192 98.2822 li
134.424 98.2246 li
134.861 98.0801 li
135.065 97.9922 li
135.647 97.7295 li
136.142 97.4092 li
136.578 97.0898 li
136.957 96.7402 li
137.305 96.3906 li
137.625 95.9824 li
137.946 95.5459 li
138.295 95.0801 li
138.79 94.5264 li
139.459 93.9443 li
140.332 93.5078 li
141.264 93.2461 li
142.253 93.1289 li
143.271 93.1865 li
144.202 93.3623 li
144.581 93.4492 li
145.104 93.624 li
145.919 93.915 li
146.676 94.2354 li
147.345 94.5264 li
147.986 94.7891 li
148.539 94.9346 li
149.004 95.0508 li
149.354 95.0801 li
149.615 95.1094 li
149.79 95.0801 li
149.906 95.0801 li
149.994 95.0508 li
150.139 95.0508 li
@
143.562 104.834 mo
144.29 105.185 li
143.504 105.505 li
ef
.17466 lw
143.562 104.834 mo
144.29 105.185 li
143.504 105.505 li
143.562 104.834 li
@
145.075 85.1797 mo
144.29 84.8887 li
145.017 84.5098 li
ef
145.075 85.1787 mo
144.29 84.8887 li
145.017 84.5098 li
145.075 85.1787 li
@
grestore
grestore
0 0 0 rgb
%ADOBeginSubsetFont: CMUSerif-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.systemdict beginKFYYYE+CMUSerif-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/space <1C60D8A8C9B81F2CC3> |-systemdict /gcheck known {setglobal} if end {end} ifendKFYYYE+CMUSerif-Roman /Encoding getdup 32 /space putpop%ADOEndSubsetFont
/KFYYYE+CMUSerif-Roman*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /one 3{/.notdef}rp /five 73{/.notdef}rp /minus 128{/.notdef}rp]KFYYYE+CMUSerif-Roman nfKFYYYE+CMUSerif-Roman*1 [3.49213 0 0 -3.49425 0 0 ]msf22.4429 178.127 mo( )sh234.503 14.4492 mo( )shgsave
138.818 92.1963 mo
144.552 92.1963 li
144.552 97.9336 li
138.818 97.9336 li
138.818 92.1963 li
cp
clp
gsave
-.75 191.813 mo
239.509 191.813 li
239.509 -2.46777 li
-.75 -2.46777 li
-.75 191.813 li
cp
clp
.698638 lw
140.623 95.0508 mo
142.718 95.0508 li
@
141.67 94.002 mo
141.67 96.0996 li
@
grestore
grestore
%ADOBeginSubsetFont: CMUSerif-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.systemdict beginKFYYYE+CMUSerif-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/two <1C60D8A8C9B7A73DC50B0411757B441481CCF7EF812EE4807E476B52FD28648031338ABE585054ED5D291329A83457A15869DF50FD77FD36DFA67736343B1D61C0174BDE05C1FAAED530D27906801F1D8F20283013A09F4825C7AA38094E26843B668311FEBCF6ACB6E3906AA281598B98C24136DFDA219BC70ED0B43C6A9DE2F304AB8541648932C12FFF1D98F3DDB53EC0D66CFD85BD59D9E4> |-/A <1C60D8A8C9B6E3FA234780E51B74F225B937BAAD654467D9B9969909765F61E5A965063AC338FDDD3C9F3A101885E1ABD8BFB9076C6D7E8486EE308B04DC793AB12D586DBEB37D4F410FDE0170F79140A3411FCF925319CB2DD96184E219E2122E1004B2277546F7EFAECF4921DC1B177EF865A6A6FAF8A634BFE62B0512A95C98DC631F5E1B551CCD5C847433759FB5D190E648> |-/D <1C60D8A8C9B6EEDBC0C41A524F9E758CC382DD66BE427C2AC208493331271EA7A18BE9DB3DA4F8406E0FB2A7E986AD7C712EF4EF5C6CFCC8EA28C6B15DA35AB3D7F19A526FCD98BE2949FD817EF28213422553B78C661A9D14ACEE1A45B5A5374338767EFB404645CBCA2FEA6CAB87D0B6B4FACE4A5F48E393> |-/H <1C60D8A8C9B6E3FA234780E58B87D2EA5F590A170732E8342AECC9617CCD55D9854C3A7188B947CB0583027017514C5D5C03D56FCADAF979F246B48976386B046F6B037E97582CAEFF7CB047EDE8A78C3919A6EDD028AE5A0D6BB4A400ED3E780D164CE5CAEBE1C511F1DA21B26D11AC1451A28CE18683B9F06548E0F4E2BECF55883FCBC4E188DFA4F0DC33B8DC330107D6E4116C44A1EF5CC57703E2B8D80E72BF867E3BA946C88083DC8AE9A9FF9CF748FBE89C> |-/I <1C60D8A8C9B803802DEC08D98BCB1124DC97CC71898B482428657C355DDC4B547DFBC3B8344AB5C11D40BE76A3E4CDDB13D5417CEBD2BC49745CDCBE69B8A7B52A4ABD6107354E38F39161360B2D9E9BC066E240159E8EC0004E1C> |-/N <1C60D8A8C9B6E3FA234780EB1A04772A480C0BA74E47A04C1020BB7FF09C390F565598EBF88DDB0974FA22D9E5DB5CCE1509C410A7EF27D200A69A4B6512D49D977E8386ECBA10B2F54651EEB43A6B07538309D11181CE8C13F95A7EE95D660314496EB30C36F878243A2394F6FC3C20AEA90C93BF549B2B6ABE0FBB7EC755214B2715BB50C4FCEA9419657C35698A77A84D3093088B> |-/P <1C60D8A8C9B65DE708408E897D8681FFF528127AC4B715331E00A8CA61FDBCD187E3948E8A98A808B375140E37D61DE8D6FF4590EC3471F62A8920EEA63FD1E7F92FCE188C2D9CEA24D13812B71E51C9B074D458B0AFB08E48DF8E6D84A02F1EF5F978C7A10BFAA0C300D407FAA749A8AC89466D387D6B1BF688A266> |-/R <1C60D8A8C9B615D12DC96511BCDF86E8A7C75693A48984A0E7356B506A1E1BC103ACFBF8A0D66C9AB93F1A714625E396A95DFB4167A1015ACB5D5C76E8C8BC8054615EA0E68592489728A32C2EB6AFB95B31828292627ADA33BFFB0736E53BBED853F04991A502EBCC408DD8BAE6B1A93057B3AFE0608121FE5B06852D588EA4C76176FEF94C5C12B63970C1F8D12D4D6BBCD970B3203ED9E9B96B74B7F5CA929DE2755A679A858968F29EE26648393D292BE45F2E5D831C561343DEFF1636931A06BF1284581D1FB9A058FDA9C2FF4E> |-/a <1C60D8A8C9B7A73DCEB5869E93AB192358AC59578AC6D0F9DAB85A7C2DE244D4D0619179DAEC21085E05A3E5A7210E9A6ED2C086828DC1C9CEDCD9DE6C6A39BEB5968A1BF95509FE9701E26332106BBB27E11A5260837E4591163F5C1561306BC00ACFBFA9F0ABAFF02916BC895FE33D6F4C6F766940AE69990E8D0F4543F13F43069E96E886951BE7426B7C7B4F6B348DF06465853213A3248BCF83183DED864D308777C6B07A477047141AAF7F27210933A683B33422C5B0EF3404748DC528FB0EFC7535890D3BC0DCE0B955CFFC2B3A63A3823B9DCCD3AB32ED53B79AE417F1FC> |-/e <1C60D8A8C9B77FE2B98B448A6D851DB2CAC9451BC5A777902E72F60019B14D3F735800187A8780D7D125C55873F3F16D34BBB69BCB7B4985F6877A66DAFCE7053EC521B229F0C87F1C2E26B31A642D86A096AEF6D89BDCE81ABE21CF98A44B9FB5706F9CC870F2A885C3A0F3070BD72C45F4CF5BA2D43D6F0310A5BDF3C1F2BE50343FE892A506C285A4> |-/g <1C60D8A8C9B7A73DB58EA288075BBADC10FA29744D0EBEE6A159C1F53674E4B04A38D3C982709D3BA331DC2C2BB92BEF0E2BCAB685706F022644E84F7518A9028081A5FDC9DCF621F8E6E025543F987E4E0E4D66599DE4420B5672D2C5C78A3B4001EB45FFD7C204635BD759EB1F788AC150CC0A20A77372879206C765EE041B449B1273DC71A1EB01896889DC3A00781126A1F9FA6593ED75676FE5ABAAEB0843ACDB81D25EBFCEEA33D7F49A4623EC2E6AADDDACEC5D42F68A4AF7C5AAAED48DC6AFFB560063CD421DD51549FE23C65D8A511753BE4958C96EC94A8D25CD5A331A77BF39B4C1A63997B4BD060542B418CEF431484CBDA8F83C35D08202A77342DC211DEE8002DF467DF8616C9794BC602359946BA0AF41BA7F914A1C056DCC04123D9F81C616E94814DBB855E4D09B44B059706E9FFE6F1C2F37182BD67E8C0F1E68DF5664BB2CA215A3B213330F7CE73888E1D3CD930BE8AD3261994A5BA9C4CAED5336E54BB1CA86C39A9D9F864BD3C773EB838AFBE671D1B1BFE9355A> |-/i <1C60D8A8C9B8574464F1B4355F119691B996E69E9059AF6BEFC7ACD9408807F348697A41C25CF2F5BDFD024BC2AF3C86BA0B3C05AE1D8D7D8BF00AD69351CAD7D5BB0A5320C8FD9810E17B9D8E02D7039A36ECDD62AE5F78732D9AF8F9897EEA464278AEED0EB5AE3D85E67EA83F0FB1857F9A8C048F> |-/l <1C60D8A8C9B8574464F1B434832601212DC6EBBDB0A085EE371973855AE4A32CEEEC6CEBB5E425012B167ABF3A4DD1A6554514AF61125127FAC3918305F8E31383F779E47F2892BD4A409F0FBF1FFD> |-/m <1C60D8A8C9B6B41CBB73614D2DDC1714A2872D80DD283A086573D32193A40AD6D931A58470954259FAC3BEA3EFD9D3D468049F31B972A1EA3C7FC4090F326077B3B45B339E8CD209969F9BA5DC7128EC90D43584D6F2C722F5FA22FB81122E851177AA0235262BD9E23A3401D29AED82AD32B86D56E933ED8F4C8B7CC5E22E33AAFF5DF464B2D518E5B6FF0F0886E35FB5CD90021585A861BA2B04B1C519E4E47FD6D19496BF4E4D1D732B745C4350FDDCBC06F08F28F8CB103A8A9094FA11E71C32DAF4F0246038CC47BBFD813EE10976F80EE99C2F73D28495E350> |-/n <1C60D8A8C9B790A83D946A52D13353207152D3DCC239C677F325D8BCB512A1552AD393012D329C2DCB638248DB8557FEAADD41C5A1E999FF15D409D4C65F5AFDEE221E9FA30AF1F9E3BB93495F559B44D11A7D0549A9E39556C6E836D4CA3B8D2D1509DE72160FD61B9450E59713C7D79BCA124595660911F9E39E690EC41902AF3FA6555F82A63679D5D19A2698CC51E340466ED15789E1D8834219> |-/o <1C60D8A8C9B7A73DCEB07E09D16841D605E4F67059E6ED314FDC718296562988C2B46142EB322EF3939CAE354B7E55FD661DFF237CA71FD335E71456E698F8C0F8472C702E8F411702EBB9F00C5C847CFD63F9A2B5100B0912366AFD52B29CBD9D86DFF49D84DF43A08E6039EF8908788BEEF50F79> |-/p <1C60D8A8C9B790A84D73DFE4D381CFD6963C979633A535C3C749ED1C7152D4709CDCFACC592AD067EFE8970C23CB25681E69287299A22884DE8BDE1505B84CF6AA7511869BD2B6A6E872ED8F4FB950C326B4FB95082944712FB75D5A3254095346BEA5A595AD556AD3A9D3317DB6549C31014C28A6F4A2E9297C6A649C3F01B8E219A8D9A507BBE73A485E32408A43405CE351C757C6B087E383C4E5549808688C96DB79A996B96DC273A9BC98ECA850D69154C730BFD4278B52E37BB92F33> |-/q <1C60D8A8C9B78C66EF5247F5707C9C740E624C8899404A06F6848BFD2DCD181FB7D274A50A192DB05BB43FEBEF68A1F530DEC4BD11AF0AED748988BA60AE9D12F8BA7CA297DAC8AA560E7A58B7E1F16F562C09BC5900B92D56A4968433C72E15AA4E9432074F73C34E350142426CF19FC6B76645167A82BEC04D3626279EB89E74DB2DCE6B0921A0> |-/r <1C60D8A8C9B734780FC88FD3AECF134166BDDF8A4F36F510B86071E1C8D37D5CC317A859CF192618E335A018056977327199A88CB8A5B59464B0A92DD117E0B8A2D657630C13C88067846EA56753D04D3FD4B146A7E72A0E39C8181715EC30765957D24DCF441A27F184C7A01484ED170D92263EA4CEBDB264EC89D1229F9D2F6033AB> |-/s <1C60D8A8C9B731071688E37ED9B7C64FABF173B75F74601187E560E64B89407F48DF864C69E22EFE816414A33C117471210D510E4EF63643B1328193E752287DAA56CEF45DF2BEA947BF354F35864BB26CD7025C0F34D0C49535B8B692A6B5C45D43EBE2595D937FC0EE3C4BE29C6EED60FD29E8995A30999D351226EDB0B3E0AA4598B2C93624AF4D820EB8FF6DB3802D4871BE4A75F66D470AD2E4D2CE4AFE38746B6F5DD32CB50EFDC48CDC63B8325BB458FDCBBCF379E56849E031C34BF49761FFB824336E0C1DE2D2202144EB6D08D3DFD880F96EE2> |-/t <1C60D8A8C9B737EC5C828C4ECF4C405050A99F8A15BA02A5AA54B37FEAD9332521E419D50F5E5D8B4CDE8129224B887792FBA606EC0BBA947EFE193A3443D71FA7DA33B739E1D8215FBBC104C391018A65D67B8044EEDE065D8529DE94FC9F24832EB9FF88F626F290CF555A9756D8E3065C6710815CCE635BCABAF46E7E60A0DB7B13B8> |-/u <1C60D8A8C9B790A83638025F4440DA24B326E0A1F5D7AD526D7F41F79ECC12BB9B394DE8FA2310F677A900151EDE5FDB14959A7323B99B6E1C59AE8E9E6B7BA3BB1F6B327B3812889810E13637A562F95CC961967ACA2D5BE69CFDC2EAEE52168B2F1FE17207BA8B036C2E4E8064D6C5224EFD1C04718E9497C24149311144ED162DD479479372B5A7BF00943098EE2750B22E16B070341EBF21C44BABEBB97FAD87> |-/x <1C60D8A8C9B78C669F28CFA812DED67D2049D95925824051CB6FE0BECC0987A21C5CB0FF4F37782C77BB1C99EBA4339437BAE4E882F098C371E18C96B2511B63A7D6ED88494B2BACFA684B656905BA21AB806F38F9C6F5263F3D602BC77FC728056D33C762362C68F969A5094C9255C860119FEC3BC80AD2C64FA9221E0A01AA4F6805B6303E89B2613622BF1052D3086E817DDD8BAEB15AA14BBE9B6445D053B113A64FC435A5B2EAF00F564D0E02C53C266C8E546FA73EEB8F96D428734590451184D185A8E0A5020D> |-/y <1C60D8A8C9B78C66EF659E9082A1CC49596AEC819B9A9C6264B2D01FC7B64AB7FB70A4FED9372C9F75AB17D1FDECA458047272AE35572CFEC8C0E0DB6D247997B66E06A17BF1F6ABC0DEDD54FC83827DA33C5D43E6AC13C07F72AFBB360A078FFD755660F7AF81F13EF828FEF0804A68C26FA841589ADEB11A08837B6E08139FB246D0713E3C3D6E9C3F30B59D0308558230773F1D6CB4CDABA9F6D83D677ABAD6CF4C3F2A4B140D833A> |-systemdict /gcheck known {setglobal} if end {end} ifendKFYYYE+CMUSerif-Roman /Encoding getdup 50 /two putdup 65 /A putdup 68 /D putdup 72 /H putdup 73 /I putdup 78 /N putdup 80 /P putdup 82 /R putdup 97 /a putdup 101 /e putdup 103 /g putdup 105 /i putdup 108 /l putdup 109 /m putdup 110 /n putdup 111 /o putdup 112 /p putdup 113 /q putdup 114 /r putdup 115 /s putdup 116 /t putdup 117 /u putdup 120 /x putdup 121 /y putpop%ADOEndSubsetFont
/KFYYYE+CMUSerif-Roman*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two 2{/.notdef}rp /five 11{/.notdef}rp /A 2{/.notdef}rp /D 3{/.notdef}rp /H /I 4{/.notdef}rp /N /.notdef /P /.notdef /R 14{/.notdef}rp /a 3{/.notdef}rp /e /.notdef /g /.notdef /i 2{/.notdef}rp /l /m /n /o /p /q /r /s /t /u 2{/.notdef}rp /x /y 5{/.notdef}rp /minus 128{/.notdef}rp]KFYYYE+CMUSerif-Roman nfKFYYYE+CMUSerif-Roman*1 [6.28584 0 0 -6.28965 0 0 ]msf86.0288 5.27734 mo(Nyquist )sh109.606 5.27734 mo(Diagram )[4.79639 1.74072 3.14307 3.14307 2.45752 3.14307 5.23584 0 ]xsh135.131 5.27734 mo(\177)sh138.676 5.27734 mo( 2 RHP poles)[2.09326 3.14258 2.09326 4.62646 4.71436 4.27441 2.09277 3.48877 3.14307 1.74121 2.79053 0 ]xsh114.693 189.425 mo(Real Axis)[4.62646 2.79053 3.14307 1.74121 2.09326 4.71436 3.3125 1.74121 0 ]xshKFYYYE+CMUSerif-Roman*1 [-3.84897e-16 -6.28965 -6.28583 3.8513e-16 0 0 ]msf5.27393 111.386 mo(Imaginary Axis)[-2.27051 -5.23926 -3.14453 -3.14551 -1.74219 -3.49023 -3.14453 -2.45996 -3.31445 -2.09375 -4.71777 -3.31445 -1.74219 0 ]ysh49.2456 111.444 mo
117.255 111.444 li
117.255 78.3076 li
49.2456 78.3076 li
49.2456 111.444 li
cp
1 1 1 rgb
ef
49.2456 111.444 mo
49.2456 78.3076 li
117.255 78.3076 li
117.255 111.444 li
49.2456 111.444 li
@
49.2456 111.444 mo
117.255 111.444 li
0 0 0 rgb
@
49.2456 78.3076 mo
117.255 78.3076 li
@
49.2456 111.444 mo
49.2456 78.3076 li
@
117.255 111.444 mo
117.255 78.3076 li
@
49.2456 111.444 mo
117.255 111.444 li
@
49.2456 111.444 mo
49.2456 78.3076 li
@
49.2456 111.444 mo
117.255 111.444 li
@
49.2456 78.3076 mo
117.255 78.3076 li
@
49.2456 111.444 mo
49.2456 78.3076 li
@
117.255 111.444 mo
117.255 78.3076 li
@
%ADOBeginSubsetFont: CMUSerif-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.systemdict beginKFYYYE+CMUSerif-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/F <1C60D8A8C9B6415B3711EB1374ABAAA5807BD16A8CFC6B263ED2B34454BA6A5D982A1B42AB391CDFDC799B800C564FA47D3F9B0A1E81DCC7E2BFDB2FCE690F2F81F94996BBCB36C09F477C8CC1DFC15F702381F9E8CDB881BF299C3A37F6410BDCFC5907EBE3C95E729408D7CBB5CD625A72FAD4B25FCC54EEAED1B04115> |-/b <1C60D8A8C9B790A816BA887E1C031606A64A653284C9C1A56800A8DD352ECB9B7F60086BB5C1EBF34ECD677E7060C5E71A43161FFA11A821F938D60254A92D76BEF86C5A0BC79245BC87071942A931630D7B4F690BB0E219F17CF072E8D6D2A25C13DBFEA39BB0BC2096730D93D2D511CB0B7DA9EA3B9F6A017A8FDA0FC827459FBA42E19EA1F91ADE15955BA9ABD7BA8B10AB8B203E5EAAB32B9521E283E7A7ED8B3A4AF2B249F4DB019F2E024492C89A214863BF88249A2FF5ED9F91B4A9BD41BC0C32EF1288879573191E30> |-/c <1C60D8A8C9B77FE2B98B448AAC15CD6088822B1EF090FF62DBC2AEFE7FED9F80C000ED6EB3511E99F4F438B5E3C3937C6D821BEE2BE976BE374E7BD57CABA9F1CB9D2CC4C0FB1E3E72CB005342F2AC3E61C18153EA3E0FAC7235C15652258C87DFC2DFD2324DFE4A1736F204EA83202B302DC82D8A3F8A2668BE1BE8E036D03F70DDC3E03B37> |-/d <1C60D8A8C9B790A83638025F58AA6585B9D21134BBF0D8C7DB1BEAB1B57C340ECD9370518EC665287D08BF61809894217F95CF7EC71B5849DA855D10B7D21E87B97EDC8CA6463B39822A3ED88F86AD7AD5FD881FBC9C267EF28239ECC8B93D73BAFED0D12AABFEEF6669F858132AE178B7A9097F9E80EFC328319BE9B02BC65F9C26E168DD762774ECADB180DBDA0E1F06DFE60E386A86443A8AC7F43DDD65F3D06B3DE100A8926641FA355611105CBF681FB173F7BF8DE407CF31005E> |-/f <1C60D8A8C9B83BB81FA130945C39F84FB8E8012CD8B808EC7D57A69016EFA2750F6D88AE4F0663D9FFF1C2382F4431D70DB829B07E72091FF8BF742D865A29E5E44B142892DAD7353474D4E9221B38DC3BE2430070A023379EF6412FE80313E1C652E432B28F49D3A2EA714E90A97322669C54EB83C4B64D255CA3F585BA> |-/k <1C60D8A8C9B78C669F28CFA812DED613F72D4AD54240BEFAF9812A50A83C3940A594AE8B0227C37F86478C68AC1FEB1723557A4DB76A0CC4C43F46557272C55161B4EC23B938C2CB245B30F318677E17409C976F4AD72B5AE12779A89C90703BA4B6EB29C1B1492DA5C511B991AD4ABD618986C776C2D039DE103964FF1C11CBA7B0D5839ABA47FC0E5EBD714122498A93887013407F571E95BD4A099A130197CBBF5269E186DC8F62B3604C5C2DD5EC588E0BB8C60C0A07A289F35F9BAA> |-systemdict /gcheck known {setglobal} if end {end} ifendKFYYYE+CMUSerif-Roman /Encoding getdup 70 /F putdup 98 /b putdup 99 /c putdup 100 /d putdup 102 /f putdup 107 /k putpop%ADOEndSubsetFont
/KFYYYE+CMUSerif-Roman*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two 2{/.notdef}rp /five 11{/.notdef}rp /A 2{/.notdef}rp /D /.notdef /F /.notdef /H /I 4{/.notdef}rp /N /.notdef /P /.notdef /R 14{/.notdef}rp /a /b /c /d /e /f /g /.notdef /i /.notdef /k /l /m /n /o /p /q /r /s /t /u 2{/.notdef}rp /x /y 5{/.notdef}rp /minus 128{/.notdef}rp]KFYYYE+CMUSerif-Roman nfKFYYYE+CMUSerif-Roman*1 [6.28584 0 0 -6.28965 0 0 ]msf63.7666 86.4609 mo(Full )sh76.9287 86.4609 mo(stat)sh87.4258 86.4609 mo(e fee)sh99.8086 86.4609 mo(dback)[3.48877 3.48828 3.14307 2.79102 0 ]xshgsave
49.2456 78.3076 mo
117.284 78.3076 li
117.284 111.474 li
49.2456 111.474 li
49.2456 78.3076 li
cp
clp
gsave
-.75 191.813 mo
239.509 191.813 li
239.509 -2.46777 li
-.75 -2.46777 li
-.75 191.813 li
cp
clp
.450767 lw
51.4575 84.3066 mo
62.6323 84.3066 li
0 0 1 rgb
@
grestore
grestore
KFYYYE+CMUSerif-Roman*1 [6.28584 0 0 -6.28965 0 0 ]msf63.7661 96.8711 mo(Full )sh%ADOBeginSubsetFont: CMUSerif-Italic Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /CMUSerif-Italic def/FontInfo 7 dict dup begin/Notice (Converted by Andrey V. Panov from TeX fonts. Some glyphs are copied from Blue Sky fonts released by AMS.) def/Weight (Medium) def/ItalicAngle -14.0401 def/FSType 0 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 110 /n putdef/FontBBox {-1003 -354 1459 1110} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 -0 430 442 666 666 677 716] def/OtherBlues [-206 -194] def/BlueScale 0.0253845 def/StdHW [31] def/StdVW [70] def/StemSnapH [0 23 30 31] def/StemSnapV [24 33 48 53 56 61 70 78 86 91 99 107] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/space <1C60D8A8C9B804566C> |-/n <1C60D8A8C9B7E965DE634C8C36C9FF169D9B4C02D8B84EA03FBDC73BC26EF3BF9B929CFB9F10922C6DEB3B10C618BA15DDCFB1E194EA481780BD20890FB8D3C0E02AB1FB70E7EF27F4FFA79EB8C1B4C21A4829039893E8C948312443D5615023DE63ADA62D05798180FF3C42FB8B028C248808142A5326A19CEF7255DE97192EEF96C83A74E6F2C16558CC8C6C739907C76A4AD9FC0EAFAA4578D45C3E8C472C1BA34BAC69C46C904D879C6115952B3A66F26512978B0B0DF631E9AEA594B633A0BC8DDB16434CCBCBBAD2F8DFDAAAAE99EB5F6C39A098337B16> |-/.notdef <1C60D8A8C9B6ED05B71B281B14BACC0E0F6998C26A83E375A07AB156E33D3C0D0AE7841ED3C58AA89F8452D8B14DFBBDB595110D4073E8E9BBB4C7CAABD777414D8BA1B96490CC4DB8D55EDD27856AB7DC35AC4EEB66EA52ACF8B5> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/KFYYYF+CMUSerif-Italic /CMUSerif-Italic findfont ct_VMDictPut/KFYYYF+CMUSerif-Italic*1 [32{/.notdef}rp /space 77{/.notdef}rp /n 145{/.notdef}rp]KFYYYF+CMUSerif-Italic nfKFYYYF+CMUSerif-Italic*1 [6.28584 0 0 -6.28965 0 0 ]msf75.4644 96.8711 mo( n)[2.25 0 ]xshgsave
49.2456 78.3076 mo
117.284 78.3076 li
117.284 111.474 li
49.2456 111.474 li
49.2456 78.3076 li
cp
clp
gsave
-.75 191.813 mo
239.509 191.813 li
239.509 -2.46777 li
-.75 -2.46777 li
-.75 191.813 li
cp
clp
.450767 lw
51.4575 94.876 mo
62.6323 94.876 li
0 .65098 0 rgb
@
grestore
grestore
KFYYYE+CMUSerif-Roman*1 [6.28584 0 0 -6.28965 0 0 ]msf63.7661 107.411 mo(Four p)sh82.5352 107.411 mo(oin)sh90.9077 107.411 mo(ts of )shKFYYYF+CMUSerif-Italic*1 [6.28584 0 0 -6.28965 0 0 ]msf103.096 107.411 mo( n)[2.25049 0 ]xshgsave
49.2456 78.3076 mo
117.284 78.3076 li
117.284 111.474 li
49.2456 111.474 li
49.2456 78.3076 li
cp
clp
gsave
-.75 191.813 mo
239.509 191.813 li
239.509 -2.46777 li
-.75 -2.46777 li
-.75 191.813 li
cp
clp
.450767 lw
51.4575 105.417 mo
62.6323 105.417 li
1 0 0 rgb
@
grestore
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/KFYYYE+CMUSerif-Roman*1 uf/KFYYYE+CMUSerif-Roman uf/CMUSerif-Roman uf/KFYYYF+CMUSerif-Italic*1 uf/KFYYYF+CMUSerif-Italic uf/CMUSerif-Italic ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (Im\617ne Goumiri) ()%%Title: (robust1.eps)%%CreationDate: 17/01/13 00:04%%Canvassize: 16383%AI9_DataStream%Gb!R&pO;D?dP,ubJ9rDm"@BFL4Uk=`$E9+nL]JkHTuFgRT=+\Yf5og7fJiNK8FG-M"ST>!He/%IAk=eIVU7pZ"Tl[%FO97^5)R7m%oDU/-@/SDWf$CW^IkKgj"HL(Fdb%HPc,Gk1>QtOI@VhKCTl`2Y:,6O5/f@=F;B41:&)5RI1mhOj_mVBCQ\N2I4O3gsJ&Hp<9`0Dg%UAmOEonNM9(OKWggJC<U%OP<Mm%uDWh=p.+YV-LEH!(+2GTujmD*sljF>W9*V9T-bq;YFQkk691./1];T4MI?rl?FT`G)g53M6"L%P+;8fkm[R82+\U%`dg.XO.Y[_a+JPRg6""]'2n#'&!+d++O_U.ldB;FKEIH@^uDq/1t!W;B?:,2e$V%/fDiogr["??PD>pI."@:,%:L_F>_FSV<(Zbm*V]k_'4`MYX/gVCTcbZ7EY*=J);B@/?\QHurjg'i;IS;L:/Yb*sqPu.F,O[j[`/Z*AHL^R%hYef5J5'LjjHVp>%T(XH*B$d*qY4BUn9!GX18*VNfOnqC?6upYGZhc1(ck,:LB`]J;lqJk`i?7U8WXs\(2=Z_QlMrP,d\&>--!3XiA/]-D:AJtX*@@?M%F!-d:KKk/r9G9DM1glj&5dT`+D'*!"[T"Bbp:quYj?i9`F9d(XV?Eng+rAG-\K'^O<UP$P-3Ln3I3F#rAIX,LooC:-FI5atJ^PEt%]$d#'%`?61l4cMD'*N:tG*.ReBU;<eZ[c1U!i3uu7"h2#$p6M4rq70.9MkR&pr@CLRSMmY/r-X,P56]LiB,*=;i\bn*(QV.!nO6V%dV17t:?/g*)G?pU==TjW"LZKZ%a3pR==0A%Rc$8nb2oiAI_o/;<@VFV;@.-)9),2]_D6^n:B_o4`nH#pcNSmNTbp^U.6\FiI>To4%k8]:2^1&PX'>@p)m$$.%q@%_(Y?2!UKWj$HPnLGVp'G*r)tjPEYpE!ig+r@-?a8M`Nk]%q&145#Ko`(7?hfLi"9F!Nq1G&5)H/+`%.cDn[8UF4;Vmo[\.!3C4jcN_urkhXd5CCG9-jOIikqgI:I)f.;5F'-N.^Ui%%q"iGp5\\c?Rb.4$bg(!llWr>/lF-lFJ\I=U+-8$%\LKfncR=7,l<&ql9r/6b3Q3$oVg)(KZt5M0["S8db@'d<ai*%ED;&e%'`3Zh=Gk6[p5dXTf#:]AK>$j[<680`LJj.!T[KsbYUV0'%Zm"R2;Q).FHD0nod[ai;WD;DM\fp2c8(>7Mgp*(NS[M;Ze*$?F`LLZiQ"J0[8fQK95lOXVe[:t!nHDm/eMU!rP:l`3\lH;mjUZ.m%18JZrc=N9`3ZenXQ',6RVhU)0MQ[AR[S(DA/49Eq410sInh6,u:\8l-&'$L(Vn^]1^-F/:J'm0<^J'B2fAGi-CmKOrAl[JdjWDgt%-i,q'="MegqE+Z=$^Aj,(]Bp(X&S;,rLNpt["$Ss,Ob,ens+Z*^X78h?QrWFVM&ua+p`QS;s(DQRGe;M5EX9'r#It`VtB^WR?dpl%8c2jBV`9'e8gH/g,H6u#-*S_F9-rNjPkmJ@/KeEj3BVrg6jA.]=8]teBK`JF)*eLS]=n7sM_JiSr&'b4hshNUZ\gV(`E2s@qi1XG%R35lfZo%dHYUC:P.t/;UmhBj>LM`u^$,'751\2]B7;L@J6CBLTpIp:hJp]2MrM4S#hj&DNCAKTA]Rsuc4oq5mD`()=Pe$MVi#=CP%g*DiYp,gGo=sQ-)SgZ*'/LsdNB*A)E=lhfa.Q'i@mn/LCL;;*NPG5T7QR0Da?`D-0pfp;8rj\bci%l,GSQMO/^eH5b3OKWgbQoX=%rc@Rq_uEk9V^t?pF)6F3/&:*W.$:L)TZ'S.lX@ClREZ:H,bZ6rYDf1<899=&=J/M>4C>r)n;R?Dl)PqSg+LmXA3%R2CE\(s,7os"%3G^4j,Qt54.$nPU'IaEOTQZ?'RATb`BQo@a%U9?EjoBjr_IeoS'`sF`3e34k9eol*"p7$5-8QBe7VJUI,(E!".^V+nNYqNm)-Tge%9dN6EUI_?"+nh--5bXDH4itMC(41u3,]+c5O="NSkX+e!1K5DF-=%ko5^l)T8a)q2c&oH.'c_+scjHHldSo*G`>Q1S1KXn,Jl9e2%V?jS\a(gMP8lC?FRU]\\7(QL--9uXF;GNEabu,\H4@^eqHBM)MRE6XY\Kn!reE0X1E`?a/:&9c"dT-Lf60(/E*&'rnr=lLB.-ICe%$?ZpK'Tj&o;QAdhqG99gr0T=l<[:JfV%pN@rQZ!(9Ca(=MY'(?]eSh3JUt>m.$Y?-EmXAI.##>I"B?4'a&7ct_]Sm@i'10&QqWOi%J<"9!7$tB?e46NID]*9p:d`&Y&K[^SWdhg`*.^Fu=LTYW6Q&52KKpe&8o&aPkbK[WJ5odl$N#`$,OLb!PSkX6,.nI$gi<U)cdF^E%MRJ`T^IcUO<I7=%'X,SR2TZZ^%$>ldD`jKh7jY&sa*q[,";@%Id%:``X!kChas)7*T+m,j'hncNb:3!dU&(;l\27,.A^\L,<L=u[%9G%OjPcY)00X]9M(ofki%\VAqrJ>A_P'2Y'Tg^*:,QCU;JD\.P8i(^\A25U!]>Pp[*RO.XQ9kg)*7BE^p)N0@+Xf*>j;b]<]hPA[%"XW_H<-hE=[N-Xo@3`f$R[I3&^elSS%HeSd"1F.h941A.![oLjc0tnh$A"M=E_N^\Qs2i2J-%j;M!-k8$2T<S,Bsggdl*S`H-E&V%;5tAcM*9!)FVA??D_M`9"U)!LV:=(hQ_;gs3GJ!\;MmA!&*R+^^F'/kqK*,t'lap1I>/NQ)c%)<VEO">FeVo1d1XtCU:>3M-,Qu.%@Rf'O/@J/Ze8mDF8.gk,<5=(Y<4.h+b>WjeYbu>=Z8pH2-'eTa*XEMG'Wm3qUWau3mNnDBZoon<`!7P+Rj#@6lX64'2/KT%\u(L"%=X'CF_&O^X7GFY:76*hb:R-9a`QW#HPM1<#SBSE>o[ctQXUjMeJk.uGIn:dRBV5V,\Z!uA@p*AZ+Lj`YNha@h2N)r,3mFM"bbp7L%&nrdFrANT%TjsJDG?#/)ImtN*_*8*EPqS#2&W+>d<q/#^bRqI]oGZloWhpG4,8AB8l(h4Yr.E^\#?k1$-Dc&4+DkX7U@p*-@8Wtl%L2"#fnqA+sdC'`u6#($@@qA^63]1Rb^>?&P,*1YX&?8`dFDF].)P1V(_=DWGS>J/H'baS7'fqH0R$fo*1S'6X-X':F<RFWrUJZrQ%U`$2?6oHgqY5?U+B2Z-@UH.U]QKfJgOj%2moGI(YcBmbM%.StJ=e'QlClZf]&2-'XZb@&46k:DCi_!H&%BoOu5];_CTL_Q[FdYcX%YAl$R,K&I"cnPa+6V?B77]!(.q6Xa3T8T\_UA>+DWqM?CM\6PFnKjc?(\n4/AlLE#oh>%1J8.VPbmP0J9Nd]9oV?bL>UV+DO0!(p%2-:j4.f.!s95/Xq+k0Jr>iHJ9,8Q\l3>EMi&[p*5<-V!q/5&Gu?'5jm[1pJE(qr8?<)d<\n>TXok9<hS-&\T>?Nf5a*.\u_icCf+%8u.uNdUKU8)*6&CoY/atFagIidb66Q^tqA,;oLTO^`[_kGFjgu!_Q$=X`tpIY5jJG-'d*%(E?RV<%BD?Z?/L^jagl+0a+[M0Zj^*%qK;qj3?%F\\u/r[l#PqpP^&I25U2p@cgiW-0?6HE$G'$P'VQR$d$YlAPL8&/c4.jRX$SsQeNOOMd\rES,:";-91<.deT$OU?D2kK%5%:%8n6[&)M8,G.F9ac6Quf&L(9gO7YLD,;^`)6`+O<<$NjjrM'KX4'G`"N.9=/#._p$-^:R?.@:*8F(@q<Qo$WZ)LnU],u`$=D5%VH=&6Va*G%T&?4b+_B.>U*F@9EMgg@)66#LK,thhOij2ZE0KkGkhQe'=nfZf4]SVY!gQ-tT__#t#'c^c<\,g6WDI2JFDRj=12<Om%mjf/J2;31l]]nWTkK>uIcDgDH-!k&VSn^,^*@?)3b2in_5T5'%SEdkOnVCk51/9RHpb?9Z"?N_3Yg^/nX-#=38>L<pNb+)288J&r%]kLg7)2TH"@FShEoe050&f&r_;TU,eM`R\*RjDh>Tg&#@Q'_UjZV.sR:HHXkXO1D)kT\P1)I]FOVD8o5ol5]>Ga,U0Wg':0?QD-m%LJu^/-@VfRX'7_PT#6s"?U5Z3s-r4-YQ%J0MX;)`rR:&q6`EPq+lbPc6R7(Ud]m$tM:?f7c6S[[4f<<inN73sni2gU*h^@LJC-ZP%c'9!(;XkfaZm_%Yl9?[<Cf.T&l?ph>;%\4KW\DZWmHbpT_!WM-J!pm;V7qca<kY_ji`j99;pb/p83TQb7t"[LpSDC!Rs/?f(q#i0%7eb$RRdB)<eN6RmoqC9]^S&#scCHYXPKKl,OA@<Xa-"hr%U,%CH)Bl"8q0d/$#8@V\5AkiT-^CUWZ5`d;drFH>@d/a&?*@@fGm<u%P'$[tB1\uRN/h2$pa+kE'5oNq3C2A0NA>/A`/thY)Kr2SF5m[1M[GR&_n98OkF`ZoUG>1![PU%C[`MSbcUPlPM.CCCgROuaaMejQ%#(UQA<YW$5C5:O3$AlDABDP=eUFeo`lWuGn+sc;@B&Q!\V9`BZ,:,0a!o2gX.J<q,3uMVtY%!3nGL?i`"I[Nn(p15sp7,m"1,m8k%po;7n1*BAl/89`5J5*7!E/@%sPW/Z%^dVZi;NWcCQ5,YJJeF9@1GAiX#83*XW+6QjP.6kto0QRCag/"Uh(2>IPpa4DUHKGQ;kaOs%7S'UPYrU16(5q3'C]\@<';ROI?46:8\0OPk(#+g-_BQ<"&jN2^1:/XG@eWKj2],gJckJ)Z"Nj/B)06eDA5\j*7\;,0e>(O9XNM.s%<?deF,r-b`j6AHVLj`7_KmKOK7K"32F"hkC(sV#q%o-k<M?;?[$WQ&@1mP"=(hP>k*@EQU-XrLjo)h%H9I2D[8Cn^*O2X?[S]4Q)%<bPGKCI1f6N87u^..'Qt.p8H:Z5fPJVpM2JM<7he#78o`lLPSe1T16B3S!TMXT>g1^k3V`;WD)H'^C@[MF/q2(3c74!.%P"-8X.D%WNiUbiqK*WimIo$f*FP(C'dc>FI0q,0clc\nAB](lO_eJS)D6t*YZ/]Xb(-6#T-/DOX:^/jXEYj)S8KMa/ELL&m6I9WB*3kT!+kq%,hfH?'lgX3-ZSsP?s&oIB3n2(>)`Ms[Y;r/OrX8W<&[gh!BnX=Gu8]KX'/)seVkDJ6oe<!EWd<<#@=2>FAAI)D':45[]gEU,gq)>%S?d$"BNLpoS>C6kqb):+&84-bqC=`oE3,kh&6asm<Z&J3Kb#Fm8>IP!,2e1n=]s*PTTo+-JZcjd%uC.\`#P"a!sP;2=`79LV6&*Y%X*nM!Jk0@26DF'0cnTY_a_LfG7A-]<'tOIGYI\D9!qTcp%us&RhZB?O&rA"-@ut]I0B:\S4TKWtOnP9I942,c&%+OA1>oT]qDt??%K*n/F&NQ\Z-Dd?/(P^I:Ac@uLYK1aa%P\ik'7h$o2$LmTBo:Ve9j8>-kE=>1(!9*S)>tRWO6tPiNN:@)Q`JZdB@jJtH%d'g*1D1:%^\&AmRABY8jr$22-=!p]mIf9QF*#i)N>?/i7ZRiRF+Z>Jiq&V?C\(QFHdo]!i^k$IaP%PL_Iu<\h\@YA<[#gL'<fZ32%Qg&^kC/r%A\h!Da;2FE>`g)TLl%jY'P!-fR0:K6NG?mi/p*timXnA\/Eh.Lq@qi[r@Li<=mIYOW$DKqK+;c"V4UAt547/GX.)I0j^E*&6(_k`%acj:mR>uYj4t[ZOR1:Um\3'KL8cDsUrZR2L8\!)'c?Hj_$r=l_?A?Mj;HrF.HTa)i&_kck'L/43HQ=PaTbd7=DmUE,/L$A/iaTMM%\#93!T(I53eB?58,&+]l2D1,\^:6S38qs@/<jbSin'Wss6^b)XAjDgZ`J:heOHpn*apthb6]0$N(7imJ;n]+_51Rf!`/bF#NctIh%8W(!.hXU,(P'bi>Z.-cFbOO/jf97QOOXMFX7\=\!d2*%Y<Y),S!s>c^e;:YiUH`enj)Yj*aC7ZVmG;i?K*Eqd(f!-?H^q:X0?-.p%r9;[Z)YKufIWmKr$`WTEUd;XX[JoN^.Asljjj(I@9m$[RIdW-Sp9]T^e,gilY!E#T8n73uBD@NR>l)(g'Dpi886<8Pp7R"<lb,4[%k0B^k0a1TNrSaP"]he9=PS-ltf,\;Ga!7i@`HfT7?4f*WXV)_MN!qat;I&LN2^6=.@a_4OKsjRel+b[h45IZ_-m0GU1n$XBTAF.A%EjRTeLBLPM.2q(()emS6J+#^Z(%D:FnI`PSG#1F0YB<!DM.9+EOF2VRPL&30$mO\ho*,f/(d@Oj1+F2_'hXp)qYRNp>`Z9Za0a1s%/TbE7:[Rl[/TF-Ng_cNkToV7UWU[J;2q4^`k_j9qj^"0c0sOFeJuUZXBOC[Y3qs9JBtl#j-_Q74Jb0t$MbqaOW0!#5WKUq(4RGde%s#E3;8I37.<<hh6AtA#]9liLR28/$!DCH.+Pc+EW)iq@GY_QuBI_IUS8W>qZBlR*c*m%)^M%LX%;qtQq$T_("RT7RjT?V=p@$gLA%'moEr*UaKp6!Yjf$q:5"6jeGRQUDNKr8M4m/D:007?an,lZD%Aj3YWV8Aog"%m/5u=K4!\3'j#Ac"D+fMn\g,qL*04'aMX0HL5?d%RCG5.$@aR.jKe<]e=29n"IiAT$&lYaV87rJ:F$f/g]R4af)PAH_d5,ohj)t)g@Z/VD%gT2#r7.4&&.WI505]9HW,/gQ&!i9n_eiZ%$PLVW)k`<aVi0+B(u(-:GRJFtB#^W6n6IJ>T6;S[9^Id+Y0@89;3q.P+]KdqebAmIbL68amd&ELJ=80N8q-s9#86-p^G>RWl4$6.%CfgE`q*EL.GG73g&*'rC%ReuGI\-d`.08,!d"Tc;J_9FCEV=Ub8OY%3lbZJI.7+=O@)U0b^XrXP3hD%'ISR+]&<777q`Br_].K$@%7R4?KHpI?_B"c:bU-'HGqA[=\c\ZV.Q3H(FM4KY=MGfX;`-VGhYV&M$_8Uq&dOR`-%jPHU*D5kmjM)KNPkG*7!^TH]/cs1i.Nnc1%^e,e1*5kJP]0%0A>;'lI8R#=c1l4*VNr(5@l=[fD9C,`l-e86IX4VW3%d=++5mP>ufK?NI'[pK?1`W:1)Om:F$D_WHCGU\)O3n)#%U[GQN8"X09i8bE-3kkCR!'EO;`Lhnq%aYd-cUC)CieuF#I2E7>Vi:Yma2BYtLIq8*Hti^*j1kTr?V]Os(]<n9J'ri/IsPQ$*Vf=,%RZtDhkD34rs/sZYA'[6LgOT!13Hs\f#Q"Yjnot*+5O[Oh]ZfV$8SJ:jc6)9MHP%_-#-i!5@599*+\_%H3QrShhuZ2FmfMsg5HI5%%#Zj;#FIpbmN(Xb[3&"8uTU.5`Gaae#M$%l":S0Z=os3ts/8DCh&;s(h%BP,G+Z%q!Kmk9C/41LVNQ#N/+6@-KaRZ)nisNM8OtE6<%2rj1IO;%QC-.<?$r^4HXT@M5B*Qe$6Y!;]*+6HiL.10R:ghhT]%qBheMt4/)rnhF!"mm7$[6J)G+\Mo@-K1"-"(ej;pbMYt%M_/:%D@OV1^I3@[$^t.hi7u4ToImI.<QjCj@u#*_5UjYd9ZErJs%B??lB9)6ecToBLimEP:<5,]6H7H9s(idnl8t\UlsF\`rg#TOqPKQ`%&c7p]4mUgK:OMPeXe+TBnE4i_5HO)9l$+uMs1;8/J!1Vjs5ge4=Oar2s81k258MWi_D)QpLKAKn\*F4Unm@'mru\Uir;McWimINc%X9R]k\,F(t(:1P^N(]t?d'Y.mSGW.3@;t!0Mq+!j=YlR=19j4sS"807Irmc9:G:O%$N=[b71Kl$YdqujDZ/ro)?8aQ;,9KHe!iR.%HLp;ah&GQIEB&()7VasaQ_u1D:Zt)4?@"J5kJ(F&-\efgSB>]*S1""PG5u$<qG3m5QR6/Hr1R]la=W7h7RmbMG`aUGiJ<K)0WIO!%]riPc8Hlg$YU@n,19+As7bnp[M+alf4VBgsMft%L6Ns"2Hs[kCCH1k)IXX<qqQE=m>jqYjZ4uG^F8h:]P%=U&gRn2(jWYoWZ%ON$%>!l0TptL%8RFVLdN[M.&Z6]"fftX=#[0\U;ofjCjLTbA=\#!#;jeOd]S+^V^L9Oib4k0u_l,6YLV85PR$G'q(b@rB*EMJ[Vpe)UY%[=/A6A;l@"#&\n]a2548;_-Wqneamt:G%7>E0gNpSkTF=)TgE0P5g^C_nRIBKV>KPH\HXH4!MN(T(KK62`hFJf8XdK0q;!X[t0#k%Ob_hWa2/MSDab^LL=+(N.Ol*/M#KhD#lQ?[-P"i[H(M2=ofq^RF8l1.O#.\]<&/nYkdEe4<MDd;XC$n1O_ln'5m)(_[$g^^(e?]Q%i_kfrjCeEC:#h32A,WDoq7D0A30Bl,7,g,-Ktdl1p,<Q$s$9]k#rPV>W^V`[R5FomFFje3?U%bUejq*MM6&M]#sU%.HS$bK@?\6t%0XQ_X'H1r)Qqg,t.<hj,L:/J83#I]E0S\sZcu-;p3j'sL>`<fkbXG\#*,FQSV5b^KO@aque");sDQc.tA&WOjQ>5F;@k)purla7k%jkqc>U-4`&;J4RnqW$bVM<Qa1CqapmpKtEYC;LL)nj63I\s'jr8i8FoRtHNsKlPqXLjok<0q]SFZumY"()m8lJ<(e8fdb;^_k)^u%SpRI,GB_O<IK'efU5&PGjKXAdOM-3FAO<(oE7SQ%CT96#IG<9T#FAjoL+QZQo-8C[,EfnN$V/J(JFIr@=fcW$)[pl\mI(OL[DD9!%[t_CfBP.hbL6/(f@f0j!XFqfa8Jqi;N?^_9Aa(Agof1dOi@c*D[E5)hdT,(eJkC^N.&_j+=9k$YTp9@`+'th0Lo+?+Gp<D;\48U,%_Tmh%/ShDW7XEHk/d+!)SJIjTGr(k&Xnd)<Kh3,@j;<m93bo_$kt(:&[&6H9.[O&<Z^*DkYd;H);^l4$+^"`qs5<T"n-?eEl1Tk1%#B":8%Hn9U@gAcG6,gBr&JI8&O@!JGo5%l0\BQqaP@K$>m=q"`M%/R-Qn.`"RD0/:Q[PiQ>O4pr>BA!djaoKA2!VLK3/\+qdiOJ(%8.&oTh4E#bRMEAorc`1;X2B#$J7kaj!KLaFi3k_Br'$Ld3^"-LCs.d8/[\Xd4%SC6&&tfE$SLIAX,FRR>%Ab(M#*(MThp(qR#k<+%QSL]>`t`SL@tlPr`h.LI[%s0VgJ[7U&#?J\!ZF`14c5Z?H95S')4ZgK,7Xm3U\8Y%J[%l"8V,0/Z'g<B!I#7_mf<\L*OItt"B&DC%%+GTi^!B,>bqm<*^;4mo91/4/3e$%^HHdfmro`3Zr;pT;l!u-0a<qfOq&FFq%%8-W_tU=6A9MDkAT0;;=,eiVm&k>D+'_OO#N%?X%cbLAnHKt8lHm7,<RmU;ZVNf^.je^8$K2h1H4<l`KG]'%W:ohEESVFp4*_.<i^$FNI:/i0ub%0:#b5-p[AaK(m.n_+NF%=[;qtjKa%bU`C$.;%nWGGK6Q@j'&l*Gp6&Q4fU-CQT;fLp:_UESThSqP&lO_P4DrCiQYKL3'T=i6G+P-K]n0QIO^h(>c=S5"#llFS<X5i1]'j%(t?m*r(faD*(l>2L9W<8T)p_5M50m\LJlF:?Q`j^1r+fEDu)g+CSF'T2nd]AQ;+q(NW68:]mGW*6)Du&2uA@'W8eT%$WFl%`FoI<%4GQe@D]$#uM=T;Q\@P`Dg17Du*XZ[0_F%JZjS$kLD);o?a5Z03$o?HU$>Waj-u6WP6YRdr[dtD9+/`VJ4DYi(X,@`lDfI&;%gR!p%:40E4>*-#$=FgDt:!Clta#LRdZIL([=e]3D%kjdfI5,KI-H8$!90!n'T&UZU1u<ENU&L62AKQu(+VP*77e>@45Ap0m00#JLWr@W2%Yf!N\%AB=DP;>V-',^Z;?]:(_A%s(uNu,FnPa\eBNfUNGZ@qoW+!qLO[[t?_GPg.,idKm@gU`1V$Z`ZTRK",*SHs"ni-)(M`l=M4%S"iT%,@@s[*h4Meo<mcKZ[t;VB7rn://qu\aUNtBQbUZb&SAARq\n3<lpXD(_Y>r"pB:o9[5D)=F>>:o**q)%HV(2ClL#b$bH]^n%`senMk5jLPb!I5CH)sc`?SBCZ@l2'sLUAjd>b?Cu&(2CqTq'oN.t70"msK]W4*/iUD/;"lHdCJR4[&Cr;XDsPW3KV,V6K\G]G0qs%=?g&N"K"Mig3NDr#dK&lk/F_*rc4>Sp'SM1r-RsT;YnU"Z6jV)D3`jlmAI14\:$m%!L1X$f8nN,I+nEG+*WasMUCeB-=;gO$n)V[%@V=s6jM$6)G,:b@$C3l>c.tNH^hnd`kE35mTsT4mPbdQh_<o@akAIm`IcI>D\FNu'Ul\_+/nX24k$,RsHI=89!f,N-3W)#$C\=eO%`'75R4o*%N2Kj"G$N-R1h%/tHmD^s\kP]9F'-Fu1]\G\__r#`?CU%//);bMK1>>^hNak-GDCI1>J(_1,?o0&BH^W&@mD2.A:ad@Q%D;8,8\^VJkEr;0Y367>=YMm1Lc;QpSg3=dc*Xi+sTnE!_#.!;=I@%Yd+Is""hk>-k&^B'*NF?0PcH:-HDbF1?5KX6XN=T>e/#7tS%^pM[RPN6f[5hK"!mG1c;C%5)snjXQk4=#qQFRPXe_*KB1-m*p)/+)-Zn*P;4c<gl*22%[:Mdf;0!elLZ)?MQQ!c2iU)@K,.nlok2%=DeaLQ_j4\1B!U>C@dGU=1J/L5Q.R;iq?t=h7C/N4"<0"pr6rn_I%2hchKt]"7GcKQ\Q$Kds8%M^E$',&lGVcM<X?8hH73&PE/[t%4UfO&oh("d':KY'iId-G43A^_fb^SDg$ii5H%."PAGPgDR6S;F,TOt(\oJ^V[hB&aLUgJ:.ErkldTr[_ALob$$g`WBVa7$3@uJQ&%.M"14VG#Z(8@O>-h8WurDk'LuZ_XsIdQi#Anb;Smrmh'2p(Qc_<]WsYF-7*i)MLeUl0HA^MqQi69<oOGUs&^B%1u2BN>T&Qh`P>(%[-^<>"OtrM=S__B,?!?q%*d@QqPX81C[k(H]q<)&jg<PM8tGq`0qL9cW"saErB%^[oVAqq=?L>7ls"Gu"TSqpU0RX,8-%pi%kS41%]]\a<Ze/I)[Gb%p;B;mKEk1[Wo%ZQoh.(CT9&4JGNRfl]FI<DO*$=FYg6M55IF.'@&;o(BGlQjp6j<GW%!IS^Vh*PsFjfXKq>/i;%3SrR&$FGBYm@uMq3#d;\DB$Wj:s!&"qZ;+QVXggN@oS9ncP+/r3e%Z&TB7Wjn"20H!)\iL8.G1Adrl2Ej8Lrdh&G_ub?]rp@/dTu%RHr1i(k;BY+8>mA'<XN;()iUCMc/r?_4$+;SZVHE^\qmc"0Mg$)-Zn_h#Np+O?fX?/^%(HqtU*D1t!4Un%^&L*EFADp-)=Cl4+O*%IPZAUTB=3n^)e^39&8o8#J7F!72k::e"`kG=%S+e;s_]Jc@?[KS.u+Eh?ai_?9RQLR;%?"7`iMa/"X:63kGSfB(m1BPs8e(_9sKU%3_0cFG2Kg3[7u3h^"sIFK1'DE[DZ*=[6:a[;!5W!EL2'lig1Y"(DY:PQH3!.&K^:S7J7D>a&*]r'Jl_%\ZPr]OpBW)eJCJY]GZ8E%@Wl=]3887<H[8F.&4?drfNnT*<M:6R?3!D_I[Bu$Y1F;Qpi<3RfRO(k/pucCFq).F(8+in3bcAGE(,5B&D^/Qm4P+&*[u\:&$[dC%)O*CEZ91Dn7V"oY:lk764AYp'9i!08g2DY(2GEbgrI"`>,=6s';e(#K6iMUtT9Q[5I"6@c$,V!KV(Ym1Z("q'qh12u=Bb`I:/at9%WAN*n!aZO:$5?C#i2u\15jtNJeQnCjn-CHLT;a+)/M1HN'bBXjT]jQC4O=D0PJBG(MCT87=pIjrV4^o>d9@'bN#"l]Q#"'9dQ_#Z%22S5-FP;l7Lk&U7;Jup7"f9;A0*aE#X@#1u%+bMHY#-?CRk8B6e`h#QIF3]TCDSF3d.X;eMM+BN3XC7$ec8ei:S^B',t2lD>.JRF%2Si%]i\d;Q$ZC\2)VK?S>@Y#j>2'0?r%2h!5"u&W4/P;`k+s\:3_C.o,V%n(OM67987p;ZZ$.$L^Gs4"aRKB3qYfFg]_^*>A\@.E%\#0>%^p;kJ5d^pXS-l,&NoBU[!0Sli-]O\6/p"Q=Y2%kUWLcM"e)8IgS20CUeQ@jUb,Fb7r_HXg(BaEb*6]3pMs5*J]L,JTPM+1J%@nkmln')M$%5W2V9]g!@i<b^I6mM0Bo',+/dL;u)PkaQ1rJ%LONr,)\/KQamcJ`J5.-(FSF\[-$dc\=Y_!t@`LVG5P0/_@iD^#Rq%$1iReK$A^$pj/@ap<>IeGs8bkT?'*4G"qJ*UR,Kio^;!A_<WH;>od9CZJp)[dWidg?KF2E:#0:H;`Cln2f't-\Ts<4bO8MBYl+%Z%jV,jA.R,4?h;K"4:[W:$:GYjR5+uc+J.geMk:_MZf3P`4rCY+Shtqs8QsT-`5a-i09]ioB7.d4bH`G:6lFdu9SWp!`VKKVg$7C"W%dlQu^=#[B_Vfh5E/JrP*reQ:=0rBU(Y.0*Cn<5N69:t0u;S7@\T3$8KVNY^Dp^L[S'D+8;M/8MKK_PP3"+A#<9o[<.,+Jj:SE=ot%#?8uk"h6\[h<L1Wo@,8t1N<lOgp_B/Jduq?_HZUS=0=_thM^9b8qKW6P@rHYYLZ%dG&p%dkhB,5r?bbQdn3@A%Ws7#"%f-cX_!M2%Y1L@hDdB]nHBf(K?Zn>\b$b(3#ithb_Yq0hB)F*IC"H+;=-j*Sb<u;7NPd$=%fu[p]RDAq6QPi^0(-V/-M'B;>r&h:ejp<K=@59/%a7##9kOVk@Hr+Z<eUYJ/%/:W#KfS_u=VtaOQg_N:jtY6U>5V.^YNZS)3"2#>oQpuV,NhVb8*=9D"rS_4(A>%q<Q,utY/5t'if>ac%!bc*O];H2*0RNh)1UheKf;kGqi6/j).,:ocF<9cRV[3Yum[ZO$r#AK=MfVs-;?=q@#RrW1)!r3GXhsMNG0CMm9Vd"#]C44l0>;EN%4og+\NtIrk*+3h%eZ?)7I['.)_fn1fTlXaF/#hd:Yq_ufo<jq67mN"+6=2;?Rn3-Tj]59Z>P*,?HOYe(p3o+1U!);q:ej/#_?UT)%4*l7fJD-`Q+H)rHRR):Y[H=AZc]`''G27ujo&jB;g&M<5G^<X4Pa'6?LgP8r1[LFfpU^T/"Lb0%VtBh?oGfCF<Qk8s"hiYdiBX"`%p+HnR-F`"t=hL,BO$MoEjF2>$rGEIW;"?HDqiosmprO<BG<ap>pS6;0+b)-J%#n,B9g^;=()a=M+qNo_d^D>[,PPnD-<Ou[->h]!%j)/!<?.=ZlOl!#_2t4:Eq6Y.MY(P'Up1b$RkRKO%9kNlmIW(J./!8fDPYW%hVb6il(Xh+c?be?`YoeO80WDVUbW('#b;X/><5Vs_%(AYXO6&t*)r8i)!-/X-q^&u^MG)X]U*K9^P+>:,CN57\Bh[%K_ca`Bb.0eeiV[lK#==a:h[O(kQnnQ<[>GI5rHZU3(IKLp0)k0&h%+ZR]"/.Z,@euB`<oHps8'i@/U(41Jl*@0eE0n#.uGUVp=EpRVoN9)hJX5T)8#T8baL%:d0lY!Ysa(Um_4`1WR.K.LMas('VAN-ng%,4a27j=dZ^MW?0$`[X=ua^f[1^O?+b8lIq6Y8`0;K3tNAfbg'eqe+qU?3lAO_t8AbFC)OAe@\.;,5/V8Vt+j)qQcL$92(9cXMXba%NAVP8Qn'>)E`gL*4UVqB$!,[q"$o"Cn"+Ffn)]UiQXhF-MNtt#lL%d-ahCD8'Y1-Tct8r-dLABiV%nJ"R6>JG=gkTC=VmMG>BT.:%ppotl2//6cn16`'P=hmc'?m)&\L5,=fNL(fb2KU?q.Xg],ZFoA7ZE0!p";VrN])P'rrOf^iV6_-7iEg.?qYLaIIi^.8oj@r,F<d.%p7[sE`i]k%JcgR[;l*<4&8>hGfffYIUr2Z<hSJEYfGcMK2@W2:,&^7PMTLYHS"orFjL1ngp,uF24@;3LmpPLmf_[irLWN%tB[jV8%@0f\;1d&TNEr^-6hLI&l@npqdcXteSL![a!KKjlm3sMATVrsUkVk8m7n-[%2EUj"$>@0g+U;OIdPX/BY`?T,:_rnq@npBf#=)RDI%"1d-T]I33^_)dEB>NCL>UZTlqn`TK-l!Bl@C5JuPG^Vo4I1H[1rd%j]kZn`NIj:QA(\iVl3\X0kO2YF5`r>T_6U73/CUBqCo',[j%aeCtGOm1t[:gbVEN:St4/R`KD_SR#\#4(=_TK1dHW8V19cn)X>%+31.VNH.(QOXB()]Q=<"HWG-mdp7%6RZ<5_(8.`N07RRm\GmF%=+!^,\u<,)n4@i/a:]tpWGe#GpcBtl7:RJ[-s1#\MNRaJ-rT#O2Ik1T2kLKoD^rSClNI_(CF'`PN][pqJDs$?*2(es`C/q'5oT7;%d$riTl/7g%PTP?\lkjA1DOTiCp'0?&dagURa<D&`.T$uIe`U\?qN;#=q48K3:MR`SE5/VK>S1P(3*eKoa"BRM$o30kNe"hL4/#1`%gn80XV@nS(=mOn/Ep[(B"Z1XJA*g0L"EBe?FsH<2'6ri99mk.0]+@*,k);t\Z?l2VJId'S]et,6o>O+DrM/"Pc[H`oV8CVNd6N,-%+].U:4Ya9iF`@`CY>9'LZNEfl/g'i"@i2Y3IDE+S(>d=<3G/l\,/8>-3pY9Rm,S<p,cXY&bmi_#8o&Yc[?W;V>\!*fV'<VoY8@)p%/XlcEo0!T0mt&ej]UM1X_(CWaoPUP(32!oCJVclY5N$W*T,WaPQb7`"Ce[Dt0f^i&C]ihQ,bh4i[ZWuU@!5Z=`@AR\f@OT-I,)9$%PYZls!EYtUl*;>e'Do^*W_Bj]f2Ti"cE$6J=?K^)NKlF`.!H:&C8V@_A@p/+c1/nt_Akd?pZr(cE)52Ir:t,D._NGAqC#jHqq>A2%8#%L"91=c@V3D6>hbPpcg]u$k>GI2MjE.[\1jcL;TlB``nc@M_mpu!miArU2KkL4uKa&O,"A+_ODJp&,m+lBGcW8("gpI/8h6D33%(l.P2bGQ^@5@nQtFkt!?[j2C/misM-cgc+kFg4C#_C4QKFq1BN7n5mene)ZEgJYr%(94uUlEoI^L?:hp1CN[r<F;EqQu+re=q1J6%r/o^u>-+'&\5\roR4E$O'UD](2oti6l18WX8)Q$.U\rei3[D-J.&M_'e*.r4G?o*Q`:*7l2r;jHE>>JDpjQJq_NUcd*AkJ_i92HW%fk>1BUENWP\.6rRO."#B;-YMFH*ScE"Wk]BN0Rs_^n8FKg'AG.GP@hhK48Qb!t8F_g?@btAk^HUXVXnZ+^XEob9$q(WB>$JDlHPN%W/%aliNJ$E\+IL4khA(.7Of4`pM,u79+g=`ksSkhc4XU&kkj.hC-*g)f"H/7\or$lI;"YtLkYI)1^.om]Z(p;;Rd5A4=Y0Cjf>.D%E.&547%aGmN@8'9-R_]9l'ojk*&R=8Jg3#iKUMG^FejDjp<Lkt+0k(bT6Hk8#st;NaZHmn't,/J#3GU<9:,jBo_>h.B:!)mMckuK%2lb?Zk`nA\$tXSLisq%88pe/KR_:]?)EBEjZ7@aV[s8WLXd)@e8-Wp<^`8!XgNb;tHj\W<koad!`$epQLHjfYDQ^Mu^N:PU%(t!s%5lO0a4[W":mD!?ZI0KW=RBTs+#Y0;[=p,M7]?OIR,eT6p6LIQ+/+$B5K<pk2jgY6c(,EU\hAY$W;l'::;qQMX:AI@.dtE!Z#A2WY%W5oKp8^Pk[m;P@?\$5aM;p5Z1)f5?3j!DOnH\Ju`'Ng::%VT3nD]FP;dc?9dKWT!+V!eMGX_m0;e*3(a8%K:\GYD)fU;cojTHe@:%542ssp*a&08O^);?$k;.KQl-7AS*_Z+G5#UXgH!_N1dqG4&m>>>#gNP#$C<n4j`mRRWfsAab^^B1\@LlMuDfAS!h?\IjANU,WQ't%,g[uQ&XN[V&3ZhSX\#;-G0c.N/o'BU?2R>VS+\2b;,?2rl*^+\T5AeIiXSXIWEI*OcfO+M#5$EMR0<)6h8XSmb/]m]^pf&5Q;i0:%eWRW_pU!$G3:AhLWc^06ob;H@N`K`]cYr\pY&!F%)o>_+&RUlNB>_Qir@&9SOq(P@Oo8<k\%:/i-=(>>/NEJ`km=dMDf']RX*$'d%RYh*16,<LTPeV#%qpc_Q($BFlGH?'QB-Y#u`J1s.r\p6^C9't<1d%]#d^gT@8/(WC%YQ!Dfim:Nfb_)2L#.k&EKG6[a.[aVCjRpp%6bS/hMW!?:'[Os2YNqK:X0P5Y_1HUK_j39]M16f("11^ibBH'^pSLu1F0]K/-7FoUJi&iCc(02UXY[Ee^$^u0UZ2ikeU?nt*U,6_%]W!,Oa$&W-k1]n57k;nS[.;!4%?D-QG"^hN*[oH:7=^E@s8)b'9HG-MnoqO=JW_'"O^gjAgXC`R^"`MhEqkV7OTtYB1AW]m^VN%s%Z1LhAS$oCa!P'-/M>)K/VsltNfDkaP#2l-G7Y)&C2LZ\UVgh:teDHHHTH+UKIO!q4eD+.rq?n5,p.%If05IdmSV$e">pA)_<FLOd%(h*_(?Rk'-83gkgcZK&/:aW/j&HpMH63.ai!M5-4(l7!&p2;3CT1!@0$m_]%K1dFU9:`&>5g5_q!S"R5*>rm)*:gpF<]B)Ws%JZl%n"_s(;/-8t,@n%:M:>c8U]I2p2]dT/VfdDUnu-\BST<nraie`9E,lo$YGDc*Pe/ZE".,J@kfn7TF$A`4P=7'ec6JISW@n01G<\7-%`/04a;Ose#d@<nrB]^3gBTV<CKdI+)Q$ft71o*IeFZX#%[qm=$)Yr%4Nhg_`pLYt=3Xrup%<Hr14,1&DhIM&g6<@eZQs?C'cQ=b(%'+nh]Z3P)@r1/T$?n)\P^sTZU>.7f%+7fl@2T15[W;\8+FN]WD*Z,@[pfP^HFk&`6"l_pbHqsPj0ZcHghM/l)(rp8J95'`gk^qc2%5d?d2IWBMN$Wn:-r.6pd4JAoq8b3&6B/B-]r;mK#[1EUp?5J/_p8H;b"L@P6gH<=A60^$85.kaOR<\KX*'X:jE;1lEgq1^Mg4LpC%'7$h**B#7`np@P9IC+"-0:(L`LBHpX,.rDrr`fh#hk&GC[aun@^fn5g4(!mk"CWl)Z);B"c`d1Kpu#A4EO?d6fH19[@rCmqJ574m%]H&[rD^U<r>aD1sPU3k"Xb>#8GNI<6[CZ4Ar#L]V;b-*DilAAYYdYGERIE`2\+AV6fp`O;iX^r6DPL>b]q!#VKeN9"RbcpYK@F'R%FJZcWZrbV@&9kLr(6*6>@h8:a6KaCikYV"p/bJ`X>746uosMloI<dEeS0aQtr^2e>8cb@tT+S_--b3]PbGHB1rC<$57.u%lV^-a*%M9qJZZ@&n6iZk5iPJV$OI#pMF]8I!5a5h)+IXYhMO2=7Of]W"`euk:444aJ9Q?H_H!k=:s669sg(93@*H$A$D+H^.\Su`0VbQ5Ar%=^c??GTD6O0qBn^5ebV0,el%n4_Qi;-+g;1[e-^)bHfZ/p1O+-^/fSWqk7g1qCKCO4^ZkEX_(m<q;^(o"fTicq/u;A7_m^Y9m9C6%!ILJdCI*6i#%W(RQgAd64d"Xl"ml(HhN"*p*It"NKAuSl`?&^`iLUXKSMLXMJ3q&S$_?p%juRU%#F#f=G@_#Pl&EJiS`cPo^+n/t%`uBP<f@T\1['4u6MV[$-p%_6S.mPbs[k6\&Fsjs5!=H-bWXtg/7H*Nar/s$"8"cPYY/[&rqe)`Z!)3r97-ShiE!2Wp?(cnVJCT1-%o'9?7ecD_r:(Oe^S1W)Bs2%oh&h"I\;0)I(0XM(r[iQN-B=;>4T^q`7%>9=g:G6lV)'N&^mQ:%u]s1_TQ$;VH-6HP2iT9:W[\rH.%GW5+4^THfe_8>DDX-)YW,LC;lUN#2=e$Z\J*aNY-d%)'F?4!8XLRH$5)1]tjXF73^M@U'@LM5$91gR;5hbp,4kAS2de&MMgH`El`%TLN]W?9e9(B>-=-d^DEeG3#eNd)("5`&dsI$@sJSo?u:"YNr+6kL5G*RFhSC2\1*QJY#(JSJ64>+Ccb&-0BCJ5&1\9[P=n6ZoV>o%TXQe%kQoZS\>dKK4f?#c1:JL2huNC'FSgCY`nLR.4)F<J5_1S#Yg"LZ\T7cIS7GqY)BjI#k8,4IpZ9(/4.sBUQV$PdZ*4,LnCG8d%:k<=erTr2>]dSQp-[o;E5^`ZK?RoL2Zie\AdG!D:;klUsoh!]81l(YomO<uX_\SoZ^c6\GYoA"[p6u&*?a^#agUZ0?J:?[)/0iCT%F*=-!5SMlW_':b_Qot@-fg)3-PVK4iW5[>Z2pqa-/W==9iU\`nJK>"G&IWm9Gi<,$!e$Kt:NW8D!"_,3'Abn+5=)OD=]9R_7PhHS%0*!IqX[)"9@7UEf^P\G+H?<'oD!_h-^&WA%;lc>_](%UP[@Su_-o5@uc?!4UpQMXf!1K:[c8+8qgk5dbT&lq,,0P!]]DZ\IHTn^:%4VcTBR,dB!`8TtS!@s0`2sd+;#6aP9f)iq91-V=q`hV*-SImb_HtjB8GksEuLGHK>"$(GmEg.bDD7G'PR:P!'a,GH6j/o`+`EhTJ%iTXnIo_;s,CjE&V0W3,f/K@M[m;&>kS*,KXl*eLYe+_%5ju-uO1jf5CqR!La&Xg%+bbiD'kj6djerBH(3H05S(VD?eh%e"0)iE1'%4*R07\*-Zc.+0ZC)pe4RcZnDa5K&7,:Gn$#?[mNaS!C4+mIU4Y4u\KL*1lkRL='ogC]F%cjjFr9?].d:g+PN`RWQk>D>r=jp<_s$%Gb<VqO(8A@MFmR*_IWU3ZEO5P]R4UH*O"3]%GY63DM)`fL\;FGjo+<V=1ASAnTeq?VtUkDj,9sI+.pgq+dm9Ba(m?_A_X-3[lfUY%4+Y)Q2i$SnTq0'VNi50*(kqZQg5Kr<N7:/]B_.-a0:97UQF*WZ54QA8a*lDVHKTC:?&OrNn(&\lY;!.rFrG/4VpH,B?/kdgZkbfA%JhM6GSY=RDp4qOU9t`gMl&aq<ftfRmj88RL1>MukqS&j.h2$:L>9WM*egiH1M4<n0]Umd4^PjY+S^!jJ#X6o!d/9O.l"$^"M0U)P%\L(]!TZPQe1XL:'2<kI3&W5f\$W,iB'<pC3&%LGm"42g)(SK<dPV^[$<IQW\qjaXhfqXP!o^l8i>4!2Ym]F/>JL9]P7e0k#XpmWX%>?g$Hl!VE@]pj'JTW(_O[ZN`"jMQU+cun<"0khqc2%gbg%Lta42@4G[Q4m*B!YdF@%0U;6N^/FkiWp7sOW,\=7`[.&Z*22P(9XqT%n21Jrnk!9.q6]0gc50;L?>N/=>$Shp?h7)hSi4=c]!Y?[fbF09W\2e]"N/4;pmar@Hn(iiG>&:;;HD9AlGYX-pai/P*&9?uUMsRs%&1&RQ7X_l'!qWr#<)RZHYD[pEIX!ORFrFE!"Q54.:T5>LQOOCS3Z#+*\cAA#1:pK_'!Mp;S'Zd^#7$NEi<:cB8TXGS0tJl'o7n#'%E>YOi3m,Z<.M*^U-k)u0L=5T"XU!tW6&Rf[&C<]:lHLW&h$T86A\'Z>WNfXF*i4+*,9J'^Pb'^<UP:k<fde@pD*"<QjQ5)T-b&?t%+a[DAqhKTfm@j(phNr?pg@:4c]PX1`j'Uk`kR/e%,VpW;5aV1_GK67V*r#u'9K?4W%i-CUZS5?sXhq5186j-iN`aO&p<UFaAEe,'%,hZ>+L9.nqIH5tMmW9h"CcB'bj],ct`ccI%I$mVYMs5MC%'6>(nm!(N!GK0ek'_da\FEa2.kfq_ec]V]_!:0Mifr,2A``_sieS+2%"DrJg?_33Bf,<:BE!C`*dRp:n[aiN^A(S68h:%gJY5&-bcC)9;]]%R%6Kg#$6V`FkP1[EE@^*2VOl!.c(?q*tYWkNFk$c-86U"^l%R6"<-RH.UO6^+#rdUd7<m&M)X7%c[B/5MZ-I.5NtPeP!JHPEa4a6Bg$A#7hA@q1NnBd9oPmokRA<U[m!RYO)]C7Wc8#CJp*/*+Lh%80pT0'OJ%fbApZD9!@RI1s),=U%k?a5n_,EOUZ=/N-1AEpua?D:JgTc9UOpk*&(%`,`7Yn'DkNoMEr17/8V2NKdGX0ObG)XqaP`L%j5u^M_^JPS_?^VRPJ,<++H)ejfr?A-Ze%YAqjj:(oq"#/_W3qLLt,[M-PlD/mZ%p#s#[^XLm3p\UJ#5dl#XafX=WR=4+Hau>$SWV%a.bTMG4kZ**1Z3?H0:gddg)r8)Zp6T.s=Y_!fJuqDr*5'P\)La)DfS7EYP#+f.G@:g!VKE0sa;QQsrZu9+eO!nbs\HT"#i8W`6WW%a1?3U$d<!?3LF;:$kBDQ(47*)fO/40F9gRW=#dM2`0\inO/'Y:[!90t7%(4?c>mrG)"7]pVN-FGT5Q?)WgA.;@0DA"*/r9@Fta<\%febe0ZQS9!K$$2+0Gb<?hssi*EE%:E0:'.WM[S2J;8rEEEj;#U?..5MbE6Mn<h:k)?Q1p<"j<+K!18BW"s;tEVmt7\b_Lh&^bj7r%_Ad-8*fr.O["&02m^efd\Zb&D(]^os_91=a6oXc,0Rn4Wf0AcF(*n3O1=&n'a=MT,^=fW>.((_g:Nf2*4/b?%<8Z,.XOClYrcQGt%Zg/-^_VbeQ6nENs[j)Z&`Ou&E&1b-kZ-3Qh59UAO)Cl?OPGs=?p\a7'M+,6$,:%03"RqU6h6F6[n(Ji%=[D(+o,&mC2_"G3P!)*g%R6C=PFY2h624oX(a2uQ0]P)PBk^NPbOiH:&96TN0l56;f)(hFqgkXY.r?ONsTH./DisQKs.5);9EJi?JD9VMg-V64`!`Po2lq6<h%AB*t.T3>N7/OD5=R@`A'rb>pdg)3$*$R7j\CJsktYQO8^VdpX?A#3CKF1s"1?!DloS6EtKL#j:'QG6TZ%tC1Gd0;Tq]ErP;*V'Bh%-/Bh.&'cnQG6=M]f]^gGhYk:k!*SZ?Kk0ANdno5cb9D'a$]RM5'3Dm#fqC#4%%I!05d0VAG'`>SF\Yd;0Z(S0T.on0&t;bAWp%+c%c>g5/`o>kIAU_9,)e52CaX*Tn@Cfu#SoAOYaKo14S)96O+upGY]/=TVcEB+Pe;?#JeGQT/[c;)W_jr8u7R#7fH%g425r9Ii2XRrl%AR=\e&q=,3KgE%!fU-C0p$:Rki+cTjnZp0t8BQZW;C\r0CWlY2`hMkQ=L9$N(<nd^LBct^dM<;\AJfpC0gjeLgA'EGd>(,l(L08C%`Y-IA8gTiKeCU&;r>XRe/Z&>'?7hTq@kR."Dp`H'Zh@"qBf[l;'i;ms2fV9DAg:Nd%,5>5B@-M'TuBMV`\*JV:-iG1-GTjJQ;(ZQ%)]ojLF*2tJNKjBN8KQN`)d,4&rdH",)k1bVI3-Z"_oV03#<O`:lMg\SY:#;VY*Ho]/BlmmU5NMk)Cs?]QJM[/=tuCP\!?]um5SmA%`?eUWp`.fq)I"o\B/:<<Ol!QD`+Cj=>MQu;>"8cY[_.)#1G%]p$bjDcUEMJV4FM;k$ghH.f[pP\7pMB=QQO37]S<fUN+.!hqtG99%&FM29)W&#cKnd9[o@n7&%Gf(A=UQIWT-Y6p%3<JUg_([%4!G*.iQU/F"h#YDH[i5[KrXQ&D4]1b@5o/K_!BNj3_E!.RoN"7L]pNh%k'3,N\ig_ia2U4jU^'[3RS(h_._+291W9P!G>@usL/jA&T(Lf]oi.RR2.a8D[EE_S#F(0>C5?)?;(nD1>0LS\HE[fN*ob;%PI/on%AQU_T>k9`.J$A@;?Wajtd@NbrrnDj=jE7p`2YFE@ba4#aDm6Lg*$P"q+aNPk:NfnZ0M?G%9X`i)Cs9`7.)k1hRr:/47[]&o,%X$]%,qM0R>a-nm(m(m9pk`kq[t/0QETVR'UR`u8>Dm*g9g+-S(KaBASU1R3Q8,aW%\7qNSRLo.W>rLRCBg>q/\#=$SHdS%K21;a]Nbr;%HNp%4/\#$qSKgso60FUe\6of;HNp#q>B#uM3qj%D9+LEoF6MC8kf>0\JfMA+CBbf1Z@X&W)\Zf(THh(u(<`C-Db,&s!ub<SiqCi-%UL32SJQ6[HHU^l$+6gJoP36];hJWSRSTD)pi2JhWT8V;4e)cn_NmQZOH@\hXMsMa6?K8ZQG2>m[Ptj0>CaR>;G,O#RLL`)tAVT#<%Z<?4/Be8hur`O82k%DtbmpBn&^3D!9-%j5E,qk[IF2D<;.&jXEoog1eRe(E4*[7n$kO<C&W'"l"+etE[boj3TA_-"f41ZN.lcXLs%`c\cDFYbu0D=O_N1\:QP7Z:u)AI;Bsc][E;].L6%`5u0a@9hB+(Rg(D;]oT,1:6Be1N1*]3GUKgFs-uD-[3g_oOtSLom?Eb%NC.=%62,)s?qE,E^\f'l[)o'#T#/!.i(VMLZ>Ci"VD*ioi630#%*sZ"3`S=A5dcomc`M1^lo/OQH-6;:R^fsCMraE=+'mfMT3\@0n\"5Z%ps+V?d)n@+m9jsZidfI9/+(%U*ftF!"0\tI56#:;hr_R+f5i"j^ikLC+m7Zs=K4DH-cXjSRD1^>2WkbWcZkR0M`F?aMfdC[r37Nd%k%)[e7PX)&OC(i.r\+J9NL9m`)0ohh'?P],`<>2\a?=[fB2j&p-K_-Vc>13,*Hc+k_:"Z1ep2<"XP9V#Yk'5h1SJ*@ae$Bf&W,Mb%qUXY#QuH`Yk074T:-6h`?p$)>c@J?o#Q&LO>o@XRL,nGNc.DpijD\F7F=2eY[@Wj6B,TQr4I79S/[t-gh=0]"-=4]oR+[N_G0Gio%Ei^g@Um!(=N!G8o/X36_Cj)pTJt/mlER'BGmNDA656`N]8SRjCdeK/#d&Xb3mR'l`%$91L%@sT$3%+jjH)5-cR$S\'6-1i'):R7S%MTE<#`%<m)\RjF(7:an(]=]:E-Rm=QV:i1:%b[&N,pL6Dk!jFSFRB_Y9ubi7V8F&rNY*.]L%.->kasCIO`?cW6eAc5n!Y#SZ.n*n%4UoYO7)n=N,tp[1CkJrTY@]OfIh@gZ%(*PW)4q_^bhHhr2`XCu@?<P7`R7.[G"ECF(2$dlZ'r.k`f%/c3aG0Lio(@4c:$j+JT];h%kqYOF9@rg,ZVGjn]l\*UjAeAaa-Y2QVl^>Je&TP\L&'DRoCD1ZCn:.Ac`:8rn+m;G+'la$Si2BAP3\W)TOpdh[T*h\DerY/;;o!W%o8YA=B:"CmLYq:4R8.\I1?)?*&%C?i@p\cck/c24o&3.+@_!b'&,C19GGm-Z&#]<H`f.DRHSput2s3TU($3=nmtP"W5+LRY,MOKP%e`=U[)4Sa(>BN-"/RMPM&*GtiF'.#08BPBLFH60+K"D#.h@iJ@)"urnHJ&rlZV0;%\pq%[HG.$+nohOU4$d)=h&3lp$88htR68g9%`o`LAda#-Yp9YQ7$2+34_]m>l4.^@q_qp\Bn=FecgFVGp$CcAd%a@Q;TSC7<V)"cYgp4;uK7L5+>H?o1[:>53=F#AbS5/A5N<?k\%4lq9Si@?ntR'\[DCmhi?=45C2C1oP`@6;Z5+h$Aa(-8%ajg`PR)`&QB4RY,6r/]$8NS)"M-&.,gc#ojq-e,RBWHYDa8:CJ?@7D_'%[^qFIkF\#MUpB<cA`H9+5:^3pb+]cQd*=<2VJX'"S904@fJ)1E@WU;oEX]=#?_:j-(+>!^TrHm,)&[YSTRhpCW*qkLLCmj:gDZ:7%QJKquRgNdF`OtR$0mD&e.bq\CTN@<aVeMur%/7BDjd];[hp*_g98.FLK4q*\E-"cm=A^Of4g/daCZrkp/B-CbX%gTAre^-3=(g50%iT3IPB7K8VAI#4IMQJ@YN7htV`u$Gs_mIGG6\`9*/i[F;QXXr19/nP.(GO$.M:(#>]m<4e[\2\6&_\jNpUpZ$"R(a")J:SGVAmo=%mn`D?ntU/.0>o6WRP.L"?h^&eNUf#4.`P9ParAc#]mL["2ti#FiA>q^?:)d$P&UFPF;!=5lX`*oO`7KISpWVh!1#c4<6r*Q:ba?0%D;7<[)T,XR'X34;l06#5g$RWB_[c.t@u^Gr,eGcmB+@2U)gJ@UMplfgF#*)OS24!S<ne37?E3s4ai-$j`trbfG.UEo$p`'_BB6(,%%B/s234p<=kEKDA%(Tp$XUAU^&L\lomTj"H)Xl\o,gXYP:<@BJ[q)tmZnp(oe]+B-I=-U(m[<8Ao\,#3kGPd)TZ.C%VGar:bZrsL%#8V!FPYAaSc@4PI3Ng;fp@LD2ADVM#]S@9?q;J-D&"V)1LSX?oC:ac$,oiBT[H+dZIdWM+Ws9#C9ngf,7-/^7rd,TfM=0ieDCopi%RQ027j`$Hoe"/)Qe=P*YrM4Up?T,1'-#\r&TqpHg2g_alU<t:Q9lbEYo+ZnJ3V7.8Ce-/+Hau"Ek+!Z6hUgq2Q.aCDl+'[$74s^D%m,-TFhr\3&ii.E6mMbS`Ji`OCc\PYsceC5B=^QpTcHE]OmcnrrSMK50@5cs4E>U@^FE[6U]-uHTflX*o.CjQlcA,ObS'EW5W8',g%7-.cddoiddk0g@Wo5X1R[Vt9\FA>^!eRm:`D'W9BKFj3tFKY5XQ"AFtXjbq*]e5REB9u9S\2*X@Cc]0fMtqbD<FjQ=k)?AuS'KJC%=%d2TBn[#,FEX^Zb@T/U%7\(IWjCsV:srFG=-ZKmQV08YA'WNUFE[R\oOWa0FEUC+(#Dr&e(M9a1H?[QB@HgB@LHes\Pm<EflWgk%CmNADo:BI"9K&H4k@r&??9pK?S\[&<S$7cd3kNoTPd/bNdhs*$F6T3-YJ8>ZZfAC@b/j%Xl#[F"9.S<JbAX`Om"jV>>LjG?FEY3:%NgX.ecDIr6ORA)i3MhP]Z4fL/1/aF?([o(s5N]HmmKm?+HJ"ZtQLsL]-P+eFkZt:P^,gK,@TE0Qg"f\Aj'?o)e(gF0NC$5]MN7GJ%c#YGKM*Q?<;!-P$CXO3SX6L[%ZJ0*^Js>HGa,H1(GK6rn&&9\fq@(iBKlNfMj@+E.1:bUb,+H"'reYnkYh=F]'*PY4='@8gqc1q1%nX;Q:r@hP`Ej+*Mq)h'(:R8`WNo$!ZkMe+4M0(?h,eWP@?LF7D4c@eNU:[8*\Q^VZptKTPllq<C(Yp[/X&PP$k0A8c\Eu_/M_?,k%LGrYZ?0o<gkA#+MZ94&_r0=2@fD1h'^&W7-+'^kqb^D.!c]a#'h?9@Xe9KhcICb;Gq!iYkLV:IbSLX4e%%T=sGg/iJ_CUoKC/-N@%3mc08m!Q^:E<-2YjD7!lr+7#6k+)tC[,-H"C,+&)FP[I,?eoUuqC6\VeNN>TR^99pZL;KPeGRP2d*bQ1U_V'mi&9BbfZk[.T#8i+%da%;<d*ddp_sY"Em"WNMcPH.l"1pFqf&hKlpheo:PkKPU+?!8@:L8%t&MUPd)]D@og)4cF],XE<-1)7A/p-!OM\CZu>0+:-)L`(?%>HdZ7qSVZt\ZWQ"b`pl@6Crk$+(<BA>M0I?[mNe4_s_\sr9`aCU%t+;]0"3]"%rD=`Cm=6PBOV"F3_te[N&0B95I/c@b7,PZ/A&5%('Us9AGGg)0D]!:1PlOp5BAVZ4K@?nDRd$rYC(:n,6-1&GH86_HN"@tT"OTiDn+7P+78O,>>0I8c7An59mJ829/>CE[m[F$GtEp"%9D=>`mX-&danaa%G@"'&a%\&,'9M"crL468[KI;rS$ol3L9h,u-e=1@Xc8#]TamKO.nHairmA(,It,`YD9#j;bB;,G[^0dZ/SPC7%\lh5%(9qjC([g;*i$WkBA%M8nhene!AFO"YC)F?U_u!f\[;>;[F$<]<d3PTd9]fMRUR4CeP7oD6h5BZ4]KWM4p\S;mgMO@hhG]fq%9+k0%-?Jo]bUYEqdsV:9Sl[tL0l?C:3ZDZANhIo%J4OrZD"Hd+Q=<_N(n.._@WV#9p>d&S=<']O9mMZZ\/+Nt*R?]"Qick>n1GSe%F/DCo.lLFcGtJkHE&8:dQ+$HA^X$o-SqZMBSFh'8i:!jreFp_A9Cc,Kj8*/MiTc[#m,k)-g<7EgB%.<^RV!n3AGM;jh5<hjNPit-%q,)BMPTMDrJNlac:.iK-]2U9":N7=dIA@?8JY&9=8p&0q&)5@-pLMJ]2d[9mjF$c-p*tQ+'I?[A>^3`+iKT"^qXar7!de]MV_gNj%gcmYRXV5m]ap=!dQ"g5,\VJFs-"[>Wk'#!T1hQf':/1<`jDd@Gf"bHfdusHt[9\Q7f[b\8WG1qqNAW!?.<hU+#e[Y$^NKUGhB9;n%3T\.A3<JjWJA?TrKL83G2B%T@[qa?(`sJ]?"/TM(3=YHBhAL"gr2JsP?IS"i7\IO5!.-T@<DZBn4SbeoH/<&A>t[2so$<Oo51_p)%Qjd9KElp(=9A;Fsk?><e0^W#<.W07cK&(,'\8@DI/]4pXb?\up^$Zt`)k3JBf!@F#D]*Rj8c!Esala\DKsnjc(V1$@^V'3i.NKhY%`[[l'XG9?pjn>-Eeks.@dqPMX<UO"($Z3"da\$X0TkQ^He<<!((YbeJ\@8BKaHk(r-s>\A9;FVogSI?b,4Lg(k^;=5K)4K4:THac%R@WN.Vq/-3N3OQcJ$!00nQKp>^@W+l?2E&1"2u`?>IT'`XC.:u](WdaI-e8HJo_l^kIUBdqHW??,0LfDFj:%nq@HiS!VDg62L!`(%NB-IUne*%NC`7"6L=R:l`V#[HT=nEq<arY?3O3-SGi<&7@'QBU>rRZ^G(k^53?NF@#ADTq]D5;=H8:.f"$q)/W=.2t1!IS,ZeJ^h%7rO5pg.L@KG-[QX%VF!.>;!s2T(?QM`mPO!S</mRcT1LQNLTAQZe5//;ZV%?RI.\)rk@Pp^q"["bjs('1M(q52S(YP\;ebJA]B(,%c7A4p^qu)U^&3'dMTrila#dUa<Dnc[-,l%-NQn7,RoaiaRg&$+4#GfZ[WiR\f,VTZ;`1)6=QW(9Ze)["(808!5\g+ERftd$%cqXo%nj6K0p82^c#LI<0X:p@)^JW=g=(/?b5d*1u/icsmjB2=L4ki!&k:Am%3IjkGA-JTn?<OogO-fG9nj^%k0BI8d/Shb\o!q7*<coj`%cb%S,i_ht(<rUi+jWi1#hqinHq,0E!(Uk@Q<cKQ1q##@ghhpXY[/"2$q^[/;.A'mF!KjB.T:LAm)_YhkR;_cID_YJa?9^#gch:DS%Kep8?FuIigme(Ydg@k*LD,42P2UirFqRL4o=oIDgVB`8%Ca`*RqK^/c>f"+&)Kfj0Rq<rAQhU?ehs0A4G];>9lF>X8[nnF'YOD-?%98)t=5Kcfe?f124hDMe>.i5bJcOl:>g]4))lf[+JT8.O,V)CRP2U+84I"?B-[u7J<!RH,<>jq?,f3ZE8?i"(npOUUP9D\V#IKj-3%h!4Y"'<!JVqDjH;ojHs!T(7-0hn37AX1?i#2*(-sme(X>`H!'XYOD-?[GnXXC8lRY*4M,o2%\Aue-5:5F'ha@Dp"Qk_d2b<5I^9L%q>bsC'kN64h!/OoHi<WNIdZMY,\pckp\MGES0"CjVi9+on+F$30$nM/e#_XDGn8VkcZ=KWjmVm6XSYZHl_gX*g8tkbl9;q9:[rD8%O)Oj,#NMq8b@GZ2n+F#TjVjG@^$N3#Ej),4``@-hp@n=X\Y&&Yh93.c]ma_=Q2U[j6cRJNp\N.B@k5+Ac\\Rl<kjpTa#A4+L:@'T%Q8hQ.hpK,hHi:ga\,%[uHGf*_Ie0c&F0mX9\_#.Rfn*K?j1KCIp\NR!Qf1u[jg*=I\iG'VB"<9egt`r5Z[TH3rA89D->NJ<5!I`f%ksb2MIs8)g9e.:R7UP4_5PJ3KpKZD,lhB^UGaai+r4RRI\,%84<SZnai-MFGZ"#;of?\l?'68R;p\MErgF:+-^Xl9!bF;Q3nm9)g%c79^Cf?_8;._#8VB(mE6alQPfo4dg2^Xpff1%YWMF0D3_6EK"!r0r'3S4H4iolKfH(:_uBI6XqO;-`Zu^VtVghq[P\`(>9UT?$<P%\bGrGfPe<PHi;_)#;$"\%hH'YCrSuG-!a?Ej21/C%m@-iI@+kh1\Vp!KQ^YQ0^!8b2lA62lrZ#`D2r%ARFFFQ2sqh9L0;,"KVSpQ%.8X/WYhQaA#W'?KJkr*)=u<sA(?9/?9so4_/B`l)^UE_W?cAdkr"aL#QJtj-nG)T75+IMb7oD7SF83-<\A!,K$*Ea7FaX/H24`X+%hedn&"hk67g:$W6MPf^IT4[5t;u7tj^R]kG9(cHWr;#R>[a'n.hs6n9h;1j`IQ"lV<^X]8ZP3mt4f#eEqNp0spJL^j0TcJ1i3k1X%Rqq=WBc%@7S"I<da'/?U.$b75"V6&?q_b5a(mJV-0RpXAo27_U9,'%*iSA[_^^/0C!@'Gh"K&ab4D1Z1kF]'84cIP4c\(WTG3$;i%*FD`#/J!:[iVi-='=)/.,eX5t.^thC4T7=n@,_ucX[,k[6Lmb[`fotg^t46fI_W!l!D2_lgb/S2>DP^=jU5lt4Z6IC]\34F$\S*I%g>2R==RW;uVpi--k0@#crc0g,gFEI\ld_3d\,,WD1:MCl%Vs1[^o$9e1fN0*!jN"=,U`+A\gDW.ig@N,%7A<mCj*6Z7eM$7oSeAk%g^,:`>1C0]O$;:-:GZiDgUiNS_*PJQHiM;3EM$<[AAf2!\Q&U'&>/<[']S/uY)j$_Kdq;cL\$E$[+?S4Bu8Jo>:?dU-@JW'+2SaB%h;h>DKBca(f]8$"\/YfKL#CAK0jAqJn!1InS4,=F.dc\s*#$*eN[C2bSHolFJ"epVDrTW0.+X*GF+<u0*T!m<aKge?j#=EgUkjl*%Os(0D)lQgT_@QGrq$N"-r<$C7;>Trs/4IW-DKBab9k]9Q:7:k._FJ%D[O)+5Va`Kfbhu3BYX9K,!m799TVXf/)!ft]*UQ/:pu#Z^%?$j@(*^hrJ5Lg#%+js:rJ?@DR7IA^2Tm65ff%(m1N=SL(#(MO]K1"po_:5;FH^(ZZnS<``c*gp\Zt2!:?\N3feqh9Y40G<H);54u%$0"Z6=#!mSSLu5X.mo>XBA5omjK$^FqsfLh',Dqo+GAcfokt>32TYXpcP*!o?6`,g7\MN0bq,(BeH;(-0(`?"ASsGd8d`S%RT;2q%S=R\M@fWkP=6%CQCQU?Ya2U'XHf:H"TNM'K-@*mL?91BP=eWn4RNfKW:C4a"XH!&)]=U"-]FpoPk?I?KSO$3fjeI7r$1Fg7-d%Lj%/.m59+Am#`Uo4WbHT)8me+DmiW-tBQ&t@%A`((0(8C8cQNs0@i0h/HK'$VIki^qtgoU<4ZGRN>WlJ-k_)";h*m<kmh4sn14g\W5^%92"ToUN+MsOjoJ!^HW&B%$"p'E%Y`X3V*YSqX@WF328hp/nZQnWH`\SMV&geZu&EOS1a%UdXT]CdhruD6DWpT5u0gL,chclr;lL%%M4lU+iTp(PT>n:!5:_)[;f%O41Z^5ap`Zt2D2l&3:Qi/+B(_q?!SA<RjGi$?,PVt^10"_H1:'KqpA7S`aYk[PQKVIWhq)6)&KBF&%N2,J?),3_@K$i`0Y_M]VTQCSZ*gDJo$fWMZmp^3`+L%![N252MKT`l/._U9%*Um9'7E$6Jo-%Yn)7ao.W0=&e_cC]-=lAqm"WEO0%ebJE"&uFtXVJq#c2REm1PB:c5q>I>LE'uY']iEA(in_f'.C[j`4Cm3eHNJ7lNa=-GP*N(SPJjN.Y4@[in-3r3AM_-&ZP`J>,FX."%1MPA!r.j(YH*J"^Hk5SK7u,^l6tPNg$u5%@5`*7n5P*$7^ZpJ@f&6d]#8@m?r8f3Olnc[!p<Fr?mS5:2qbKm[#HIp>^G8Q#88POk%%3X";R,_U3;-?Onm,N)?;!OCg8?Lr:N0U<WNY"BJ`-9m8X]%iV&,UA-gPpgKr^2+R7VZ9n_BX%;J9]5nm";P^(&olT/3?hGh@cMG%=%qt^*M336?K;ZSRL+NqntB*j4fd&iXbV'UM/r6hKNaOlnQ"@W:3Y=8Q20@>^cI?'7XI8?:1^VK"M2DUG[akm"?$\k9##W96#pX<%@<'t7Ea*HP-])kVV[AY_E/EMnc#2NX-^V38X>q6UNOE_h:$a0pa(n11e.7l"W`5#<h+3B8,GW[;l(8T>#E!ZHeBFAVVa003ME/4c%_*C!('_0YSbHufPT=mb!57\PV*//HM4-Q_><d"sg8p#.UL+^9e,8eD0XgRdM1,Qmch%a_`"El8q2?eiICml?Y[k3-$HU:Ym8qF"l%MBG?%>D=cK:/_;Pb0Zn:+VB%CV8;FtNe&k\Ab6J)8H0H7-glZ[_U,o@]N]eFJ]Y]ONbs4"*$gtK9Zh,uID:kI,io%G\_Y2!Sfc"b%WEMSjU2^_dhi\&Zh4<KI'll(U"Zk%@0SH?L9.,.=`Hg^MPDs>p[-n09laG\K`lci4k2"PoW91.r($![CBP"-K#Am8>&!W';rs%"A%Xh6a!E5gVP%46A^'5q[@"ZB8*3aA@n>":<0N<K"M\DgPuNXX`TX)&)sZIc#<^MafZm;[^N\BLIjGETbg]5nAnmSU\L_G6>+Y7.Nq%?@pfLo8-<@IWlrYqL7mVXo4mc^:^S-?ci-Xn/ZJbB(476^"G+WRjDkW@8#5Z=UAM^n(`ETZbLX_Ui*TFM#fDRmrN.01VY2U[ou[r%Nm=URW>":??\t,.c>A5q^WsJVq:W.@Qp>h7L:$i%eS\o)B,+XGWH,][AKUE_Em3N#V[DD/rX+#hLR5?C*?)bp9U41/m$OkfAso62%3"&mk<&u.1IQeEf2-&MY$kQRs=i8?&MBF]Xi95Ah5C_OIl4):69iaR:6Z;C;VPtJ`7[LaQl-3&tg[sn@r9=khD49=a3@j.TdpM:]%LLlVtj0S1D_Y5L%[P_28D,f^g0/2^u+8^_HY0eLHXk)=fb\ZqH6efkP^HY[J6TffTBH:s]cXIYSdr-=ge)o<4qtdjH.SlVsSF>fY%Qs>d+*+/'XIlR,-:3%4INI,:f3$-:R19.iKh=sq=<o\OH_[l.Hb8,\M=^c%UNhrj>pu8c(B;!(*n*b,G'a28fF*Xupl7F#e<P6X"%O!a98)X?Mnret8@doln3km6F?"5dfiQ_"$leR^u%N'[FJll>4.KR;W>kHXj]_g&-#<T])YS_Y/H@37=2fC0)ar"b@gaNVIr.tGO0%mmmuNb>+Z[IYO?kNHWeNgg3?8hr':'r8DT>fmDC(r3"W4"MgM\*gklt.t6^'l+kjt@`3^?3uTgMXsfoq`$9G4aC55Ts7TjAKE[5m%<\\lh[Dqp'o8tX\"LF[W"G;nlA&9r`#_"WM"LR>^lObBt#Re-1e)TgZfgB_.Yau=jb9;om*>O!M&A6]@OV'_^-St'K-lg"P6_GN)%Y[<5)K"f(HK-38Tf_TC&Q#mS+T.=ioDg,UpquJU%-=jrNeplmLE:9&T#\WJl3n])@MBVA10/q?Wr7nFVZ*=O6=P!9!.b[lFiJOuD%7,OS@7K(^-BZl?ZHp7%Ha]3?OVD7e-DV,/-.VLUg+0D9G]2sGZ2n/p)s3%Y5/Up&F,_@PVQnp1rjK>LRmIKLB.C%J:gFf*S]16\<%Hrtqhrl;(DmIFCs?lVi,d]T>![kV>rAVUVk0=b,j<fu'HkI30%ro;.#0KRii!Na_.fX$NOUg'n<g[@s-As\Pej^UrTNL!=\iVdJ:%<:!Wab$nt1I)'ZHh<3AT]!JY3#,^%)I8:p;@V6YGekD!iNHI&hf[s]9BSV"3l:0XMT%/hE`Z@X@c8J_iA7JoSTrSp=0YHmh;chr7%*p0L?I1l+mqQejZ7;A18CdSU$=Y"O%,;Eq;ATnp;\g!2Y@@*#VfBDg-A.AoPI(uWFe0@&saN=l/qfD>g1m\j)/q_5G,7ED%(a@)]%l98Ia<odFDL55\[OrF5&36s=;gVBdHk)ifO0e\)XrgRVGd7U1NYF2n:nWdY%mC)M0GX5t\SG\5M80V$Vcs0/-rZiF">Fb>m+*hoh%qid$r;Q38NQA2NoRV7e;n]*;dL:7sHli(g>L=b0IL!nTA+8G6DG?-2[85<478,"67/Lf9ANmURb0jlo+V4'"%'l9hEA$ikn>O@,[%In]g\f/lPd'1jeGdGoIf3o%NJNVD%L-/#8Q':A+l[5Wm:hX$6F?68XYFRmLl6PIc5E,5>WPDA%r`EkZ(g\SFGJ''*&*j[U`2J<0L%iVd^#g!D!+H.s<>V6AulSi$([p.FUdi3npmeB"&jDqpJuh0HIn\MM&K7ohH2X\KDQ*VaFDndi^"Tk;F+Q6Tk>CmQI]^5HlfkAOT^%Y>1h"`TjqAZO>XFfB]7/D=@?G-cK'""gbP\o'N!,/B98bpY:JIH-&DF"t&WY#TnGmIOgCR43Qr^*4L/hCNr5>[<6j^I$3h+cG]P%%3kK+*CF9L37m07I5.,_>I=hgV/ZZ52E#i9W.D"]JY"gW'*Ol;4Wo'[T(XWF,jO,$iZ4Ud2X(,j&Hu'!:V`bkaJq,`'dX4^T>-S_Y%F$Fb;NLMubEo12_6t=fG'cp-%</G6$<\ho<5;em'm>VC?e3D24T,ok'6C'0h[&+hQeB-sW)R<U1A36(*q/Z&(Pg6mE])DUhrAAJ`%9l86TJ<I6MdNfQ6m@_Dd^6QC*S"K-eUoN<IY;_OQi*(tMk<kMA:3CKgP"h3\HYRqWDL6'Vb+oui^LdWir&d+a>1d3;+3A0Nktb9G%,c"=:Tq3p>OCBnQ1^BU/cdS_EVnup!I2D($`S)hWdOUEF2Q:ati<co4V)I2s@5Sn^53Dpd/NM@S15pS'Xc_PPH5TT-j0bH.#Or+7%kQ@b;(t.u>O"mR34oAa)jYX]c_<Tb/8cg[,.Y@c<e`N66>b98cRc9hu24U/l/TpM*:M6\lq2tNl<k7$IMi3\niJg-+^H+8^_7S*;%*.[>$MH#<H\M:*MO&O_UIphm2f6\e/R%7Id=7RF/4Kd263t2j<mt<3T.s5dopreuA0iCueHmo7#9s85:SOHl76X7aK_`i@OCL"Eb%);ZG,f+p8+VPIgYL,nn(DpUhDo:bH2UloI$H$?)>AGot:dbBMShD9F/8j+qb)H3EV`SKmFHZ\\XRKOsJ,[o6=hi+3-i@7%J_PnSf%<+@hsdBf?to'Lf<Bmbg#95XEu:Qt`)G*O-)l,EscO`?=rkFuPsXgf?h-?3O8DKGeb@:cG-T"6i1]XaH%3or3.L&'l/ce2^&VjYcp%\<q$V2Rco--^Kg!1=8fc(,ic#R86eAc6)CW$%Mb5r!^V<jYYk14$V'C_p+*jBaqC/@M,`5bY6-l&&Sh#lF.3d.Jbl5U4P24HU_!r%&f!U*]2qt.,>jTIi>tj]p-aT=&@&$Q#]6.F`71.F)FO-a4?0p!(o@/78WQ)L+NJSeUKu.]L!KjKg5CLZT"!o!cg**\9_i8j+8qp'%m)aYsPL1@Z,Lt4;#OI6h-<cu1m5=slFH1QoQ(J1./V%<9dsDKP(80lpB"S>DZiGtDH*YJPdK1ij#pD4&nCFu06OH)PPQ?[*QR>'k%W=>Z)@Q#fYAmS,V!B65*rpDAjj,VBANdj"A^s'E6pldQ/m]dLN%e!u;NjRFonq!jp,-#j^bLT:$DQq6ZF+Z9[>9<Y:f?nVNf^NO4%aUem,XA3i^Y"lL(gGBk91&4#gS8O*lmR$`FcEY5KR-g>J;L]ms-h5Zf#)17<BjuB1<]ILC7dOf&\EVQPCD/P?RnEl0lgrug9jsIp%\43-q27Y%o"sh7`)1'fsl?^\oR[j!li6(9E]X'BmI>(daR`nUIm!4'i>fit@%_2(Xkj3QfgZ.Rs>OB>bd:]MP%baGHmp"Md3ZI?%%lDIkR".oF<p!^&:Yrj;NVlQEpg*aF(g1_Yo9/l,`\JoD10KpO02k9!A_e'_=8)DF1ePE[.LVLq(9_F%!T67&[A4LARolF(UgY&Jr%SD7*dWh2)>L1?a_QlbJPRJLO54ZXEsiWS>!4AhO5)t`8^SQ1jdeeV/Fj`<D>+6!NeZF7=->l<6CdgiPk6j8!a"\<@"V^0A3Is7hR%e"+q]3fqbk.$b[PQ]TVs."-`O!\#^O@SYHu/u1I.E>S&-D"gjL;OjfI"%ZRqPF2o.?[B:FV<'/>Js7$9!Q)JNUpL+/'V@Y5-R)E&%[m@nRN')WTNDJ/P44)g)hS[jn(-G^"'6t$g3;o?:J2;s<,'Ymcf2duhq>l@39O]+(ADS1[7EgIWr'bJQg,NS+39MMjHa8k-iqCE3%7^X(AU="p43Rqhn6m<l33G1G8?d#&0NP_1\\Mnbj%d%l@pm^+._ZD*YF"uk8'FckOpoRtXN*,QIWr36L'pIH\UV*Rm"u':O[+!tS%\!i$=*o(jZ11]n$;4mLjAdV8l*;N,6P?4KI`tP!,L2b?pk!<f%h]1%59kS&cdTKHUmPY8%)P?b"^XmqSDdsZi[huuG6L!_36_ST7%<33p!+;5#B-f9A'XY03OSea.sO..uB1Co>R`]X%<$Vm0"a%QJFAhhV7^_n2RTC:+mV1C=)Uo:+ufGFoHeu(mGAF;FSfBCPER;S%o%VAr5rgL:<$j.R1PUln2Kk&>-5;/H6AO9CLD[`,_P$S85L_tLI7Re(lN^YLiBU(S+U)u?E&+*W4uNR;@/b)OMDH*Y-7g=n'Vdm(bF%2Fi\d)P.g`A4KF/?cq)7'3VBZfQK?=a+J)+RU;\^rdA/;ka]Vp!RI0R7ggEIACl@VET.h$9]gK,hSpG^]lOs&ftfiKXJ!nia*+$g%c!e3QV7aa1!aYVG?cl$4ZWZ_[hg?k+nYGddG3_eHM0%8A>!HP^7J2&kCf+b^>b;IZc)PR;E,0?2Iqu]f0BFLO'Ug[\qGLYZ8HFjJ%^(d;?UE+b3?$K8_dABlgE7esrUkn2KTgeR[mNTg4_'J!UiN0@@EnD]E/C)o^qWG%NY;Z#aX,S35m5*.V`\nnMlEuKr(pU;K!gd@+%M)S%M`+j%^m$Nu)Y&c`$0=]GBPD#aCqb(L4.?ANaj1BOb96m&&8Asd:9?Hu]]3m(KEtmsUm0-..S>5:H24hT]o"f@a;BG!Lk"J;r%06_emjln<"&B9!4Q'Q:91l$8?[#1CpXA-ErV**%#ke6VAV*)Ulp.AD67`5[:$;9NhrUok(AU@[E3FCXbq>;.4jsIu+Cbjf\(TNHF%'-MiNj,`3BWO$t52<u$E-=uLVL+8#Mm!Moa'jSkrU[Kr;8dAVcR.Agj!E^i9jXG*g'AbeH/YA6tehQ-C:Mf>sb$2o>2`W1W7k&?s%'Adsuo#:3!hWWgORh40_Wna/so>-p7\mO6]=oZ5rEd)Naadimt_b6b+r-8Qd83!fuQ>5a<%2sO[2]if8j7'\g86Nq2r<CQ%qOBmp%&P8h'VG==uQPi[,j]CX0ib#-Q?D^e>ma9]s`.")8^u_?_:*XR.+Jf6<nf6d(WoA1f<B:a-ah-aK<U!%RqV%OHoLu:5Of5'gGP$Ke%F<i@3Da(msWjE<P)B6)[^W?+jWe-31V&WKtF%Bt^\;0PXe=5m2fA,9d62iNtgbt1?kN1aFEdA/mkOSg=[-uY>]\:<G*s'p%fcY!M%]HW1_7q^H&">aCCD%CLO'G#Crrt_&Fs./5t/sJ#Y3%dY-?rGn?P8l'uFJiMIp*/8YEHb$Dh9ijaPW%ro<mKTte<C_m$HL)3T:43f%:>trqK5<KV6osMBoaUoVU%0nlN>>ZDM-],9c:4-]EYRmaGqhs;S>.2g]b`6]EK631,P>V!`?)hJ1@aq1!J9(^5NBsbp`p2Y.;LHa%Dl;>Iq'):<+h&FuZgs,+S#r[P^hgrW[DWoQ'b2D9@%Gf<jW@]lG4?WK.s]cR/`)+#6gj>R@;)`cpa"hi,h\B`qbIni*Knt-bFZ@2%q$Fq$8[>74n<q.k)qgFHgoM+Ml,&4:Qg[uK=?.Y+nG2_>d3G;n,$X)KcAEN%kgkqaaPWgIjX$L_oW(Z8oqf=>PEP@rpo?'eb"Bbb%+HH(U,SkQJm@hN/6BLY1o\Lt"*hDob-?1YC7tO&mnpQ7/[CQ-qT]G%pmtqALZ);?.V`Rbe?M@gf7$3[m]1%qH3`29(pCp?U@7f?a%O3lrb-OSO/=(nm`rHp!8hK<_>BK@$8V.Go@3>qfGnb/NEeX&6m>'#!sBA]BK8UM+9l%5LWNW5!2]E]H`i,^1"iaAHLTKs2]p'n0M%F/0u231(?j4T$B/gR&o(m2Oh`7YE^K#:ng>MpBI-EeF]rE6]1qmB$L/E-6bs`mU+Idb#3J:G1,q2+#Ao\_Vk@'gcNO_sHA?6ccD,%pg,>$b_jG)(%>3ia<oZMKB='=W-SBFGXbmO&#'ANZKgkZ:@0T>cT#8q%^5LOKWMKb?TEdUT/Zaq+_2'*F"Ac,2N(LC]qNQP_.g6X%GgK7l:":4'n/gS?n]U(?HhG(gF6(2`F7g7h"G3[^CJf/C8n!_km<5osTq9$f8+,T-I=gJ;Ets"I\j8E<_R$PGV]3#'.*Q+GHFcC(%NZri,H[31g4-#JqhU$LsomE'WO$u8q2*!`SR87S*:/-2.:_/&0\Yl>E[,WPk?_557@WmTQEsoTd)^idWMb=h,T+JhA)7efQ]dH?-%cH]:j,41Pa4$NWD+,CG_$4[m`)`bm$5:Ls&_s,R49<$oRFI)Z58+BpN+)ltO4H<#Ngj9d&Cb*@bK:r-8lk[MrqbPirfE7K,a@g[a%(3>rN3ZS'h*W,j))!-%-Sob_/H(:P7V^D\/h.#u%%U!QD[rWuaWI)%Hr>;N@/(Lh1U1o6U2F0pn#l=h86l$YdZ9!p"'<XBc*M"GS%F$@dmUqXZH#opG$PP4l\]$56\2T%-<_=f^)g_)MoE'd*6!llm$A&S+K+`Q3L2V*/%4UE*0?P;Ig]l3A&/^t>s\4]e2H]-Io"$%Y'%h_<2OI!LrhJmBSWd)85^.*mHTo[mAp>.su7>6Soo]Xag+'?j=h@15fF<b6)9rq>lU?Zs%V\2"o"dm"!U5^iTk`p"nKMcZ?HcfY`;%:5E20HskE&9;i*m/975,?7"+=?9$WnZWS.!4[+4X:lfR_kN99s)sX\V(U"Y?Tr5OGa0")mO2]/2'C(u_/*1F4(4;K-gG1!#S&G+-%Vf7O?IM\]Lr%=Jj$MC2LMcUA\Lek".Zs!,(<O%*8-HuG$Xr?o4[>.-Rfn7gndn;LZEt)iDS+SM3l@_)TROgJBNMWYK.SEK`Ft^Zq%+f*^"bWYAc&\['HWm[33$nOe^EdmTF7#s,hd5L]/89pXO7A%p+(o5)=F`pScIYfGKDm17XcsXiqKq[X*ZQii)+(XicSRS@*pUDtV%00SPr2m>Ju/)ZBJ4K]g&Ye<:Tm'*KKd;Bp\n6O2_:J/XI\I*i*'s`WI=N#EME<T]>S5uKR?Z$?TAd7IQeWu2S'o,cKqKb?er/]m\%o<o(Aqt+Mn>Y*>''kDM>CkXD7HdOF"f6%I&nEJVrqT4/JD;fl8Tc-E'CZ^`!o6L<`#tFVO+nitc5)=3OQ+0jZa"rX,[EbMBc(;)0%/<Gsr:B49V&FUL)ep7#qbpDQ4a)4V$OfT9qZ=.N6e1VM]fE>W/%Oiu[nk^Y*3/#M+dPpsD+_1ckZ*Blf8dh<a%DE1F4>2_B2`(0O%F!<VYep@4Cq(Uf$i]Xa=,'BiC<kk1Hf&4/[J-$J6MmG3WZ+3tR5J-S9JF%"+)G>C>6`$P>`Ib[Z%5gR"G;RZk2h'u3?62\-c+@Ua%8[,;Bl5[8/j8sme5DR]I")i(_<[Y]9VkMleT6-CfQ9`SfC:<K^fmH<&AT8K`6XkIHhG=e-LUY4jL%n96_:s?j6@K=)Vr7>5B]GU'%Yt'!4:PhT-Ns4q@WO((:^DfC%?Ci]sQl4Y]h].XuN[=[Y;`fH;3EIa1]\/[ShNd'38DNZP`a7[NQ*Ks$Q+e')UuFGkU/%0kFC-22%V/NT52L7+C@-@HPFX$&@I(B5LEoDJcf<*)mFT)J\GGioqJ*]%R;ea>sH2KXe@eE<QQ^3ED6h9n2Tc$)+5YuIY[.361\tAH2+r[O\%!FKf9A.L:pa8hMg>/Q8p2`M.Q*,+>m:#D;o]#X9BXg@#?_mGC#3'Gc,GXFQbE=U/!!E'4G56&/V:;!IT</n)Vn&3sj%X&cb#1%`A%;5R+JCN9lUS(0r$35VZ3N's_[RT=8mS&DfHRQWlfZGW9P:1mB986'QJP$iYu0&8J4q'5#0qhspPk*k8^qS.8=$kPRInYRMP+7&#;%/J!6H7q__;P_O'oUIY5Br7SWEh1Z>#Mqh2?R+n83A:5c1rTR*)qtK?ETZ?Wg<R+THCZ#kn2,KPT?PK<@X4J<jY3.:MSjm(3<6O_;%^;.HP%GhrFr(+,KpZ'ouir'V^T#$"_/Gk=]cpWDiHanSH?jL4:ZQ\/<qStdL@<<4@r@KZ'gNXOpWbP!0T>*)J*]8F)<3n>?NbJ+H%jq],j<8Chn:*$,_+8L)+qW7?3[_^#.3PD'YJhDR&oj#2IR<.U<V,aUPa&p%_;u57:F,uk(dCV3tZ4lEt#!8>8\+bGMIVqD&mP`pD%ML+k(d&k>!ShiM)R0V'/]X_g"$U#i/hgj%jj)JY^9/OUoKkE`5'sW(&^q1!<d@'\]$$^Y+md;$IcXkd45!<l>D/1E11`>AK;fTmN%=EZ<G/<q:GPu3>5GIP!,_H-6>#$TkL<$Qj60Y'Z#CiB_af/)jBYOW=T=F_+&>9BT[&"_h6<8ZW7*B\OE(d"cl'h[q<FsRCM.?rW,%pH8q:[tMQoH4^9uD#F,g3T'Dh=>OE,'OMK]8lKgmqLTR)3h2[4F)`Jg$OVt.G.h9=<-R9I<7C,KF8P`PpMq3Kmjj'njGO4<3:2Fd%l03t.p>mC.k;-H&F8"W)_r6801F%+QXLi_\'#6:Ko84k+XaZa(!n/&oE#9Rlo50,qN,Z`^/FqreVns&d7T8s*JJnR;c<BWAbg1rK%)s_S7pr@ct(XA:l7oS\_664sP-\.Zm&8-?F6t,R>hHooe)m%Le!no\o[_FK.4hn2PMEc;'$Su;3`VRmXlmYZ$:Z]UY`8Y\5Aq0Qh%$iZ?N-2$OJ7a(:$O(S;[/@i`$<9\Q%Yj<7DVeDs.Hml/(gmF]THh!,LR?@)hp\r5'EJo.fT>-;8l+AUAEHLfJ'V2m$fpqL"r+u`b%^[`g71M"e=3mR0g1,oU4`kcJ\9<'_]459'@ib\$!<r'pl-;!CPU3u8\cU^Td32)V3K8n$':XL'2;4_FK+F^7M]fqf-GW8pX"DmsU%.>rNrdD.,_)&OG?(b-$P]>qnHKQ+o&"A=%#btW"'&oh8sBlP,`&PnSWfO!BRMZY=?cLTiW*5HBJ(f"M.L4"m^d+_8"/u0d3V;Wa"%P*([THJ!?*?8G2t8'-,$]sZPqn[A6b!m4<13fBL3<>sPZk1s)+n]hJu]g6SISKLS?0NG'bZNV4mh)dnLBA5>>Q.\lUrpt0C5*glH%UW)<]d45+X`s2LK!/FE,2cmR3Ssle<SkmS^`\)^'8\J\-]VhB0CJf"Q`a-s9L@6L`f.3D5e^;][Z>I40YL2&=4Ypa(7a#H5JA;`X%rS4DmID-g1DaXlNq<YqM"YC=4q]3,hcRnGT286t/Z4[S<])uN4cuNm@/T0+YgISh8ps6<,M2iCdLHl\c;Vod4bAf_4P8P/SidrE1%lY(e!#I[?`c^R]EYO*Cfg)i+!J19lUD<&Dd&o%7#$$sV#(RUH'SW,F]9%ti6)-TbD3'4@+UKqY'V`)h%]V07a#0<l)jFq^^^e*TS%K6Dt?r-l>qoAM`^WGT+@=PnYmdCD1&8/Lu%9s7ld9Y!3_n'$*5$hl"b+)Ao4Dq>bgJ_<E-Z,qX/ZaE#%s3gcqOF/eYmr=fIdFisb%DXY<[*T,Be:-\3B#M8Q'HGlEH(!5ceV\Qn6;.8=N48sbK8Fh$W#;sehahH'IHh>Ib$YL(D'"s0fYr5Ij^;22a1.Pe=U)JLgm<2_g%HI6MKj$@3PHh=e0HZ/D&.HFcK7hZlIo7e#UI/;UU*=gbD>!M27)g$&"d7)hF:8;mClII>D2jgne?\KJPc$(%-_/!=`gH[*7*C_$J%Z`OrT3If1%%!I0XEIGc,IHN`rrW4qBdkkO;:Go?$O`VJQDW+G'U2M^YK=Bl<S3,GY+8f]BZGi.V;r8:=GPsB_A_T/r'Aq;H^1Z1Z%fG,0-:/*qlM(Y^+G.sgP!)%`P=d<"uB3VV(,tQOKd@J=P6@CZ/U7s+X'pdU)_AlZDUljlCR_dtK7q6DA3ZiaspA*UP/`:,T,;-]]%YTXXe1k($pVF\"d%`-t@#VPjGVu:1)EaG:MNqA(RX^N$+-%_)q<`=I7]3/:u+0;4idX-8cHgBJfP/1jUI_gTl`)5f:Q!AcK7ronj%laX]W]=,>=J!fRec>[S=H^2rA1E8Rbr/iX.p0oE6a=mA[f..kaOZJe3^,5?oa3kVb52#J=Mj!sb`tI5*n@X\ULLi6snQADB.9\5L%ld!X>iC-9#ZoF@>MiHCg2u-=qAhB0$b7At_dEK+?/58jK$bpHHj,PG-mWdIRY;S?u$&A-sZrWOr1YMX_cf^9(inP>eo)hPS.FUb(%nR-TBPn(!aR)fj;5,WmjTBC149BMb0q-QcS0Ol(EfieQkd,GI[W^&7Z?;%LiI?SnM1l:>QF!n]=h$>lFd61=nfZKteRf=Z?EqOJC%_i2>ls1,DBq_*s`kqTe'hlH`0O"_n:qBZDGIDLb$eTN>*['K4'8!mU'da]+A8hWFHQ4b?!XNpnB<'0o/PJM;-T1?:$i5$SHRV]u/%U(s2&?8kA[e/E3ZEgH<W*-i@+lT*C42-O5#Oe`ZC%R3Z(2-12kIBRp;+4$"?Ul@.2l13"K):iK,CoirH69MpoH(S.O*%8TTN$CpJ%6MTB@EOLnUjlJ>F>&fj/J%VcMh6c>B]!FQ,-V#D\Y81/s9dt$f;I@GN2=WoO8&1=XAb.dC0<;giilh&jS`+]aNb5LW4.jXamh4I'%l):!J@/"&TC<ZP5A70kDIt3MQc^1u1BNf5uR!Y.!fakId>gA`ZelDRaTnWumaK3U7Eat]fdeYD@2Z:!^JM\;lA,%n#W9\oHrI.O,%cjE,2DN%8q5l]W,c0@LP$n3Z1/@"+iTSI2Ip"Ru1N4BPLKNu9cMq4r-VZ^cSTRUi0^.2L)FlU9<^3fmtUUr`u1/GXGBkC?&C,RW`%)76]TfInmW:F:ipchdAG/u[ckm=6DETls_d)i/s=(6+V#lS6Ri%dI\^00Up<SPL!mZF.0BN2:uB;t*n0Ma*9ZVVcaV47Ud;T%Ko^%\mB!8T$CP&h6(K+5M^HQ$8*(XD[/lf6)TM+FL'uUHT=7Zbhp]oY(.)gYOTXKf3"mN*reV-go]kRIiLH1Dhj`lSS"QVqVg59IQ/m'%8"A]$*l%S.W;@c#Ti,sY#q90KVkPV6[TLAW2o>'>?`P%Md6FBFIB!Ll-L!`nf:5p\O.mQMqg,-"O8L^gFg_^Z/7K[hO%ks)hT.*O%CdaI2f4\>0kVeh.QnNl;3Lp&DfAZ?dSENFuL\1>+@eNjm;.]gMb#mA.RceUTY'GUTlTmGUO4qo==,THYUC6/U$)XgaA(/iGk5=b1%\T7i?l^F66/\[]Vl#`]fOZ6&o.PX[aM8IlR<lsRPIo#f-;5,O+J*cbKeZJ_@(H:Y=h_)ZLop>M%qPnU08o7q+s'E@K\G1%5?Zumm%cgH9g>i#(6pK-P7cS$lh_8=1En+2J:P&*@=dQ'([X^(HHY7o:rL[r<KV"(5UG&-ARiJY$$h7@=(kV]7Fjm"O^eABl1O3'_.D*KJ6%^4)iLNk\O#A,#$P$`/'Z$\bnXc4rQq9nmK0.W2$[nCRYMq0;FR[,X10@r28O;l=]5la>j-Q/m*LDGKV!(4YfM+6tkXp)S<+/PaPb%Sal'Q4@U3Fl,YBc6_g7mA4D:DS9L!:2\GB1.#a^^2[a,bD^Ni_Ac-DIOIXgUOhA,_9D/r7gb"aS*nG>c/Gs47/`6g_*:o][)+i`r%>dl9SADl&eR@V9P!o_\;h'9r*Z8UfdI[Mn*YT49W]`3id]i"1&OHAN>oqnOu6bG+u=($!l8p[6i=`#[\p.)4'npFtYh#&iiC9<?c%_stj_61`QAa]]?0*1C38=?h2I5FaSqXBJ8;b9R]dOZo1sK4i6+2%e.mQS2soc63YT2D&Eu<J-NqF[m3:=hu$2/h^lrDK!a[nX>en%G&(TeCb5%(<)8sBeVYo:OtjDMjT$9>qXZ`H\LZ4Ybde?Iit_kL7?.=o9-o]>=QIpCb;i9E/e3eHk.cY/lT0EWKpV=Eo>0PT5FHkT%lJ&?$[N5(7`bhW5>PECACUA+FpL3K)8&>mq><<Zb'`0JRm=$i6q8#_Kle$[$VlM+Z!>Y$A\lFm#',uqmD^THeQM#9cMTc]k&68gB%8s;pG2uRJe0*>?.KjO`1Y!?Nr1`s)pqV97PV>>2k>-meLVK4sSI7"85K9g%<'7U8K0QK4H/_O1Gg'QsO3Geepo]Nfb!U"oZ"8LS$%P_udTSH*;q"`VmWft%GJSGWD9hSUi/O!"t;_FciE$B>hNks$<LA"&('oRhgpU2KG/6j)6'ftqCD,po]BZ)H^7<;j7Pa3t+Q09Q0&%i\<N-*Z,uJJ.OJOIK`#Br5!-7)8u^'c?#<8\nU_m?=6F\$@Q'VAnuOLXKOZ[E4Q+ka,7/8"dU2T#ODA?^O2J+*Y.$Y:1_9Z5g7\/%iuN!3cZTb"ik?^b`!L&F.-)#<nYY>nI9]nDHdPHejt]Mup:'JN1CkSlnh64&.Z/BaV/Q$m.`UTUB'S/(p.i4Eae"hNeQhh1c1F]I%3?Pn;^f.+ZO4q<b7(qG./e2Jn3#?LbC.f;R],Pfh"]b&/,T"Oq[8OY3G^oB^'BME<;(<LGKb?^Z0WK=s/q[r;,%[BbO$$_lN<s!r%NA^8pCUnqYmc>ciMV\0!)o).c1Zs`]KRI[rD#GBe>&WoZ?>f,d%At6C3]al/H9ufEVLET94QWk=N.379bT)-sq@39e<H9^AI)t0W%Qhph*>EF'eh]<2W@2JF[?2X1m)ERD0Hd-js38I&b=KT*M9S/&jF61[@D&T=W7=&XDXMoA:StF]WZbJp>_SY^;F:^WIK.o3'J$>LS%_/=]-`iL=C\FE=>XlMbb=4SM<n"1\j6-s%41C0AX1^K-O_<?D,">fY!oZ("WmX^LS)]8eW:`0E79(IV]D@"mo/J%NKocJJcgj:?f%fpG'M`"&f8@IFt\=6hUE2mp>OC^<L*#IZh(ZNGBWnp-@0*![i!a6cR"@hkr8pilu=m6=dnkY'Yaei3B@),Vr-d>#BO7pAi>Bf@Mf%XaEDnWnk+7;_-R&iOm+-*;u:B>s[B+Z`5Dg>A!WiF.7.8_<`e65,jDt'tbMp8u3#7Gf1fu2Vk`tEYha:g<_mFQ$0>EaIdeuhX'CG%Lp#`JAj'Kif1+<=L+F4=jLfGLPZ5\CkSrl+DK%.jWsITpPO%p:@q@iJ?$/!9DW&[,f[(j49]DD.^TuBXg)7tA]rJN8:1e"l%SX9o%JNRD;/N-XHCEcQAY19rb_R$Q6DE,t4Y*k8LeP!O5G&0Ok`ZCQ<<U]BnB_kZr8DnOm2q*?0Z6Hp:(tE,5E(c8$6)X'nC^$h`L/I%_%W8q"?kKJ1[)fe;^r"7k-T8PaV,O3YBXnfUC$SBOLh:NSW@??=&b6,,#EM]5H]0FI+;=hH=Z<$lWT5VKM)kk-C,"l5%[m)]_db*%a%-i]!4)Z)`Zb=]r]hIR8BQK=a2D_G5i%=82@PK-kq*mS)hc=*cA8/-$GNmjUiD?'5*i+`$Tao5^QSYn\OllRjX^0!"$q^LWXV6B$Z%[A*@KYJ*"gbJn@LHWW:$Ijj&9>`[nkY,,IE2+N\BCPJmAr+iUs6(K&,VKHg;a[N,Z$C8>mSHq45%Sr-B;-&fPcGFiD_kt=n?C`t*%q4G7HZi(!&otFA\>9$:g9dQA$*0-p!PM<\-rd6q40."S)PB-Fp94uXtZ\:.VWM^Z80<)3NI893te9$%/35+^_bse8N7jM`[\Gs:9%m<A$7bsH*3H+Coko,jji4-ll(C^HO,4(@+"Ft#-N`0dq_H/[qpX8d?mE%%3[lG\r3rAXI+5Qu^<E3qif"_tfh3=5-$cW,bh`?FUB%>Is7_ibiLJqf\e%GiJXJqLbF:s%_%WluQj9eNodQX3:gQ?c-5.Q?oTBA&.F*X"nT.5NS1.<Oo[?14RjAIo#f5oF3"KFB$"9[t@;$%K7d.oro3AF)A`NH[>W4H=0!_K]X[3)rUN1.reLMC8\]<+IQ%Pr*s"u8:]!WD:O`;R^Z\b<r`*,.O/d7[G73<Rm_8Y63k>'!s#>mZ%hlUcL/bG+ul\ghfiedXHC6*F(Qd]kA`3PE%NCSClruD";mQ^R9l&Tt%`+>R9)aVICUjjrE?bTId5Pk?XGPqc=Sc3]ACj2q`S:m0C%;dOr6Ft5%7UAeMJ8d,qoM1_mG2(OSb`=J`2MUG^'dEa_YXnI1:a)BAC)YF'eq].0[_iPe2SGm_GFo+'ZW4Zs\g9n:n)rC<L'e`,k%a/*BigZA/]NJM*A6;s,\Y%%_/Kb#9sKGsm=`kO\6d0n.&;fMlBA%0p].&hHRX8"^c]4,B6aZBB#"CDao-+i5fSc$'$\iRV$0DYA>%]AGRI2#j02la,r_O3R=00C0c0p@%E3TjH9PhHX?j4mUq50u7ng=&eLqA7bJEQr7^)9[WIO`I4S&nTloB8l[(]ak<[oArhj![Dp0"%4`=U'<uREu#NOf(Pq\.1HW[QtCK*u92CPH`H".INBh\N_O3"@]@1q>naGR'JR)5pHVW<%$LjIj;7klmQP6XWo?22(H`'*N]H]7YK%^),p/^O<"Cl@\!"5'5\MjL%7a/c%\YA-d28K_Uch18ZHa1>.B7aOjQXTa,GdR9g:rgBHNg6fUY$OSW]&N@E!\9m0r'2"m21kX!t"%VADVKFq&]id*Qo$i.m.P2JH<CE3)^=dE,\kKO2#kEI*0IDHKKcfEMU[P3Yhc=kX\h\gR-GfBZ5d':P,fEpYeq8od):/k^P#?h]5F%oQg[UbEo%QD99Q+r90a)f0,fTrtF_E^R@"5VM.Y=o-`/C%P8%CfR?Y#KZCSt:</ftTC#hW[;Vu3MB5o$Y!Z5[m40P]7B+AIK;d#a%&s\`aAn<@t4]%('?;pR(?%(jDIsk]&#>QRA@?S.m6g4*i=PC7']r^N[0XLR+HN,MA>U(,/p_B_loRGA*Vipg`i8LYl(Fd\r:Oa"\%_sU+R6[s_]ouF>[[E0oi*KOr'JY2GHIEr96/o[?%.QPCPML(H#8td8K4f1J/9PuXt:)Ni-hl=a,UO`2U4\h@5IC`/(7A_GH74iqW%mp#/59MKZY10W=!'Lr%sOMW9Y,4,/JQ_,%pRY%hL$(N9XN&*Dh76_mDo=nt6?/*>'44J7MqA(j(n7^&+eqM_g*AYuphtsUaW(b4r%pd/?AO8FD.=N%J2@!JEe;:ISkc'Z8M@krHC,i_3E:8KP4)/^KQ9GpR++A"o,$q3Q!EP(C&EFKZ^MW]8F\L;G1.LBT"qGP1)V`Eq\%I_I(J>SZIcLh<#E02o,lUCtn0<'U>D32*6CnEtp$'ZWsX>n^;03,K2X',.;:gfR/gC1=rPa#h]jO'jRKqWT<HNZUiL(Qga$K61',%8kD8u:qmrK9]tXm-hbBNJgaJsHTV_KbIsRGKs'0+IsSiL:QHuF&Gc92;@*H6;BL]hK%'Imo*XrKrg(p+r.oY;UOi'H`2,'k<3_Kf%!k6&,*Dd],"SW$20SpWF8E5b$LMk(lBIJJ"XHW$"UfnIM8h,r1:^u[`^nCsf<,]j19^5]iDV-$\Jhc[mm*d1YJeCk!CD,82[3gQl%.FaOa'o0#S.Sc]T%o9-J8`\jh[",rn*KMg"[%d7?;%dhF5Q_;_7SS%-.>hf,VpQeSQ\=)K9_K6bO\hAh2r^kPbTmHK*,`te74BuI%l5C+2j<qNhTB?Gi=amH1,+gie:Ug32:GuZfO\>&"hLV:eMMkF[-K+ISM?Y$,^ia<a4QrN$mrRIq]c\eD&gu7Y;'&SK0-gW.,2H`V%6;8U(R+1L7hU/\qOWSNMB_"V"Afau^l3g5JeRBk'"5JFI0%NBZNMO"W]7_hb%J:uW4,_1okSj*EF'LgkU_Z#T5?4I@oRgIXL`$cN%X7\Wa),K[pdIpgofjoAJ5dj57jM=IAb%X!HX`mFRPIQY1:Bm\/PY1F['M@./OnV/$Vn[p,R1gN")-TH,UB4Vt;/r!N-<XMc(TFVO%qXb]*U;1F*F(%?+f#cK0`D%o\4GY`G(cgsG-Td,U,uSsHOJc'G/e>2]qddtaRsI)j^FFOseAX+NWDJW=AL/D4=9`t!!gXLcdL;.!%`K,pk_E3:F!,Id'7*YAf.U&:X,a>$V=?a-IHJi9#@XXn-d,ZJ5!EDt-LsX90`u>:%Yf^s=V37-,RKS3%8Js2ihD[2c*[7sK+^7T1%X3tCr?GJud8hi3/$qt]<\rb.-(9@G?7jd66Httu3e$)^fiLAb9fr'!_2!AMf+cTh!1Tht/nl3DCKW93oONIhd4gpe7bp+U/W_jN<%[$3]_\1"*fj1.!N>id59>njn5D^*1S]L%@"18Y<^E2(#`MJA&"j"KmA1Q2sV.IL31'#o'/\'N9S/Au+ua.q<6m/h(U1,8ZWrad8Y%Jau1Ed_Nmq:'4(4_sg9>-%[4hhB&q8^5AqO+nl]mmHYsBg%7\t^T[Eh^uL7:EXd3@ls`M>hqM/)#&D36V@"<2Y>c3+*[D4)#RuJ]%`fNll^J*[R\@bkh]_$X3F(?4,B,DQ#9.tml$S)WEMpTq6'o'73-]o+j0IJOU]I3e8R_F_?oV+TVA&/6c_1[Xj<`BbF&1EJ[%5X!5%-TIh#s(,FUo-B16YS4l>'Y-thG8;Xl5DgY9j@IU.Wh'F<%kQA-7Y"LsrR:,MA>GNS\mr(,YqQf0d5X*?X^$BE\=$W]+/Z"f$Vh[p%4RR+(P9utLhaoqZ@@k[6PSPEK3Q`gHd@Cj$F[6XSAWOgM)3kkW&Q:f&gqg+!T\-h473SI%!d'Q@0Tm6A@!-*TV6P5hrM6;gorr(4%alG#dTMtSp/d_]sDlQ!EI@1AR?H(:#kRgN)5N/Gi7Z1qr^f-+I5TjS%._^u?YBXg/aO;%qrV!LJn,s)t=UFp6![7/cnBf'NN?Y"I%YuhVjC'b^@R8"G<n][c>Pagks'k,1/Y(sZq:n&Je>;S4rV%,%Hlj`PPkaTGX7=?NS+kDF:%T<Una(32.<!:Di81o6AFb6Y<]`TOt%\F[;A$<g4i"nHh!\VS8HA"P)mG+c$J81k!R0F3=44r+<0B]:cJE'Ys-SS1<5@RbRA1Jgn`Z*4CL;j8OikM4!gC;p0KQn8buL1=ti%9)+t*:D(o[?E"d$aVKOc\d><_BMSXY,)1nc<A8of'SV+%=Ls2YBVkh1M'+<S;ki'/94U?]&C(iXR<Z!_D>-:p`1Ip2SI#7l2m3j[%<5b1E*`<O&(kY88.a8MOFXZ:dTud`h=&ML<*p_V^ZpHu9#[E\7JYOM?b$qO!f/(;o&R!CJlr?NCnhl!Eb0UA7>*KW\cfr-m1QhE5%4<d\/Teh:r%/q`_4"VY_UI@Jl%2LC(YV4na2i>Ck_$-@E0(LLVQtq*NXGp/p_]jb!)?`n&)]f3h.UP_>H;TVMj2Z=C8SWQ@X7-0(%S)odO$5P-VQ?T(R$Ka_:0R+GF;C6`#`DpRC$N0d=Qo9Pc7FTd'`aohl(1bHsJ2EDmdp'R\UKJG'oMR36V<l67EZ*D*VDZbF\ID$;%+T16pX<!7=.FUUQ.kYmE/R?Lb//'2U/mrj+'H-F=VM37gfq+.K5nO,]0/-SDPc7Q9?]U=&\;9'&kYLjZ.d&g^$(,a`$-S6:.UgKL%A:7U\@F4j!NhoF-(_ElI-tB8db-]Ci8rF33A&)H.=W#i/h5!nY5%uG`#5pq?+>%0I2!Vg@b,njjP^ShYlA1f.bG2+iIS7ocRb^@G%NlW(h:f6<LrKa%+)8J&TD[@=7PINoYBQ1.U"%L_3-rBgSN2FEI$*AH?f:iI=Q*;F-m""r.23a4\kW859^H^1)(nio$V5o:ZlqBd[%;)WY&NjQVn)]4iM.i[fV)efCa1$h/@)\aU8fo<KjPB)MVTgmmhIk+!L<8L_G7c*&m(U(so33Ylu&^QV;3,#<^Sa=ZZ%OOs/qni$6%a=5TL*K+)o<K9Kd;OPF@>VqG=*)(^R1p!C0beZ%RM]+B,V[OrKGZ.M2K>&Tc@p:F)#e,2pJu))[@Zm_?$/eL;jJc>I-jW!K5=Xje%Sr84H'fsi$>)l#/Bq9mA5rrCQ%KVqh(d(`Zj/&W9C)e<R_oS!5*11$Ilo\9-&3]$58d,]1'sI]XH/lNbhGi;rR<ZS7[(*q>"ga04%GqQGfr_2%mX!#!pBWdV[MrEZX1Vs@!;!fFS\cs_:oD17C"01ZB,;Pu_RJ1D@%<W.rF!bQ#*:dd<B+u+NL'o5='Po@?q_L)36j\)m%0Ofe!<?Nj<BUOZ(+5`ok$l0R\mBi%mi60ai+lfK38]qsPDT]4a%.(gn0fL:GnI33sN/#G2[ZN7#K4q'+e;]-4bbt3O=JI1$"'Z@4%A0_T'+D/W.0T+M[Y"9!<XQK*%NIJ^>912I0I#6,=VSrqZ817`gBGYtNTo^$7?-&gTed)/>Ee09V/2n:r1d?D6a%!P"mDRuh19uW#%bOKt^SQN:Mo!h:NO@9Q93islLJ#6A!oV*doA:\lXlnpY`Kr.c70]+aF-$-=._*[if30WuIH3Fr!kJbZd'gFP9`MaN9"L0j#(+W@Y%=(A"*W+Op'F4O4mP;_QghC'*\E$p*HX]4d_b\e=N<$9d*:#fBRd-,.UT2@&q8;cq9M\NbPOZ?i,$=8D4-mMT&7>YJp%APAc;Fd6O%7\[]A,7Z`/:_MnMBWr'sE8lVr6&e,QDP;`^)L^Ut`:*aFGs]dH`9*">6/X7j>dG1nR;j0_K"!.'(*cPP'7*ClBjq5HN&IB(P[J9H%67*W_>&"Djg&t%fj)cVBk[N.ga"q9n(Fr:>"J\Y(P-E&1_LuO0(E*m[Ko([-1!r[L\-?NG+tjP(ZrDhklfH<Q0K)^$Q&099HWt&*%1"'r,0Y%ao,\+lNa3_IRDYRRU*2rN/W1sJPn63&%/j;)bo.UdRH-^EBX!^8cfC$.B[qJMsZ"l3Dj&Ri[H4Sq2"?A3KNI!N'cYp_=%4!b-&d+KY<Bh(Uof'oc!,tsb]k.i%taN;KI9ppX877Z[VQr]f-A-BgOa&PeF+W*L^+sfqAZZQp-N+$8P>-rUKr\fWN3=;Tk"Jc,X%l>uU7ZS&N%.6f8YH05LpH9f?'=b\oU%4so4LCOULTaBX5</.M:aC:ko,#8I)'Mo<f2,Ll;(4Z[\:^Na!(F7pJ0_]-(,'^PL&r+V(%BL.PAV.c!Ih+.c:*)I;PCj^dnpspWc`2'-t!C7DgTL@Rjk<CUsJ6_r'Gc<4C`$$9Ei/,+ldG!^2,7tU\@RE.0:PdS8Ll!=D3?e<P%iWWl=El98\0FmS=)AB]?/e)C"QIoAMU6W+Nqo$T:7M5p"?4#hPo5M(]o1_mgE[cN+Y$[)Nij+@FWS!QL+I3WM)C7rn%3s_]Z-ZX*%:mhpH=!&>7'&a-':W?(dE@Baq+tk'@`bOiF-J%></RUU4,XUE7,&6$qoX)WfD=A__>#7tm3=PkcFQ5MDF#_[<\2rc.QUE&%rp@\E%9+9Y^kCuBiM%(bnb9b*nR#M\UGTKcb*Sg_EnV#OB^5e@'LhhV=KM3"&)DZQ#HnYQfY_\Y`;PO>3+bHd<QiYEph=N>NP7V^a$/)Tc%+WX(VaGJO`TbBP7qZ2:>13%RR'/%\N!imlA9^FNm5_LPk_m<a>:;e=2OOm*6;]^l14qVL%),YN14a9`?c-OcK]G29(_"/X_eV,+T%&3CJH8Yb8moNZ,f$!t=Q_EsAr"tAW<)^QcI:'7lbOQ.<s%\>%'c^-%:!iAgC'%E&^,7kI/CamDX-e*B[/^jjrn\gs_'02a7go/)q%'8Rj`:l\+@]0:bdd4nO((&=Ar&r%`:7P?iZiLp_0BL=e7MKQn+lj"k\aKBE6O`\+1*+9"I[Y,,r#u3d#'1\@^n5p=0,@#i9g5G*u%T>k<.;J(\0*)Jim:Pd@e]Fj!,fSL)[_M8iEi\X6F#mRT1n*'*8Qq8O%676:[SeB3mUS-Rb&/)bdFSH<TL_kU6@)@^O&Z5CJ!]6L<%!\Xj=p.ePY<$Eh])N5nW@Wq0tactVGgEJHp"thtd"%gF$0Z&D$#&TKiN=WcgO#/^[4KL`Y6RD/tk9$p`a<nY46@9f26[g#%8l`gF%6($beM>6rm#+P[')7,+K:F+(lCpY0lrk$m0`/,XK)@g*g3'tg(=u$F\a6<mU,:l]'XBC]D&tmJhAYJi4Z>DAn_s?ALGVF^Nrt>mU%dY]\Q!!<[A#SfqL#X.Q(Kqgt8.[i(%O#"P?.s!qNJO";imd;?/"H=Dg)U,@A81T4-+QsB[36)".Qku%u&\p5]#bF$lLBnT$7<SdR%,j#/i&`*`K'gbQrUk8C$7R=C[bJGNXlR\1Mj[bmMVM5qQK%!,Ck+%fKNs&@t;5d%]S:1qrQ(hA#].bb$"h_&GlXCngr`mAOfgN6#%Rhs"nK7SOca!b,[r#ll]1?74;4AXn#P_D:*1-.2VZo]UXN*@$/_<W\tIE1;<7pQOJ_1et54Gh:9P0=R0,`3k9()gU#"GgToB.D8:%3:T=IhH_ZD:+T^I-]j^"TYhF6&s<Ni&!)\<EYqPiCr%$en-6Qopg1CZ=Rer'4O9.gAWSV05uT7X(Gggh]`j.]12BIQjj:'p6)EI*%EO!&nrAYFH1FgffeqfZp_rRsJq,!H]TiRcs%5I_g'2K#:3ZE\YkIU+q@I%t-,6;?m8`L+b3:uC3er:6CbHC+e[-`J$q2l]OVI$mW%p[+=Y'a9WA-X%RZ"B/19M$?d1Og=(c4r>)-U7l'FXWo`^BUg=8Cl`iSlVX8LY*=3\U)jHt]T@%@Pt@')3g.g?4P%hJ\Fq`rB;FlM%!cO.`&.FH,=fW#?SC/UJ.CuVlXES6OLkUp[Mc^#31cFL^9]&O(^gPB*R&c<0WS`;Q,+4)oa;[^flY1$CPY=c)ko9;nRKU(e-Mf?M%2pm;u<Gb,1M?;,*TWCb9=L%=0T.eA#XL"M"-:X>@5)q9SV1f6<4NkQ7R36+F(HE^7&0UI*j0N<6!iDYSg01#^8KLIi?)nXWZF'AO%kS*)nY2jP8J\k9nO;5H+-n%\5nmj!Q(MUUW2%%AP,#8<FNh.Q:cY$2aiZ*9<9k=Ze"'$V_.+'L1if@?l"Bqhp5-?Rn8U7BNaro8u%FHEL;%$/[J8`^:K0ig>B:$WO%Y4b;\JqXjYgrKWJGW"V_#Ka#>,n&99]t@ronLtT\ZnF9#,"V(M?<s[:YUo%X/!V]V'.)TBUKdLK%+i6^YTJf:a6:SMY+eHVH[<1@q'+)Pnm=J[/(k`JSke%Pl2=^o\"G!pP$:7U=W5H.SeZ^l9A2F]"7("\mX?gg_9D$Q/(bQFbWauT/%AK:t(X^eFlXV!>HeYHVV6tn*f<'(\s@C-H0M)nGO$u48=N`=9-8]Hl<Z=u=Op*VngAb6DBWSPRnTWo]KWMI@hFX5]m'f?sfPtXRj%C4HS]Ne;%CK;CG_[=lr-"rs(&Wt?o\)B"d06o:(X2.`Z1Z,nJ+@=t?\ES[G%L3^1?4sOiF7#9bVZA-A*4!9K^Z18urW^6O$N`/f-%9INKd8k"^EnY'ut`lB9s,l/jV#+;QtNfn-Kj*N-E/laaL,S^#/Jd+=hk,$hr)1#QK.\0ebElLbSg8GmbE62"N[1&?l-*X"1hqTX2%d5TW380JZ`]TFrlYHh0\-lES$:DAm+1+LNt1HG^H8J4NI158D#&Ej*6Wu*U6m<UN37WBusn'=Bq%".\hJg"nHH8n%ErL&<Fg&%N?%1BeF/n2:%GIn4%POY:FcPS#RI/<M;om?0I9%4]^EQ.V]@0!lAs3ZMR]Mh@7/EHE)W@Q>lsE3ZQ$_M&8K,FDk\$as;.ChH5G+;QW(%#,>@RFF]<hM3/7kQt1l.E_M4Ed4LHEXounSCdG#S=$""6cZ%hgk-`O6(3&<\,U0O-!N24l9qtkHPa*30ih[$@;(Nd/HaH_4"UdXt%/7+<@!Otcrd&7\OAOY7DM%sP5MV9mj"mHP[8Jm+Y+g]b'fa&=Gd\99"4mNe3$1s/-1*oSk2_#![>aVf/.=R/;7\e<]eU-S@6pX.s%AuBrtaF]IBTR`pp8/QW8ARug'ihe.O7\%!&EG6;-iZb8</C-j#HD-H;kn"gb'*Y8T9fBkAg)#"XGdK)cHj?2QaKbqo3KePo</JYm%WtbnuOt9LJ1eHhL2j,H@.Us/!W0PXG2i>P)X;"uX"l/G]>f>BjYZo,c_cW'ECi!4VQ6c*\17M^Z,&)nMBgG&siWge7VZhoDi5,bZ%h?MrGqKRJ)XimA0Rj\rU).8MEWe\5/rh5Ae.g%A_+jqYr8<F+D\dmkE$8=X/nZ=bCA0;l;l#pNEo>hpHeW+-j!j_%L9H;10mbMip%TFh]QQ%7U&2C@,i2ZiomBh:%eb#596,Z,sK(Nc(_JAQi]N[>PUd#B@K&LCg1p;BC[S?M:%&4K@P=`J[W%1mCb.6r8?Ldk*09][G)%1@cZtroQn!>SG43'i"fuTT.f[kQ;)+3-sC;^ArP,aRA[ZF<:dGdmQY3gc6;)?0ol-3R^=8hN0"FJYZ09=o&q^b!^XROh$`h/+\_?%.`&ueo=u#Me+hYQLW.&Q357q$\T!Z=Q2mU!;9gd,'a\?SB2e@=iH*#%Pf5(W-sGtu8s:S9%XoRGncUY#;Ne<=CkkVBUP'ao6>muo%Nb:df(%ecok1hd9&/]o?-*)-&93H6URkCH0mF`r08gh__?<RL9+3/O313Pd5*'L6fb\cF"L7BQH;[&tD^:;<;G6o"p]T'd@HK7_]%puSg;,RPE-XOUF"pep1Z:Q1n3amoYecAD]aYMuogO9mK,;dlDbhOYFYSfQo`8gk>?Fl!V</faiZ[d.Ho/B<8Mb5n6T1pWitb>Dps%Kgb3.^1)GS.nO7pEaq4,cdk,VJ_h?'[Yqa#"NHZ)3O6["cmOX/&8a0X5S#pg:uda.A2E\;ibUMr/>U)b+8J=;o-3jcq8ek4+*JPL%Y_mhi3Jh%.-S$thaj_XFM0-BEKHB)".e:"E!-scibD7h8L_*["Jj*Z\TBtl#1C?Q3oc%+&&k?h=RQo47i\4-m@P_^?<jNFq&&Ttn%4QE#aqiQLUAg7oKHmf2.faNY@X=[3T,DQtCBWKYBBf^4[`l)0tQlp3*@F(=(#q[4NKRJ.b#Fpl]^4ON+f)?<D(nGCAKo9D`&>^Fg%'T(TmBF6"D+),u)CCr+D+rj77H:g\fEm@/3nMuQ&2&#66Ln3!,DsPeThDf)_g'380*%"l-Sr$!]JH.LYc^&DcM"IP_&ZH\s6eCN"%@"AsZ&PsOq$\OWG=teGGM;Vl;(FO%GAjf6J&WDi;(>?9P)a00uJ]%Q:g3I&1cEi<0[rV[*P#PS2M2]6)K3\+B<YU81<(=2=[RDP8%"*/:\NTYV,Y[:&sN`$1N0*/WtlGi/W%PDB6l4cNZS>HUhAJVtMKOqD%ke5n<@OW?2;tWCi\$hXGm534W)^oJBZ%":9'o@^O5R(EE%,G%MKc0*p)RWW\OXUe37W'_($cNNLPH)!K4Q_Ftb">Fg@Fi^EfA/0^/#O*-;O&D,S0`$k758,D:dV8c&P(uORm'C3sdYS4!C[CTZ%s$THbT[7I=&-[k@DKGom(H8&iI>Yfn9F)E*)p(1kdfBU`J.bd[1:q$kBo;RI1#uNU3H!LQi_?SS$HLOsLIelGAbT-7WsMr(OmHa<%M@-t=6_@**6qFQ-7Wu]a)aX#Vi/FBR1.s)&ObJfdiH9Aq%W@W[9<-/s#[ED*H$W&)A$.>T-"!j]]JIV]_T!gUDkpr9L/ZG[=/9qk%5)Z&KWI[NCo2b+/,&8\I:'';',YQN\=4o.g*5`"3>=)&--`Epj&MXqEM]quQ>l6*a&$;1V9bH(NTV63?BpG+Y:-#S0=d>VF(]p50%3["!\ms=3VpPV$$gK71%S-oMBSYS9(*8YedfqLIR'\4,bpbah_@;Bg>3h1MNr>rb57&OmQ`$B;O,1"ohY9cH715:aXhB^.0Z)>CV%AqUjfbeiLo*HF\DnI@pZOkD.a5W=(tcZj<Cp(G[32+M69Cm"qhaHWr^2b"CS)D?u9dCWRNn^LA@3+V6/$,l7oFNS+Iaa#_'7"l@R%l%@X^7UX7;NO"Q&.b5TUJpOY:]alh-G]O%T,r$c\Usff+ePHQ*2PFTV'.ku:Jj^\-fbpEuSo7,27_72,%:Nlmh`qqWbN<+*(k$jB%P^.Y4<QRffqU>Q@HlV!cQUZNN37NObLJg`P_%#t:H+U-mIYFE7':VcDA@h"]mf5(NANM^$%&A<BES8uU`]]N,Soj-lkp1YaaNYpU%=]mcm7ca[[6F6JalWcM`Y'$nDMN#j*[_`rRCW5Lsc@q,=oJ.Y5/JBj2(T=CD:`-;B25T,t7dM=C+;)qj;7fY'qVW&4G:b[`oWBJF%[,A?T(",'bG.*$c]Obn28UYCF;P4ZAcYQQ6K%@qcWF[aX?m&sOdaXBGh!NFPY9g')oX//f7f-@.RZ7(G@Fs;_W*_%^Dre+8#)WDh%(Xl%YVnN_;J1[CJ;8<NiDlI"Mi9[*ZUOP(<^QH8koOAd$+g`L;V8[B8SM8bVc!**K2rueapSRT,W*[S+du-,B?Cs0!qYciEc1m]h%]Klb.>4M0_"?L]XJiE9r(qgla]8Fg!S47:QfM)a4e.&^c:g3-.i[Y"BP\uQmT2E1K\fr&llU)jUU.%N8B!*-2N%e"#Plf@Dl$++X%RLrpPEbQB`#qSQmB$hl&P#6'p:I`Ba^s*WIUMmKfcA]E\<dpf]1XDC"\(HS^@bO@W`=bSO#J=e#F,kk"[97!uX<k4Z;XXdi>*&ED%Bbq#4g72$EVTnhKR?\j;@4cN-U5dT7S.W-D0tm$Tle-s/8XbgKSAj>98R=;i2IQTj;$(SNL1@T,Jt5Y3@'*Xi3W?r&fu,.X)]>-g%ib'"L;U<a[gf_Tc][oe,<Yhsn?9"]g_fYXG;/(UKDe'%;B*X0*!R'/fZ)o]9%VG?K`d*Mj[Ig(lY8QI>nXA'q>dYfn>A*+9m@'kE%C$h?nq6X&-1S1lr9-(?`[90jLYP*eU7bV)+>K^)-H[JsFZL.Lfn&5Q7bAj<mCmdWqSj$q?,qP'.E4*U7jCVtpW\aqfd8KANeN29%%&/lif.u^0.>08$JeeLS/>1W9;BJBlZSDO(3B(lIr0s3\bK]ObB,-_u[B5s\Qa0hSJ'*ZXcJO,S'W$O%@A^IDS7akN^:nqb[$p(H4%aBCRiK_u]j$SO&,PYB\,Obsc=NTIC*/?RMp>Dp%,D%"Xao)al\[;<hq\"PfWaqD0Q3>n9(q4k@)[?QkGgFT4>P\oR4f"*bl7O)]j%@Y;mK$rs>fC9.1e;6,4XU<'a>[7[g%bnQRCZrW#!Zrs'OkZLQYBK;Q!?8QCTg\,F6:s2@>`2n)fTb4VsU+p-.MO[jZ2N;KU_DP'9%[*+C.0PV@;aV?<[En1je7a>2S`s>kl<fEc\oY6^!AN-/87alt=lGGW@W!+O3XADd%aJ\YtI6O7Dg<:jVA?A:SNNT[I['6sb-$@mM%,Ht>@=P9!o<pBK`g7h./.?1^Za#7&S=p3Z;>K]m3\o]\\\<48/%n,_f:+$ZeW=cXj@\ubc`3m5s7cNR;CSl+#-,F8">7,/&CJ@#<%EDso3&\&]]1&<dQ1e->*]61Nm[B^%E\BUn$dC)X\X\@GX>I'Q67bZS\"BsP`*O2EB!?4\bVI=jVf`kTnJl/t"ZE[98p1Zc]g"P$q%AS[X/b4b?njd2K;/E(QDP9d<t+^rRjeM]JHbN=*b`=B6E`L\'*lb'/*%rUa]R-6+3#np:aC6$7fC#8\S)"?TG#^STU<WhQ`m[i<V%;lA)qn*,<t3-Y>/5*b++rDOTen`TU3keJ<S+lco/e]6jB\<am8(YHo`^*tZ1q4O>Z]q^P8"4-R/'`X5a(&]t)E*qqs+R\,Oj7J#I%rr/mZ-WKg6O)mFWZ>RD!,[[sCUB)Q81j1$s]WLg-+,=;bAuU\hZQb)k!Qhf/2k$J5&*rNGHZa0DcrtSh#./+,_Zmbdj6s.;miOah%=1]ipn$:@0+$S`lof_$C^HM<u]Y@7HkGN_WV*1K\n"tt&Z>CPF'QN.ZEBW3!Pl5FMo7*5SlMZ7JEaZUX'#o`"\QIj:HN_(!(W&K!%Va\:MFml_%>3ND+&-(<@n\j51%Q9I6FNZ.Mn_TJkrb7u8H:#Sf^ZP,0D&5uK%@mnp3O1fh[L6$baXgJ.np0-heN&-7[p8>?*8ENa%]_HGeo'PVZ:#G("aoB!:5InB%I<T^UED=4??f#&CdOVuo^]"$++"3gebiOJ0p%?;<rsp=;d#S~>%AI9_PrivateDataEnd